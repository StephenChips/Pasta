module Ast;;

open Parse;
type typ = 
    | TypInt                                    (* integer *)
    | TypChar                                   (* character type *)
    | TypBool                                   (* boolean type *)
    | TypString                                 (* string type *)
    | TypRef of typ                             (* reference type *)
    | TypArray of typ * (int * int) option list (* array type *)
    | TypRecord of (typ * string) list 10       (* record type *)
    | TypEnum of string list                    (* enumerate type *)
    | TypExep  of (typ * string) list           (* exception type *)
and expr = (* rvalue expression *)
    | Const of const                (* literal constant *)
    | Access of access              (* lvalue *)
    | Binary of token * expr * expr (* binary operation *)
    | Unary of token * expr         (* unary operation *)
    | Invoke of string * expr list  (* function call *)
and const =  (* const *)
    | IConst of int    (* integer literal *)
    | RConst of float  (* real literal *)
    | BConst of bool   (* boolean literal *)
    | CConst of char   (* character literal *)
    | SConst of string (* string literal *)
    | EConst of string (* enumerate literal *)
and access = (* lvalue expression *)
    | Ref of expr                                    (* access an item's reference *)
    | Deref of access                                (* access the item pointed by an reference *)
    | Index of access * expr list                    (* access an array's item *)
    | Field of access * string                       (* access a field of a lvalue having record type *)
    | Var of string                                  (* access a variable *)
and vardeclr = 
    | DeclrVar of typ * string                       (* Declare a variable *)
    | InitVar of typ * string * const                (* Declare a variable with initialization *)
and def = 
    | DefFunc of string * vardeclr list * stmt * typ (* define a function *)
    | DefProc of string * vardeclr list * stmt       (* define a procedure *)
    | DefType of string * typ;                       (* define a type *)
and stmt = 
    | Inc of access                                 (* increase statement *)
    | Dec of access                                 (* decrease statement *)
    | Write of expr                                 (* output statement *)
    | Read of access                                (* input statement *)
    | Assign of access * expr                       (* assignment *)
    | Procedure of string * expr list               (* procedure statement *)
    | Condition of expr * stmt * stmt option        (* Conditional statement *)
    | CaseOf of expr * (const * stmt)               (* case of statement *)
    | Loop of expr * stmt                           (* loop statement *)
    | TryExcept of stmt * stmt option * stmt option (* try statement*) 
    | Compound of stmt list                         (* compoind stmt *)
    | Break                                         (* break statement *)
    | Continue                                      (* continue statement *)
and program = string * def list * vardeclr list * stmt (* main pasta program *)
;;

