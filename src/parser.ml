type token =
  | ICONST of (int)
  | RCONST of (float)
  | BCONST of (bool)
  | CCONST of (char)
  | SCONST of (string)
  | ID of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | ASG
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | GT
  | LT
  | EQUAL
  | NOTEQ
  | GTEQ
  | LTEQ
  | GETREF
  | DEREF
  | COLON
  | SCOLON
  | COMMA
  | DOT
  | RANGE
  | PROGRAM
  | FUNCTION
  | PROCEDURE
  | BEGIN
  | END
  | FOR
  | WHILE
  | REPEAT
  | INTEGER
  | THEN
  | UNTIL
  | IF
  | ELSE
  | INC
  | DEC
  | DO
  | REF
  | REAL
  | STRING
  | BOOLEAN
  | CHARACTER
  | ARRAY
  | TO
  | DOWNTO
  | VAR
  | TYPE
  | ENUMERATE
  | RECORD
  | WRITE
  | READ
  | CASE
  | OF
  | BREAK
  | CONTINUE
  | TRY
  | EXCEPT
  | NIL
  | AS
  | RAISE
  | EXCEPTION
  | FINALLY
  | FALSE
  | TRUE

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  263 (* ADD *);
  264 (* SUB *);
  265 (* MUL *);
  266 (* DIV *);
  267 (* MOD *);
  268 (* ASG *);
  269 (* LPAR *);
  270 (* RPAR *);
  271 (* LBRA *);
  272 (* RBRA *);
  273 (* GT *);
  274 (* LT *);
  275 (* EQUAL *);
  276 (* NOTEQ *);
  277 (* GTEQ *);
  278 (* LTEQ *);
  279 (* GETREF *);
  280 (* DEREF *);
  281 (* COLON *);
  282 (* SCOLON *);
  283 (* COMMA *);
  284 (* DOT *);
  285 (* RANGE *);
  286 (* PROGRAM *);
  287 (* FUNCTION *);
  288 (* PROCEDURE *);
  289 (* BEGIN *);
  290 (* END *);
  291 (* FOR *);
  292 (* WHILE *);
  293 (* REPEAT *);
  294 (* INTEGER *);
  295 (* THEN *);
  296 (* UNTIL *);
  297 (* IF *);
  298 (* ELSE *);
  299 (* INC *);
  300 (* DEC *);
  301 (* DO *);
  302 (* REF *);
  303 (* REAL *);
  304 (* STRING *);
  305 (* BOOLEAN *);
  306 (* CHARACTER *);
  307 (* ARRAY *);
  308 (* TO *);
  309 (* DOWNTO *);
  310 (* VAR *);
  311 (* TYPE *);
  312 (* ENUMERATE *);
  313 (* RECORD *);
  314 (* WRITE *);
  315 (* READ *);
  316 (* CASE *);
  317 (* OF *);
  318 (* BREAK *);
  319 (* CONTINUE *);
  320 (* TRY *);
  321 (* EXCEPT *);
  322 (* NIL *);
  323 (* AS *);
  324 (* RAISE *);
  325 (* EXCEPTION *);
  326 (* FINALLY *);
  327 (* FALSE *);
  328 (* TRUE *);
    0|]

let yytransl_block = [|
  257 (* ICONST *);
  258 (* RCONST *);
  259 (* BCONST *);
  260 (* CCONST *);
  261 (* SCONST *);
  262 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\005\000\005\000\005\000\005\000\002\000\
\010\000\010\000\010\000\010\000\010\000\011\000\011\000\012\000\
\012\000\012\000\012\000\013\000\013\000\013\000\014\000\015\000\
\015\000\016\000\016\000\006\000\017\000\017\000\018\000\018\000\
\021\000\021\000\019\000\023\000\023\000\020\000\020\000\007\000\
\008\000\026\000\026\000\025\000\025\000\025\000\025\000\009\000\
\027\000\027\000\028\000\028\000\028\000\028\000\028\000\029\000\
\029\000\029\000\033\000\033\000\035\000\034\000\034\000\037\000\
\030\000\031\000\031\000\032\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\039\000\040\000\004\000\
\042\000\042\000\054\000\054\000\055\000\055\000\056\000\056\000\
\056\000\056\000\056\000\036\000\036\000\041\000\041\000\043\000\
\044\000\044\000\045\000\048\000\049\000\050\000\051\000\047\000\
\046\000\046\000\046\000\057\000\057\000\022\000\022\000\053\000\
\053\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\058\000\058\000\052\000\052\000\052\000\
\000\000"

let yylen = "\002\000\
\004\000\003\000\002\000\001\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\006\000\003\000\
\001\000\003\000\000\000\002\000\003\000\001\000\001\000\001\000\
\003\000\001\000\004\000\003\000\001\000\005\000\005\000\009\000\
\011\000\001\000\000\000\003\000\001\000\001\000\000\000\002\000\
\005\000\004\000\001\000\001\000\001\000\001\000\001\000\004\000\
\003\000\003\000\003\000\001\000\003\000\008\000\007\000\002\000\
\003\000\001\000\003\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\000\000\003\000\004\000\003\000\
\007\000\005\000\005\000\004\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\004\000\006\000\004\000\
\008\000\008\000\004\000\002\000\002\000\002\000\002\000\005\000\
\007\000\005\000\009\000\001\000\003\000\003\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\004\000\004\000\003\000\001\000\003\000\001\000\003\000\000\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\153\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\005\000\006\000\007\000\
\008\000\000\000\000\000\119\000\028\000\000\000\031\000\032\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\084\000\000\000\000\000\077\000\120\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\078\000\079\000\080\000\
\081\000\082\000\000\000\001\000\002\000\034\000\037\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\009\000\010\000\
\011\000\013\000\012\000\000\000\118\000\020\000\000\000\000\000\
\000\000\000\000\000\000\022\000\051\000\021\000\000\000\052\000\
\053\000\054\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\141\000\140\000\143\000\139\000\138\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\108\000\109\000\
\000\000\000\000\000\000\000\000\088\000\000\000\000\000\000\000\
\000\000\035\000\000\000\000\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\136\000\137\000\135\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\121\000\033\000\000\000\
\036\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
\000\000\065\000\095\000\096\000\097\000\099\000\098\000\094\000\
\000\000\000\000\093\000\000\000\058\000\000\000\057\000\000\000\
\067\000\049\000\087\000\000\000\000\000\000\000\000\000\147\000\
\144\000\000\000\000\000\131\000\132\000\133\000\000\000\000\000\
\000\000\000\000\000\000\000\000\104\000\000\000\134\000\000\000\
\000\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\000\000\000\000\000\000\000\000\000\000\100\000\
\061\000\056\000\059\000\000\000\000\000\146\000\145\000\000\000\
\000\000\000\000\090\000\000\000\000\000\000\000\114\000\112\000\
\000\000\000\000\026\000\000\000\024\000\016\000\017\000\019\000\
\018\000\000\000\000\000\000\000\149\000\103\000\000\000\000\000\
\117\000\000\000\000\000\040\000\014\000\015\000\023\000\000\000\
\000\000\000\000\000\000\089\000\113\000\000\000\000\000\000\000\
\105\000\106\000\091\000\000\000\041\000\063\000\000\000\000\000\
\115\000\064\000\062\000"

let yydgoto = "\002\000\
\004\000\005\000\011\000\052\000\012\000\013\000\014\000\015\000\
\016\000\092\000\023\001\010\001\093\000\094\000\184\000\185\000\
\234\000\022\000\023\000\024\000\072\000\025\000\073\000\118\000\
\074\000\235\000\027\000\095\000\096\000\097\000\098\000\099\000\
\138\000\139\000\140\000\227\000\040\001\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\119\000\067\000\228\000\194\000\195\000\
\230\000\208\000"

let yysindex = "\040\000\
\021\255\000\000\079\255\000\000\095\255\071\255\096\255\100\255\
\116\255\117\255\115\255\125\255\000\000\000\000\000\000\000\000\
\000\000\164\255\168\255\000\000\000\000\206\255\000\000\000\000\
\025\255\146\255\000\000\173\001\205\255\095\255\116\255\116\255\
\116\255\210\255\062\255\228\255\146\001\107\255\230\255\023\255\
\173\001\023\255\023\255\023\255\023\255\023\255\023\255\000\000\
\000\000\173\001\234\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\255\000\000\000\000\000\000\000\000\212\255\
\222\255\246\255\247\255\000\000\016\255\249\255\000\000\000\000\
\000\000\000\000\000\000\252\255\000\000\000\000\016\255\251\255\
\116\255\015\255\116\255\000\000\000\000\000\000\248\255\000\000\
\000\000\000\000\000\000\023\255\023\255\237\255\139\255\023\255\
\023\255\023\255\000\000\000\000\000\000\000\000\000\000\023\255\
\064\000\239\255\085\000\211\000\211\000\108\000\000\000\000\000\
\132\000\013\255\003\000\173\001\000\000\116\255\116\255\255\255\
\001\000\000\000\011\000\023\255\000\000\020\000\153\255\197\255\
\010\255\255\254\250\255\004\000\253\255\117\255\211\000\012\000\
\023\255\023\255\023\255\023\000\153\000\000\000\000\000\000\000\
\023\255\023\255\023\255\023\255\023\255\023\255\023\255\023\255\
\023\255\023\255\023\255\173\001\023\255\023\255\023\255\173\001\
\023\255\197\255\116\255\173\001\023\255\000\000\000\000\222\255\
\000\000\191\255\016\255\116\255\000\000\211\000\006\000\021\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\197\255\000\000\016\255\000\000\008\000\000\000\116\255\
\000\000\000\000\000\000\048\000\026\000\027\000\016\000\000\000\
\000\000\003\255\003\255\000\000\000\000\000\000\017\255\017\255\
\017\255\017\255\017\255\017\255\000\000\003\255\000\000\211\000\
\005\000\000\000\024\000\065\255\026\255\007\000\149\255\032\000\
\022\000\000\000\115\255\050\000\002\000\020\000\181\255\000\000\
\000\000\000\000\000\000\023\255\023\255\000\000\000\000\023\000\
\173\001\173\001\000\000\173\001\054\000\173\001\000\000\000\000\
\116\255\035\000\000\000\108\255\000\000\000\000\000\000\000\000\
\000\000\015\000\169\000\190\000\000\000\000\000\036\000\030\000\
\000\000\022\255\115\255\000\000\000\000\000\000\000\000\116\255\
\173\001\173\001\197\255\000\000\000\000\173\001\051\000\148\255\
\000\000\000\000\000\000\180\255\000\000\000\000\116\255\044\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\
\000\000\000\000\000\000\189\255\000\000\047\000\073\000\073\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\000\000\225\255\225\255\000\000\000\000\
\000\000\031\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\074\000\
\076\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\083\000\000\000\152\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\212\000\213\000\185\001\000\000\000\000\
\000\000\000\000\000\000\119\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\255\000\000\000\000\
\000\000\000\000\000\000\254\254\000\000\072\000\017\001\000\000\
\000\000\083\000\092\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\046\001\000\000\000\000\000\000\046\001\
\248\001\000\000\000\000\189\255\083\000\000\000\000\000\096\000\
\000\000\000\000\000\000\066\000\000\000\162\255\000\000\000\000\
\095\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\236\255\000\000\
\000\000\253\000\057\001\000\000\000\000\000\000\226\001\025\002\
\080\002\135\002\190\002\245\002\000\000\117\001\000\000\106\001\
\004\255\000\000\000\000\000\000\068\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\033\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\001\088\000\000\000\086\000\000\000\045\255\000\000\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\001\046\001\195\255\000\000\000\000\189\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\093\001\245\255\000\000\000\000\000\000\000\000\
\000\000\223\255\000\000\000\000\224\255\000\000\149\000\000\000\
\053\000\000\000\235\255\233\255\000\000\172\255\006\001\232\255\
\101\001\133\000\250\000\000\000\000\000\000\000\000\000\000\000\
\169\255\007\001\000\000\135\255\000\000\216\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\227\255\209\255\117\000\000\000\000\000\
\000\000\154\000"

let yytablesize = 1083
let yytable = "\029\000\
\114\000\084\000\122\000\141\000\135\000\137\000\137\000\071\000\
\071\000\070\000\070\000\155\000\156\000\157\000\193\000\113\000\
\120\000\115\000\116\000\117\000\020\000\086\000\121\000\153\000\
\154\000\155\000\156\000\157\000\103\000\102\000\034\000\060\000\
\197\000\124\000\196\000\104\000\036\000\102\000\124\000\060\000\
\001\000\125\000\178\000\102\000\130\000\105\000\106\000\124\000\
\027\000\035\000\003\000\036\000\036\000\079\000\133\000\029\001\
\085\000\060\000\136\000\027\000\107\000\021\000\080\000\081\000\
\082\000\083\000\088\000\078\000\102\000\108\000\085\000\144\000\
\240\000\102\000\136\000\143\000\166\000\171\000\085\000\149\000\
\150\000\151\000\172\000\174\000\006\000\076\000\229\000\152\000\
\109\000\165\000\166\000\030\001\253\000\110\000\111\000\085\000\
\017\000\112\000\251\000\079\000\085\000\018\000\071\000\177\000\
\175\000\019\000\252\000\182\000\080\000\081\000\082\000\083\000\
\243\000\021\001\085\000\137\000\205\000\206\000\100\000\101\000\
\204\000\020\000\026\000\221\000\231\000\007\000\008\000\225\000\
\210\000\211\000\212\000\213\000\214\000\215\000\216\000\217\000\
\218\000\219\000\220\000\226\000\222\000\223\000\224\000\232\000\
\085\000\079\000\233\000\028\000\009\000\010\000\030\000\146\000\
\085\000\147\000\080\000\081\000\082\000\083\000\142\000\142\000\
\142\000\142\000\142\000\241\000\037\000\142\000\148\000\142\000\
\142\000\142\000\142\000\142\000\142\000\142\000\124\000\038\000\
\031\000\142\000\142\000\036\000\032\000\038\001\255\000\085\000\
\142\000\142\000\186\000\038\000\085\000\039\001\142\000\142\000\
\032\001\142\000\038\000\137\000\142\000\187\000\188\000\189\000\
\190\000\191\000\192\000\142\000\142\000\124\000\018\001\042\001\
\014\001\015\001\137\000\016\001\142\000\041\001\085\000\035\000\
\142\000\036\000\006\001\011\001\012\001\142\000\085\000\002\001\
\142\000\142\000\022\001\007\001\092\000\008\001\009\001\033\000\
\068\000\085\000\077\000\102\000\092\000\126\000\036\001\123\000\
\033\001\034\001\148\000\148\000\148\000\148\000\148\000\127\000\
\145\000\148\000\152\000\148\000\148\000\148\000\148\000\148\000\
\148\000\148\000\152\000\128\000\129\000\148\000\148\000\031\001\
\152\000\134\000\152\000\131\000\148\000\148\000\132\000\173\000\
\181\000\142\000\148\000\148\000\183\000\148\000\167\000\179\000\
\148\000\203\000\180\000\199\000\207\000\200\000\201\000\148\000\
\148\000\152\000\236\000\238\000\237\000\239\000\152\000\246\000\
\148\000\242\000\247\000\248\000\148\000\000\001\249\000\001\001\
\250\000\148\000\003\001\254\000\148\000\148\000\153\000\154\000\
\155\000\156\000\157\000\017\001\020\001\027\001\004\001\028\001\
\158\000\159\000\160\000\161\000\162\000\163\000\153\000\154\000\
\155\000\156\000\157\000\024\001\037\001\043\001\030\000\003\000\
\158\000\159\000\160\000\161\000\162\000\163\000\047\000\045\000\
\085\000\046\000\066\000\153\000\154\000\155\000\156\000\157\000\
\152\000\050\000\043\000\244\000\245\000\158\000\159\000\160\000\
\161\000\162\000\163\000\152\000\164\000\044\000\025\000\101\000\
\116\000\085\000\153\000\154\000\155\000\156\000\157\000\085\000\
\165\000\166\000\069\000\168\000\158\000\159\000\160\000\161\000\
\162\000\163\000\005\001\176\000\075\000\019\001\169\000\202\000\
\165\000\166\000\153\000\154\000\155\000\156\000\157\000\035\001\
\198\000\013\001\000\000\000\000\158\000\159\000\160\000\161\000\
\162\000\163\000\000\000\000\000\000\000\165\000\166\000\153\000\
\154\000\155\000\156\000\157\000\000\000\000\000\209\000\000\000\
\000\000\158\000\159\000\160\000\161\000\162\000\163\000\153\000\
\154\000\155\000\156\000\157\000\165\000\166\000\000\000\000\000\
\000\000\158\000\159\000\160\000\161\000\162\000\163\000\000\000\
\170\000\000\000\000\000\000\000\153\000\154\000\155\000\156\000\
\157\000\000\000\000\000\000\000\165\000\166\000\158\000\159\000\
\160\000\161\000\162\000\163\000\000\000\025\001\000\000\000\000\
\000\000\153\000\154\000\155\000\156\000\157\000\000\000\000\000\
\000\000\165\000\166\000\158\000\159\000\160\000\161\000\162\000\
\163\000\000\000\026\001\000\000\000\000\110\000\111\000\000\000\
\000\000\165\000\166\000\000\000\000\000\110\000\111\000\000\000\
\000\000\000\000\000\000\110\000\111\000\110\000\111\000\000\000\
\000\000\000\000\000\000\128\000\128\000\000\000\165\000\166\000\
\000\000\000\000\128\000\000\000\128\000\128\000\128\000\128\000\
\128\000\128\000\128\000\000\000\110\000\111\000\128\000\128\000\
\000\000\110\000\111\000\165\000\166\000\128\000\128\000\000\000\
\000\000\000\000\000\000\128\000\128\000\000\000\128\000\000\000\
\000\000\128\000\086\000\000\000\000\000\000\000\000\000\000\000\
\128\000\128\000\086\000\000\000\000\000\000\000\000\000\000\000\
\086\000\128\000\086\000\000\000\000\000\128\000\000\000\129\000\
\129\000\000\000\128\000\000\000\000\000\128\000\129\000\085\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\085\000\
\000\000\086\000\129\000\129\000\000\000\085\000\086\000\085\000\
\000\000\129\000\129\000\000\000\000\000\000\000\000\000\129\000\
\129\000\000\000\129\000\000\000\000\000\129\000\000\000\000\000\
\000\000\000\000\000\000\000\000\129\000\129\000\085\000\000\000\
\000\000\000\000\000\000\085\000\000\000\129\000\000\000\000\000\
\000\000\129\000\000\000\130\000\130\000\000\000\129\000\000\000\
\000\000\129\000\130\000\107\000\130\000\130\000\130\000\130\000\
\130\000\130\000\130\000\107\000\000\000\000\000\130\000\130\000\
\000\000\107\000\000\000\107\000\000\000\130\000\130\000\086\000\
\000\000\000\000\000\000\130\000\130\000\000\000\130\000\000\000\
\000\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\
\130\000\130\000\107\000\000\000\000\000\000\000\000\000\107\000\
\000\000\130\000\038\000\000\000\000\000\130\000\000\000\079\000\
\000\000\000\000\130\000\000\000\000\000\130\000\000\000\087\000\
\080\000\081\000\082\000\083\000\088\000\000\000\150\000\000\000\
\150\000\089\000\090\000\000\000\000\000\028\000\000\000\039\000\
\040\000\041\000\150\000\000\000\000\000\042\000\091\000\043\000\
\044\000\000\000\150\000\000\000\000\000\000\000\000\000\000\000\
\150\000\000\000\150\000\000\000\000\000\000\000\045\000\046\000\
\047\000\000\000\048\000\049\000\050\000\000\000\000\000\122\000\
\051\000\122\000\122\000\122\000\122\000\122\000\122\000\122\000\
\000\000\150\000\000\000\122\000\122\000\000\000\150\000\000\000\
\000\000\000\000\122\000\122\000\000\000\152\000\000\000\152\000\
\122\000\122\000\000\000\122\000\000\000\000\000\122\000\000\000\
\000\000\152\000\000\000\000\000\000\000\122\000\122\000\000\000\
\000\000\152\000\000\000\000\000\000\000\000\000\122\000\152\000\
\000\000\152\000\122\000\000\000\000\000\000\000\123\000\122\000\
\123\000\123\000\123\000\123\000\123\000\123\000\123\000\000\000\
\000\000\000\000\123\000\123\000\000\000\000\000\000\000\000\000\
\152\000\123\000\123\000\000\000\000\000\152\000\000\000\123\000\
\123\000\000\000\123\000\000\000\000\000\123\000\000\000\000\000\
\000\000\000\000\000\000\000\000\123\000\123\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\123\000\000\000\000\000\
\000\000\123\000\000\000\000\000\000\000\124\000\123\000\124\000\
\124\000\124\000\124\000\124\000\124\000\124\000\000\000\000\000\
\000\000\124\000\124\000\000\000\000\000\000\000\000\000\000\000\
\124\000\124\000\000\000\000\000\000\000\000\000\124\000\124\000\
\000\000\124\000\000\000\000\000\124\000\000\000\000\000\000\000\
\000\000\000\000\000\000\124\000\124\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\124\000\000\000\000\000\000\000\
\124\000\000\000\000\000\000\000\127\000\124\000\127\000\127\000\
\127\000\127\000\127\000\127\000\127\000\000\000\000\000\000\000\
\127\000\127\000\000\000\000\000\000\000\000\000\000\000\127\000\
\127\000\000\000\000\000\000\000\000\000\127\000\127\000\000\000\
\127\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\000\000\000\000\000\000\000\127\000\
\000\000\000\000\000\000\125\000\127\000\125\000\125\000\125\000\
\125\000\125\000\125\000\125\000\000\000\000\000\000\000\125\000\
\125\000\000\000\000\000\000\000\000\000\000\000\125\000\125\000\
\000\000\000\000\000\000\000\000\125\000\125\000\000\000\125\000\
\000\000\000\000\125\000\000\000\000\000\000\000\000\000\000\000\
\000\000\125\000\125\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\125\000\000\000\000\000\000\000\125\000\000\000\
\000\000\000\000\126\000\125\000\126\000\126\000\126\000\126\000\
\126\000\126\000\126\000\000\000\000\000\000\000\126\000\126\000\
\000\000\000\000\000\000\000\000\000\000\126\000\126\000\000\000\
\000\000\000\000\000\000\126\000\126\000\000\000\126\000\000\000\
\000\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\126\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\126\000\000\000\000\000\000\000\126\000\000\000\000\000\
\000\000\000\000\126\000"

let yycheck = "\011\000\
\041\000\035\000\050\000\091\000\089\000\090\000\091\000\031\000\
\032\000\031\000\032\000\009\001\010\001\011\001\136\000\040\000\
\046\000\042\000\043\000\044\000\006\001\006\001\047\000\007\001\
\008\001\009\001\010\001\011\001\006\001\026\001\006\001\034\001\
\034\001\026\001\025\001\013\001\027\001\034\001\026\001\042\001\
\001\000\034\001\127\000\040\001\077\000\023\001\024\001\026\001\
\016\001\025\001\030\001\027\001\027\001\038\001\087\000\034\001\
\026\001\060\001\060\001\027\001\038\001\009\000\047\001\048\001\
\049\001\050\001\051\001\006\001\065\001\047\001\026\001\101\000\
\194\000\070\001\060\001\100\000\074\001\065\001\034\001\104\000\
\105\000\106\000\070\001\124\000\006\001\033\000\171\000\112\000\
\066\001\073\001\074\001\070\001\067\001\071\001\072\001\065\001\
\026\001\075\001\034\001\038\001\070\001\006\001\126\000\127\000\
\126\000\006\001\042\001\132\000\047\001\048\001\049\001\050\001\
\200\000\006\001\070\001\200\000\146\000\147\000\012\001\013\001\
\145\000\006\001\006\001\164\000\172\000\031\001\032\001\168\000\
\153\000\154\000\155\000\156\000\157\000\158\000\159\000\160\000\
\161\000\162\000\163\000\169\000\165\000\166\000\167\000\173\000\
\026\001\038\001\179\000\033\001\054\001\055\001\026\001\013\001\
\034\001\015\001\047\001\048\001\049\001\050\001\007\001\008\001\
\009\001\010\001\011\001\196\000\019\001\014\001\028\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\026\001\014\001\
\013\001\026\001\027\001\027\001\013\001\034\001\034\001\065\001\
\033\001\034\001\034\001\026\001\070\001\042\001\039\001\040\001\
\024\001\042\001\033\001\024\001\045\001\001\001\002\001\003\001\
\004\001\005\001\006\001\052\001\053\001\026\001\254\000\039\001\
\249\000\250\000\039\001\252\000\061\001\034\001\026\001\025\001\
\065\001\027\001\038\001\244\000\245\000\070\001\034\001\235\000\
\073\001\074\001\004\001\047\001\034\001\049\001\050\001\026\001\
\028\001\006\001\025\001\006\001\042\001\026\001\030\001\006\001\
\025\001\026\001\007\001\008\001\009\001\010\001\011\001\026\001\
\012\001\014\001\026\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\034\001\014\001\014\001\026\001\027\001\019\001\
\040\001\015\001\042\001\019\001\033\001\034\001\019\001\013\001\
\006\001\026\001\039\001\040\001\001\001\042\001\040\001\025\001\
\045\001\014\001\026\001\034\001\006\001\026\001\034\001\052\001\
\053\001\065\001\029\001\027\001\016\001\025\001\070\001\014\001\
\061\001\034\001\016\001\028\001\065\001\014\001\042\001\026\001\
\025\001\070\001\001\001\045\001\073\001\074\001\007\001\008\001\
\009\001\010\001\011\001\006\001\026\001\026\001\061\001\034\001\
\017\001\018\001\019\001\020\001\021\001\022\001\007\001\008\001\
\009\001\010\001\011\001\061\001\026\001\034\001\033\001\033\001\
\017\001\018\001\019\001\020\001\021\001\022\001\014\001\014\001\
\040\001\014\001\026\001\007\001\008\001\009\001\010\001\011\001\
\014\001\026\001\033\001\052\001\053\001\017\001\018\001\019\001\
\020\001\021\001\022\001\016\001\045\001\014\001\016\001\025\001\
\045\001\026\001\007\001\008\001\009\001\010\001\011\001\034\001\
\073\001\074\001\030\000\039\001\017\001\018\001\019\001\020\001\
\021\001\022\001\238\000\126\000\032\000\001\001\027\001\142\000\
\073\001\074\001\007\001\008\001\009\001\010\001\011\001\027\001\
\138\000\248\000\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\073\001\074\001\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\014\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\007\001\
\008\001\009\001\010\001\011\001\073\001\074\001\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\061\001\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\073\001\074\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\045\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\073\001\074\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\045\001\255\255\255\255\026\001\026\001\255\255\
\255\255\073\001\074\001\255\255\255\255\034\001\034\001\255\255\
\255\255\255\255\255\255\040\001\040\001\042\001\042\001\255\255\
\255\255\255\255\255\255\007\001\008\001\255\255\073\001\074\001\
\255\255\255\255\014\001\255\255\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\065\001\065\001\026\001\027\001\
\255\255\070\001\070\001\073\001\074\001\033\001\034\001\255\255\
\255\255\255\255\255\255\039\001\040\001\255\255\042\001\255\255\
\255\255\045\001\026\001\255\255\255\255\255\255\255\255\255\255\
\052\001\053\001\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\061\001\042\001\255\255\255\255\065\001\255\255\007\001\
\008\001\255\255\070\001\255\255\255\255\073\001\014\001\026\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\034\001\
\255\255\065\001\026\001\027\001\255\255\040\001\070\001\042\001\
\255\255\033\001\034\001\255\255\255\255\255\255\255\255\039\001\
\040\001\255\255\042\001\255\255\255\255\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\053\001\065\001\255\255\
\255\255\255\255\255\255\070\001\255\255\061\001\255\255\255\255\
\255\255\065\001\255\255\007\001\008\001\255\255\070\001\255\255\
\255\255\073\001\014\001\026\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\034\001\255\255\255\255\026\001\027\001\
\255\255\040\001\255\255\042\001\255\255\033\001\034\001\006\001\
\255\255\255\255\255\255\039\001\040\001\255\255\042\001\255\255\
\255\255\045\001\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\053\001\065\001\255\255\255\255\255\255\255\255\070\001\
\255\255\061\001\006\001\255\255\255\255\065\001\255\255\038\001\
\255\255\255\255\070\001\255\255\255\255\073\001\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\255\255\014\001\255\255\
\016\001\056\001\057\001\255\255\255\255\033\001\255\255\035\001\
\036\001\037\001\026\001\255\255\255\255\041\001\069\001\043\001\
\044\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\255\255\042\001\255\255\255\255\255\255\058\001\059\001\
\060\001\255\255\062\001\063\001\064\001\255\255\255\255\014\001\
\068\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\065\001\255\255\026\001\027\001\255\255\070\001\255\255\
\255\255\255\255\033\001\034\001\255\255\014\001\255\255\016\001\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\026\001\255\255\255\255\255\255\052\001\053\001\255\255\
\255\255\034\001\255\255\255\255\255\255\255\255\061\001\040\001\
\255\255\042\001\065\001\255\255\255\255\255\255\014\001\070\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\065\001\033\001\034\001\255\255\255\255\070\001\255\255\039\001\
\040\001\255\255\042\001\255\255\255\255\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\255\255\065\001\255\255\255\255\255\255\014\001\070\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\255\255\255\255\255\255\255\255\039\001\040\001\
\255\255\042\001\255\255\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\053\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\255\255\255\255\
\065\001\255\255\255\255\255\255\014\001\070\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\255\255\255\255\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\255\255\255\255\255\255\065\001\
\255\255\255\255\255\255\014\001\070\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\065\001\255\255\
\255\255\255\255\014\001\070\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\255\255\
\255\255\255\255\255\255\039\001\040\001\255\255\042\001\255\255\
\255\255\045\001\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\053\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\255\255\065\001\255\255\255\255\
\255\255\255\255\070\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  MOD\000\
  ASG\000\
  LPAR\000\
  RPAR\000\
  LBRA\000\
  RBRA\000\
  GT\000\
  LT\000\
  EQUAL\000\
  NOTEQ\000\
  GTEQ\000\
  LTEQ\000\
  GETREF\000\
  DEREF\000\
  COLON\000\
  SCOLON\000\
  COMMA\000\
  DOT\000\
  RANGE\000\
  PROGRAM\000\
  FUNCTION\000\
  PROCEDURE\000\
  BEGIN\000\
  END\000\
  FOR\000\
  WHILE\000\
  REPEAT\000\
  INTEGER\000\
  THEN\000\
  UNTIL\000\
  IF\000\
  ELSE\000\
  INC\000\
  DEC\000\
  DO\000\
  REF\000\
  REAL\000\
  STRING\000\
  BOOLEAN\000\
  CHARACTER\000\
  ARRAY\000\
  TO\000\
  DOWNTO\000\
  VAR\000\
  TYPE\000\
  ENUMERATE\000\
  RECORD\000\
  WRITE\000\
  READ\000\
  CASE\000\
  OF\000\
  BREAK\000\
  CONTINUE\000\
  TRY\000\
  EXCEPT\000\
  NIL\000\
  AS\000\
  RAISE\000\
  EXCEPTION\000\
  FINALLY\000\
  FALSE\000\
  TRUE\000\
  "

let yynames_block = "\
  ICONST\000\
  RCONST\000\
  BCONST\000\
  CCONST\000\
  SCONST\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'program_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 37 "parser.mly"
                                                                       ( print_endline "Parse Successfully.";; )
# 704 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'global_declaration_list) in
    Obj.repr(
# 41 "parser.mly"
                                                        ()
# 712 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global_declaration) in
    Obj.repr(
# 42 "parser.mly"
                                ()
# 719 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 46 "parser.mly"
                           ()
# 726 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_definition) in
    Obj.repr(
# 47 "parser.mly"
                           ()
# 733 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 48 "parser.mly"
                          ()
# 740 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition) in
    Obj.repr(
# 49 "parser.mly"
                      ()
# 747 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 53 "parser.mly"
                      ()
# 754 "parser.ml"
               : 'program_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
             ()
# 760 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
             ()
# 766 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
             ()
# 772 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                ()
# 778 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
              ()
# 784 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
         ()
# 791 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 68 "parser.mly"
                  ()
# 798 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
             ()
# 804 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
           ()
# 810 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
                ()
# 816 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
              ()
# 822 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
         ()
# 829 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 80 "parser.mly"
                 ()
# 836 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 81 "parser.mly"
                  ()
# 843 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'range_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'any_named_type) in
    Obj.repr(
# 84 "parser.mly"
                                                 ()
# 851 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range_list) in
    Obj.repr(
# 88 "parser.mly"
                             ()
# 859 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range) in
    Obj.repr(
# 89 "parser.mly"
            ()
# 866 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "parser.mly"
                          ()
# 874 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
      ()
# 880 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 98 "parser.mly"
                            ()
# 887 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declr_or_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 102 "parser.mly"
                                               ()
# 895 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declr_or_init) in
    Obj.repr(
# 103 "parser.mly"
                    ()
# 902 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 107 "parser.mly"
                ()
# 909 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 108 "parser.mly"
               ()
# 916 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 111 "parser.mly"
                                      ()
# 924 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 112 "parser.mly"
                ()
# 931 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 116 "parser.mly"
                              ()
# 940 "parser.ml"
               : 'var_declr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_init_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 120 "parser.mly"
                                   ()
# 948 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 121 "parser.mly"
               ()
# 955 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'simple_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 129 "parser.mly"
                                                  ()
# 964 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
                                ()
# 973 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 134 "parser.mly"
                                                                                            ()
# 983 "parser.ml"
               : 'procedure_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'any_type) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 138 "parser.mly"
                                                                                                          ()
# 994 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 142 "parser.mly"
                          ()
# 1001 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
      ()
# 1007 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 147 "parser.mly"
                                          ()
# 1015 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr_list) in
    Obj.repr(
# 148 "parser.mly"
                     ()
# 1022 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 149 "parser.mly"
                    ()
# 1029 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
                       ()
# 1035 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 154 "parser.mly"
                              ()
# 1042 "parser.ml"
               : 'type_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 158 "parser.mly"
                                                     ()
# 1051 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_body) in
    Obj.repr(
# 159 "parser.mly"
                                ()
# 1059 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 163 "parser.mly"
               ()
# 1066 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record_body) in
    Obj.repr(
# 164 "parser.mly"
                  ()
# 1073 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumerate_body) in
    Obj.repr(
# 165 "parser.mly"
                     ()
# 1080 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exception_body) in
    Obj.repr(
# 166 "parser.mly"
                     ()
# 1087 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference_body) in
    Obj.repr(
# 167 "parser.mly"
                     ()
# 1094 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 171 "parser.mly"
                                               ()
# 1102 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 172 "parser.mly"
                              ()
# 1109 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 173 "parser.mly"
                                  ()
# 1116 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 177 "parser.mly"
                                          ()
# 1124 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field) in
    Obj.repr(
# 178 "parser.mly"
                  ()
# 1131 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 182 "parser.mly"
                           ()
# 1139 "parser.ml"
               : 'fixed_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'variant_else_part) in
    Obj.repr(
# 186 "parser.mly"
                                                                                             ()
# 1149 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 187 "parser.mly"
                                                                           ()
# 1158 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 191 "parser.mly"
                           ()
# 1165 "parser.ml"
               : 'variant_else_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 195 "parser.mly"
                          ()
# 1172 "parser.ml"
               : 'enumerate_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
                ()
# 1178 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 200 "parser.mly"
                                     ()
# 1185 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 204 "parser.mly"
                 ()
# 1192 "parser.ml"
               : 'reference_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_statement) in
    Obj.repr(
# 210 "parser.mly"
                           ()
# 1199 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_statement) in
    Obj.repr(
# 211 "parser.mly"
                          ()
# 1206 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_then_else_statement) in
    Obj.repr(
# 212 "parser.mly"
                             ()
# 1213 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_of_statement) in
    Obj.repr(
# 213 "parser.mly"
                        ()
# 1220 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_do_statement) in
    Obj.repr(
# 214 "parser.mly"
                         ()
# 1227 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_statement) in
    Obj.repr(
# 215 "parser.mly"
                    ()
# 1234 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'repeat_until_statement) in
    Obj.repr(
# 216 "parser.mly"
                             ()
# 1241 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'try_except_statement) in
    Obj.repr(
# 217 "parser.mly"
                           ()
# 1248 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 218 "parser.mly"
                         ()
# 1255 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'raise_statement) in
    Obj.repr(
# 219 "parser.mly"
                      ()
# 1262 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'write_statement) in
    Obj.repr(
# 220 "parser.mly"
                      ()
# 1269 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'read_statement) in
    Obj.repr(
# 221 "parser.mly"
                     ()
# 1276 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inc_statement) in
    Obj.repr(
# 222 "parser.mly"
                    ()
# 1283 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec_statement) in
    Obj.repr(
# 223 "parser.mly"
                    ()
# 1290 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "parser.mly"
            ()
# 1296 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 225 "parser.mly"
               ()
# 1302 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 226 "parser.mly"
      ()
# 1308 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 230 "parser.mly"
                      ()
# 1316 "parser.ml"
               : 'assignment_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 234 "parser.mly"
                                 ()
# 1324 "parser.ml"
               : 'procedure_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 238 "parser.mly"
                             ()
# 1331 "parser.ml"
               : 'compound_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'case_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 242 "parser.mly"
                                                      ()
# 1340 "parser.ml"
               : 'case_of_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_part) in
    Obj.repr(
# 243 "parser.mly"
                                       ()
# 1348 "parser.ml"
               : 'case_of_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_part) in
    Obj.repr(
# 248 "parser.mly"
                                                            ()
# 1357 "parser.ml"
               : 'case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 249 "parser.mly"
                                                  ()
# 1365 "parser.ml"
               : 'case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 253 "parser.mly"
              ()
# 1372 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 254 "parser.mly"
         ()
# 1379 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 258 "parser.mly"
             ()
# 1386 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 259 "parser.mly"
             ()
# 1393 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 260 "parser.mly"
             ()
# 1400 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 261 "parser.mly"
             ()
# 1407 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 262 "parser.mly"
             ()
# 1414 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'literal_or_enum) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum_list) in
    Obj.repr(
# 266 "parser.mly"
                                           ()
# 1422 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum) in
    Obj.repr(
# 267 "parser.mly"
                      ()
# 1429 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 271 "parser.mly"
                                   ()
# 1437 "parser.ml"
               : 'if_then_else_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 272 "parser.mly"
                                                  ()
# 1446 "parser.ml"
               : 'if_then_else_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 276 "parser.mly"
                                  ()
# 1454 "parser.ml"
               : 'while_do_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 280 "parser.mly"
                                                       ()
# 1464 "parser.ml"
               : 'for_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 281 "parser.mly"
                                                           ()
# 1474 "parser.ml"
               : 'for_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 285 "parser.mly"
                                        ()
# 1482 "parser.ml"
               : 'repeat_until_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 289 "parser.mly"
                          ()
# 1489 "parser.ml"
               : 'write_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 293 "parser.mly"
                         ()
# 1496 "parser.ml"
               : 'read_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 297 "parser.mly"
                   ()
# 1503 "parser.ml"
               : 'inc_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 301 "parser.mly"
                   ()
# 1510 "parser.ml"
               : 'dec_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 305 "parser.mly"
                                        ()
# 1518 "parser.ml"
               : 'raise_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'statement_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 309 "parser.mly"
                                                                     ()
# 1527 "parser.ml"
               : 'try_except_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'statement_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 310 "parser.mly"
                                                    ()
# 1535 "parser.ml"
               : 'try_except_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'statement_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'statement_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 311 "parser.mly"
                                                                                            ()
# 1545 "parser.ml"
               : 'try_except_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 315 "parser.mly"
              ()
# 1552 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 316 "parser.mly"
                    ()
# 1560 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 320 "parser.mly"
                       ()
# 1568 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 321 "parser.mly"
         ()
# 1575 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 325 "parser.mly"
                ()
# 1582 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 326 "parser.mly"
                                      ()
# 1590 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 332 "parser.mly"
                                 ()
# 1598 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 333 "parser.mly"
                                 ()
# 1606 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 334 "parser.mly"
                                  ()
# 1614 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 335 "parser.mly"
                                 ()
# 1622 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 336 "parser.mly"
                                 ()
# 1630 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 337 "parser.mly"
                                  ()
# 1638 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 338 "parser.mly"
                                  ()
# 1646 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 339 "parser.mly"
                                  ()
# 1654 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 340 "parser.mly"
                                  ()
# 1662 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 341 "parser.mly"
                                ()
# 1670 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 342 "parser.mly"
                                ()
# 1678 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 343 "parser.mly"
                                ()
# 1686 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 344 "parser.mly"
                                ()
# 1694 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 345 "parser.mly"
                     ()
# 1701 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 346 "parser.mly"
                        ()
# 1708 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 347 "parser.mly"
                        ()
# 1715 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 348 "parser.mly"
           ()
# 1721 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 349 "parser.mly"
            ()
# 1727 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 350 "parser.mly"
           ()
# 1733 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 351 "parser.mly"
              ()
# 1739 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 352 "parser.mly"
         ()
# 1746 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 353 "parser.mly"
          ()
# 1752 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 354 "parser.mly"
                           ()
# 1759 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 355 "parser.mly"
                                                  ()
# 1767 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 356 "parser.mly"
                                                  ()
# 1775 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 357 "parser.mly"
                   ()
# 1783 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 361 "parser.mly"
         ()
# 1790 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 362 "parser.mly"
                   ()
# 1798 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 366 "parser.mly"
               ()
# 1805 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 367 "parser.mly"
                                       ()
# 1813 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 368 "parser.mly"
      ()
# 1819 "parser.ml"
               : 'expression_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
