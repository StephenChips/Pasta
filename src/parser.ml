type token =
  | ICONST of (int)
  | RCONST of (float)
  | BCONST of (bool)
  | CCONST of (char)
  | SCONST of (string)
  | ID of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | ASG
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | GT
  | LT
  | EQUAL
  | NOTEQ
  | GTEQ
  | LTEQ
  | GETREF
  | DEREF
  | COLON
  | SCOLON
  | COMMA
  | DOT
  | RANGE
  | PROGRAM
  | FUNCTION
  | PROCEDURE
  | BEGIN
  | END
  | FOR
  | WHILE
  | REPEAT
  | INTEGER
  | THEN
  | UNTIL
  | IF
  | ELSE
  | INC
  | DEC
  | DO
  | REF
  | REAL
  | STRING
  | BOOLEAN
  | CHARACTER
  | ARRAY
  | TO
  | DOWNTO
  | VAR
  | TYPE
  | ENUMERATE
  | RECORD
  | WRITE
  | READ
  | CASE
  | OF
  | BREAK
  | CONTINUE
  | TRY
  | EXCEPT
  | NIL
  | AS
  | RAISE
  | EXCEPTION
  | FINALLY
  | FALSE
  | TRUE

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  263 (* ADD *);
  264 (* SUB *);
  265 (* MUL *);
  266 (* DIV *);
  267 (* MOD *);
  268 (* ASG *);
  269 (* LPAR *);
  270 (* RPAR *);
  271 (* LBRA *);
  272 (* RBRA *);
  273 (* GT *);
  274 (* LT *);
  275 (* EQUAL *);
  276 (* NOTEQ *);
  277 (* GTEQ *);
  278 (* LTEQ *);
  279 (* GETREF *);
  280 (* DEREF *);
  281 (* COLON *);
  282 (* SCOLON *);
  283 (* COMMA *);
  284 (* DOT *);
  285 (* RANGE *);
  286 (* PROGRAM *);
  287 (* FUNCTION *);
  288 (* PROCEDURE *);
  289 (* BEGIN *);
  290 (* END *);
  291 (* FOR *);
  292 (* WHILE *);
  293 (* REPEAT *);
  294 (* INTEGER *);
  295 (* THEN *);
  296 (* UNTIL *);
  297 (* IF *);
  298 (* ELSE *);
  299 (* INC *);
  300 (* DEC *);
  301 (* DO *);
  302 (* REF *);
  303 (* REAL *);
  304 (* STRING *);
  305 (* BOOLEAN *);
  306 (* CHARACTER *);
  307 (* ARRAY *);
  308 (* TO *);
  309 (* DOWNTO *);
  310 (* VAR *);
  311 (* TYPE *);
  312 (* ENUMERATE *);
  313 (* RECORD *);
  314 (* WRITE *);
  315 (* READ *);
  316 (* CASE *);
  317 (* OF *);
  318 (* BREAK *);
  319 (* CONTINUE *);
  320 (* TRY *);
  321 (* EXCEPT *);
  322 (* NIL *);
  323 (* AS *);
  324 (* RAISE *);
  325 (* EXCEPTION *);
  326 (* FINALLY *);
  327 (* FALSE *);
  328 (* TRUE *);
    0|]

let yytransl_block = [|
  257 (* ICONST *);
  258 (* RCONST *);
  259 (* BCONST *);
  260 (* CCONST *);
  261 (* SCONST *);
  262 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\005\000\005\000\005\000\005\000\002\000\
\010\000\010\000\010\000\010\000\010\000\011\000\011\000\012\000\
\012\000\012\000\012\000\013\000\013\000\013\000\014\000\015\000\
\015\000\016\000\016\000\006\000\017\000\017\000\018\000\018\000\
\019\000\020\000\020\000\007\000\008\000\024\000\024\000\023\000\
\023\000\023\000\023\000\025\000\025\000\026\000\026\000\009\000\
\027\000\027\000\028\000\028\000\028\000\028\000\028\000\029\000\
\029\000\029\000\033\000\033\000\035\000\034\000\034\000\037\000\
\030\000\031\000\031\000\032\000\038\000\038\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\041\000\041\000\045\000\
\045\000\042\000\042\000\046\000\046\000\047\000\047\000\048\000\
\048\000\048\000\048\000\048\000\036\000\036\000\043\000\043\000\
\021\000\021\000\004\000\049\000\049\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\050\000\
\050\000\044\000\044\000\044\000\000\000"

let yylen = "\002\000\
\004\000\003\000\002\000\001\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\006\000\003\000\
\001\000\003\000\000\000\002\000\003\000\002\000\001\000\001\000\
\004\000\005\000\005\000\009\000\011\000\001\000\000\000\003\000\
\001\000\001\000\000\000\003\000\001\000\003\000\001\000\002\000\
\005\000\004\000\001\000\001\000\001\000\001\000\001\000\004\000\
\003\000\003\000\003\000\001\000\003\000\008\000\007\000\002\000\
\003\000\001\000\003\000\002\000\001\000\001\000\006\000\007\000\
\005\000\003\000\004\000\003\000\008\000\008\000\004\000\007\000\
\005\000\009\000\005\000\002\000\002\000\002\000\002\000\001\000\
\001\000\000\000\004\000\006\000\004\000\008\000\008\000\007\000\
\005\000\004\000\007\000\005\000\009\000\005\000\004\000\005\000\
\004\000\001\000\003\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\001\000\001\000\003\000\
\003\000\001\000\003\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\004\000\004\000\003\000\001\000\
\003\000\001\000\003\000\000\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\157\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\005\000\006\000\007\000\
\008\000\000\000\000\000\122\000\028\000\000\000\031\000\032\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\088\000\089\000\000\000\000\000\124\000\069\000\070\000\000\000\
\001\000\002\000\045\000\047\000\000\000\000\000\000\000\000\000\
\029\000\000\000\000\000\009\000\010\000\011\000\013\000\012\000\
\000\000\121\000\020\000\000\000\000\000\000\000\000\000\000\000\
\022\000\051\000\021\000\000\000\052\000\053\000\054\000\055\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\000\
\000\000\000\000\000\000\000\000\000\000\000\000\145\000\144\000\
\147\000\143\000\142\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\000\085\000\000\000\108\000\000\000\
\000\000\000\000\000\000\123\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\000\000\000\000\000\000\000\000\000\
\000\000\140\000\141\000\139\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\125\000\000\000\044\000\
\000\000\046\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\065\000\112\000\113\000\114\000\116\000\115\000\111\000\
\000\000\000\000\110\000\000\000\058\000\000\000\057\000\000\000\
\067\000\049\000\000\000\000\000\000\000\000\000\107\000\000\000\
\000\000\000\000\000\000\151\000\148\000\000\000\000\000\135\000\
\136\000\137\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\000\093\000\000\000\138\000\000\000\000\000\091\000\000\000\
\155\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\109\000\000\000\000\000\
\000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\117\000\061\000\056\000\059\000\000\000\000\000\000\000\000\000\
\000\000\150\000\149\000\000\000\000\000\000\000\073\000\000\000\
\097\000\000\000\000\000\000\000\081\000\000\000\000\000\000\000\
\000\000\000\000\100\000\083\000\000\000\000\000\026\000\000\000\
\024\000\016\000\017\000\019\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\153\000\071\000\092\000\000\000\
\000\000\000\000\000\000\120\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\014\000\015\000\023\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\072\000\096\000\
\080\000\000\000\000\000\000\000\000\000\099\000\000\000\000\000\
\000\000\000\000\000\000\077\000\094\000\078\000\095\000\102\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\063\000\000\000\000\000\082\000\000\000\000\000\101\000\064\000\
\062\000\000\000\000\000"

let yydgoto = "\002\000\
\004\000\005\000\011\000\029\000\012\000\013\000\014\000\015\000\
\016\000\081\000\071\001\046\001\082\000\083\000\192\000\193\000\
\003\001\022\000\023\000\024\000\025\000\115\000\061\000\004\001\
\062\000\063\000\027\000\084\000\085\000\086\000\087\000\088\000\
\137\000\138\000\139\000\085\001\107\001\239\000\096\000\119\000\
\243\000\120\000\246\000\116\000\244\000\121\000\202\000\203\000\
\056\000\220\000"

let yysindex = "\012\000\
\255\254\000\000\099\255\000\000\005\255\095\255\124\255\126\255\
\127\255\136\255\111\255\121\255\000\000\000\000\000\000\000\000\
\000\000\153\255\173\255\000\000\000\000\165\255\000\000\000\000\
\131\255\199\255\000\000\015\003\164\255\005\255\127\255\127\255\
\127\255\195\255\014\255\209\255\244\002\222\255\027\003\229\255\
\018\255\015\003\018\255\018\255\018\255\018\255\018\255\018\255\
\000\000\000\000\015\003\239\255\000\000\000\000\000\000\190\255\
\000\000\000\000\000\000\000\000\233\255\210\255\225\255\234\255\
\000\000\113\255\238\255\000\000\000\000\000\000\000\000\000\000\
\248\255\000\000\000\000\113\255\003\000\127\255\017\255\127\255\
\000\000\000\000\000\000\251\255\000\000\000\000\000\000\000\000\
\018\255\027\000\018\255\027\003\018\255\018\255\027\003\000\000\
\232\255\031\000\204\255\018\255\018\255\018\255\000\000\000\000\
\000\000\000\000\000\000\018\255\061\255\002\000\005\000\226\000\
\050\002\050\002\249\000\000\000\000\000\014\001\000\000\021\255\
\022\255\055\000\015\003\000\000\053\000\127\255\127\255\054\000\
\000\000\093\000\018\255\000\000\101\000\016\255\119\000\019\255\
\234\254\070\000\081\000\077\000\136\255\050\002\103\000\031\001\
\051\001\074\001\027\003\000\000\018\255\018\255\018\255\111\000\
\092\001\000\000\000\000\000\000\018\255\018\255\018\255\018\255\
\018\255\018\255\018\255\018\255\018\255\018\255\018\255\015\003\
\018\255\018\255\018\255\018\255\015\003\018\255\119\000\127\255\
\027\003\074\003\127\255\074\003\018\255\000\000\113\255\000\000\
\225\255\000\000\069\255\127\255\000\000\050\002\089\000\113\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\105\000\119\000\000\000\113\255\000\000\098\000\000\000\127\255\
\000\000\000\000\018\255\027\003\027\003\119\000\000\000\191\255\
\120\000\122\000\108\000\000\000\000\000\023\255\023\255\000\000\
\000\000\000\000\196\255\196\255\196\255\196\255\196\255\196\255\
\000\000\000\000\023\255\000\000\050\002\050\002\000\000\099\000\
\000\000\115\000\226\255\242\255\008\255\100\000\252\255\137\000\
\018\255\074\003\018\255\018\255\074\003\000\000\109\000\015\000\
\132\000\129\000\000\000\111\255\165\000\106\000\101\000\176\255\
\000\000\000\000\000\000\000\000\220\255\128\000\147\000\018\255\
\018\255\000\000\000\000\111\000\015\003\015\003\000\000\027\003\
\000\000\074\003\168\000\027\003\000\000\163\000\109\001\142\001\
\167\001\074\003\000\000\000\000\127\255\151\000\000\000\146\255\
\000\000\000\000\000\000\000\000\000\000\117\000\018\255\018\255\
\027\003\027\003\184\001\200\001\000\000\000\000\000\000\153\000\
\154\000\149\000\152\000\000\000\252\254\018\255\074\003\015\003\
\119\000\083\255\111\255\000\000\000\000\000\000\000\000\127\255\
\216\001\002\002\015\003\015\003\119\000\119\000\000\000\000\000\
\000\000\027\003\210\000\143\000\164\000\000\000\074\003\162\000\
\018\000\027\003\027\003\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\018\255\018\255\074\003\074\003\030\000\000\000\
\000\000\127\255\156\000\000\000\018\002\034\002\000\000\000\000\
\000\000\074\003\074\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\000\000\000\158\000\178\000\178\000\
\094\255\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\157\000\000\000\000\000\000\000\245\255\245\255\000\000\
\000\000\000\000\059\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\179\000\184\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\173\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\157\000\000\000\000\000\059\255\000\000\
\000\000\000\000\074\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\131\000\040\002\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\255\000\000\000\000\000\000\
\000\000\000\000\123\255\000\000\174\000\055\002\000\000\000\000\
\000\000\000\000\120\255\000\000\000\000\188\000\189\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\115\002\
\000\000\000\000\000\000\000\000\115\002\232\002\000\000\000\000\
\035\000\000\000\000\000\000\000\188\000\000\000\000\000\000\000\
\190\000\000\000\000\000\175\000\000\000\031\255\000\000\000\000\
\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\115\002\169\000\000\000\000\000\000\000\
\000\000\000\000\142\000\000\000\000\000\095\002\155\002\000\000\
\000\000\000\000\080\003\135\003\190\003\245\003\044\004\099\004\
\000\000\000\000\215\002\000\000\144\002\006\000\000\000\072\000\
\000\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\115\002\187\000\000\000\176\000\
\000\000\000\000\000\000\163\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\175\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\115\002\187\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\115\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\115\002\115\002\028\000\033\000\000\000\000\000\
\000\000\035\000\000\000\072\000\000\000\000\000\000\000\000\000\
\000\000\115\002\115\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\193\001\006\255\000\000\000\000\000\000\000\000\
\000\000\223\255\000\000\000\000\201\255\000\000\207\000\000\000\
\007\000\000\000\230\255\243\255\203\255\010\000\192\001\201\000\
\000\000\099\001\085\001\000\000\000\000\000\000\000\000\000\000\
\184\255\102\001\000\000\130\255\000\000\235\255\231\255\228\255\
\000\000\218\255\061\001\213\255\038\255\091\255\000\000\000\000\
\000\000\221\000"

let yytablesize = 1449
let yytable = "\055\000\
\097\000\073\000\054\000\117\000\059\000\059\000\053\000\140\000\
\201\000\038\001\129\000\205\000\001\000\111\000\000\001\021\000\
\110\000\060\000\060\000\067\000\132\000\147\000\020\000\099\000\
\134\000\136\000\136\000\027\000\003\000\081\001\100\000\159\000\
\160\000\161\000\036\000\007\000\008\000\135\000\027\000\065\000\
\101\000\102\000\036\000\204\000\034\000\036\000\147\000\178\000\
\242\000\194\000\109\000\068\000\112\000\113\000\114\000\103\000\
\034\000\118\000\009\000\010\000\069\000\070\000\071\000\072\000\
\104\000\082\001\110\000\157\000\158\000\159\000\160\000\161\000\
\088\001\187\000\027\001\009\001\135\000\162\000\163\000\164\000\
\165\000\166\000\167\000\105\000\090\000\176\000\179\000\015\001\
\106\000\107\000\177\000\180\000\108\000\035\000\055\000\036\000\
\170\000\054\000\142\000\184\000\144\000\182\000\145\000\146\000\
\006\000\168\000\217\000\218\000\178\000\153\000\154\000\155\000\
\060\000\186\000\096\001\097\001\086\001\156\000\075\000\030\000\
\017\000\215\000\245\000\090\000\066\001\245\000\030\000\002\001\
\090\000\018\000\241\000\019\000\020\000\169\000\170\000\012\001\
\034\000\001\001\247\000\234\000\190\000\026\000\233\000\028\000\
\055\000\090\000\030\000\240\000\010\001\254\000\068\000\069\001\
\087\001\090\000\136\000\035\000\060\000\036\000\216\000\069\000\
\070\000\071\000\072\000\077\000\060\000\031\000\222\000\223\000\
\224\000\225\000\226\000\227\000\228\000\229\000\230\000\231\000\
\232\000\103\001\235\000\236\000\237\000\238\000\060\000\068\000\
\090\000\032\000\233\000\014\001\090\000\090\000\033\000\057\000\
\069\000\070\000\071\000\072\000\090\000\157\000\158\000\159\000\
\160\000\161\000\157\000\158\000\159\000\160\000\161\000\162\000\
\163\000\164\000\165\000\166\000\167\000\042\001\074\000\123\000\
\150\000\037\000\151\000\066\000\013\001\111\000\043\001\124\000\
\044\001\045\001\157\000\158\000\159\000\160\000\161\000\152\000\
\090\000\089\000\098\000\126\000\162\000\163\000\164\000\165\000\
\166\000\167\000\016\001\017\001\122\000\061\001\125\000\128\000\
\055\001\057\001\127\000\054\001\056\001\059\001\058\001\089\001\
\130\000\147\000\031\001\023\001\032\001\033\001\070\001\169\000\
\170\000\148\000\131\000\024\001\169\000\170\000\156\000\047\001\
\048\001\133\000\136\000\025\001\141\000\147\000\156\000\054\001\
\056\001\051\001\052\001\026\001\156\000\029\001\156\000\098\000\
\143\000\112\001\234\000\055\000\169\000\170\000\084\001\098\000\
\178\000\171\000\149\000\098\001\172\000\098\000\093\001\095\001\
\035\001\092\001\094\001\105\001\136\000\156\000\147\000\178\000\
\073\001\074\001\156\000\106\001\090\000\103\000\108\001\111\001\
\092\001\094\001\105\000\181\000\090\000\103\000\098\000\083\001\
\055\001\057\001\105\000\098\000\154\000\183\000\154\000\188\000\
\146\000\146\000\146\000\146\000\146\000\093\001\095\001\146\000\
\154\000\146\000\146\000\146\000\146\000\146\000\146\000\146\000\
\154\000\069\000\189\000\146\000\146\000\191\000\154\000\207\000\
\154\000\069\000\208\000\146\000\109\001\110\001\209\000\069\000\
\146\000\146\000\211\000\146\000\219\000\005\001\146\000\195\000\
\196\000\197\000\198\000\199\000\200\000\146\000\146\000\154\000\
\006\001\008\001\007\001\011\001\154\000\018\001\146\000\020\001\
\069\000\019\001\146\000\022\001\021\001\069\000\030\001\146\000\
\028\001\036\001\146\000\146\000\152\000\152\000\152\000\152\000\
\152\000\034\001\037\001\152\000\087\000\152\000\152\000\152\000\
\152\000\152\000\152\000\152\000\087\000\039\001\040\001\152\000\
\152\000\049\001\087\000\050\001\087\000\060\001\062\001\152\000\
\068\001\072\001\077\001\078\001\152\000\152\000\079\001\152\000\
\101\001\080\001\152\000\104\001\102\001\113\001\003\000\043\000\
\041\000\152\000\152\000\087\000\090\000\042\000\066\000\050\000\
\087\000\156\000\152\000\040\000\156\000\118\000\152\000\039\000\
\025\000\090\000\090\000\152\000\090\000\041\001\152\000\152\000\
\157\000\158\000\159\000\160\000\161\000\119\000\058\000\064\000\
\185\000\210\000\162\000\163\000\164\000\165\000\166\000\167\000\
\157\000\158\000\159\000\160\000\161\000\067\001\206\000\255\000\
\053\001\000\000\162\000\163\000\164\000\165\000\166\000\167\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\157\000\
\158\000\159\000\160\000\161\000\000\000\099\001\100\001\000\000\
\173\000\162\000\163\000\164\000\165\000\166\000\167\000\000\000\
\000\000\000\000\000\000\174\000\157\000\158\000\159\000\160\000\
\161\000\000\000\169\000\170\000\000\000\000\000\162\000\163\000\
\164\000\165\000\166\000\167\000\000\000\157\000\158\000\159\000\
\160\000\161\000\169\000\170\000\000\000\000\000\000\000\162\000\
\163\000\164\000\165\000\166\000\167\000\000\000\000\000\000\000\
\000\000\157\000\158\000\159\000\160\000\161\000\000\000\000\000\
\000\000\169\000\170\000\162\000\163\000\164\000\165\000\166\000\
\167\000\000\000\175\000\212\000\000\000\000\000\000\000\000\000\
\157\000\158\000\159\000\160\000\161\000\000\000\169\000\170\000\
\000\000\213\000\162\000\163\000\164\000\165\000\166\000\167\000\
\000\000\000\000\157\000\158\000\159\000\160\000\161\000\169\000\
\170\000\221\000\000\000\000\000\162\000\163\000\164\000\165\000\
\166\000\167\000\000\000\157\000\158\000\159\000\160\000\161\000\
\000\000\000\000\000\000\169\000\170\000\162\000\163\000\164\000\
\165\000\166\000\167\000\000\000\000\000\000\000\214\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\169\000\170\000\157\000\158\000\159\000\160\000\
\161\000\063\001\000\000\000\000\000\000\000\000\162\000\163\000\
\164\000\165\000\166\000\167\000\169\000\170\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\157\000\158\000\159\000\
\160\000\161\000\000\000\000\000\064\001\169\000\170\000\162\000\
\163\000\164\000\165\000\166\000\167\000\000\000\157\000\158\000\
\159\000\160\000\161\000\000\000\000\000\000\000\000\000\000\000\
\162\000\163\000\164\000\165\000\166\000\167\000\157\000\158\000\
\159\000\160\000\161\000\000\000\000\000\000\000\169\000\170\000\
\162\000\163\000\164\000\165\000\166\000\167\000\157\000\158\000\
\159\000\160\000\161\000\065\001\075\001\000\000\000\000\000\000\
\162\000\163\000\164\000\165\000\166\000\167\000\000\000\169\000\
\170\000\000\000\000\000\000\000\076\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\169\000\170\000\000\000\000\000\090\001\000\000\000\000\000\000\
\157\000\158\000\159\000\160\000\161\000\000\000\000\000\000\000\
\169\000\170\000\162\000\163\000\164\000\165\000\166\000\167\000\
\157\000\158\000\159\000\160\000\161\000\000\000\000\000\000\000\
\169\000\170\000\162\000\163\000\164\000\165\000\166\000\167\000\
\157\000\158\000\159\000\160\000\161\000\000\000\091\001\000\000\
\000\000\000\000\162\000\163\000\164\000\165\000\166\000\167\000\
\157\000\158\000\159\000\160\000\161\000\000\000\114\001\000\000\
\000\000\086\000\162\000\163\000\164\000\165\000\166\000\167\000\
\000\000\086\000\169\000\170\000\000\000\000\000\115\001\086\000\
\074\000\086\000\000\000\000\000\000\000\000\000\000\000\000\000\
\074\000\000\000\169\000\170\000\000\000\000\000\074\000\000\000\
\074\000\000\000\000\000\000\000\000\000\132\000\132\000\000\000\
\086\000\000\000\169\000\170\000\132\000\086\000\132\000\132\000\
\132\000\132\000\132\000\132\000\132\000\000\000\000\000\074\000\
\132\000\132\000\169\000\170\000\074\000\000\000\000\000\000\000\
\132\000\000\000\000\000\000\000\000\000\132\000\132\000\000\000\
\132\000\000\000\000\000\132\000\090\000\000\000\000\000\000\000\
\000\000\000\000\132\000\132\000\090\000\000\000\000\000\000\000\
\000\000\000\000\090\000\132\000\090\000\000\000\000\000\132\000\
\000\000\133\000\133\000\000\000\132\000\000\000\000\000\132\000\
\133\000\079\000\133\000\133\000\133\000\133\000\133\000\133\000\
\133\000\079\000\000\000\090\000\133\000\133\000\000\000\079\000\
\090\000\079\000\000\000\000\000\133\000\000\000\000\000\000\000\
\000\000\133\000\133\000\000\000\133\000\000\000\000\000\133\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\133\000\
\079\000\000\000\000\000\000\000\000\000\079\000\000\000\133\000\
\000\000\000\000\000\000\133\000\000\000\134\000\134\000\000\000\
\133\000\000\000\000\000\133\000\134\000\000\000\134\000\134\000\
\134\000\134\000\134\000\134\000\134\000\000\000\000\000\000\000\
\134\000\134\000\000\000\000\000\000\000\156\000\000\000\156\000\
\134\000\075\000\000\000\000\000\000\000\134\000\134\000\000\000\
\134\000\156\000\000\000\134\000\000\000\000\000\000\000\000\000\
\000\000\156\000\134\000\134\000\000\000\000\000\000\000\156\000\
\000\000\156\000\000\000\134\000\038\000\000\000\000\000\134\000\
\000\000\068\000\000\000\000\000\134\000\000\000\000\000\134\000\
\038\000\076\000\069\000\070\000\071\000\072\000\077\000\000\000\
\156\000\000\000\000\000\078\000\079\000\156\000\000\000\039\000\
\000\000\040\000\041\000\042\000\000\000\000\000\000\000\043\000\
\080\000\044\000\045\000\039\000\000\000\090\000\091\000\092\000\
\000\000\000\000\000\000\093\000\000\000\044\000\045\000\000\000\
\046\000\047\000\048\000\000\000\049\000\050\000\051\000\000\000\
\000\000\000\000\052\000\000\000\046\000\047\000\094\000\000\000\
\049\000\050\000\095\000\000\000\000\000\126\000\052\000\126\000\
\126\000\126\000\126\000\126\000\126\000\126\000\000\000\000\000\
\000\000\126\000\126\000\000\000\248\000\249\000\250\000\000\000\
\000\000\126\000\251\000\000\000\000\000\000\000\126\000\126\000\
\000\000\126\000\000\000\000\000\126\000\000\000\000\000\000\000\
\000\000\000\000\000\000\126\000\126\000\252\000\000\000\000\000\
\000\000\253\000\000\000\000\000\126\000\000\000\000\000\000\000\
\126\000\000\000\000\000\000\000\127\000\126\000\127\000\127\000\
\127\000\127\000\127\000\127\000\127\000\000\000\000\000\000\000\
\127\000\127\000\000\000\000\000\000\000\000\000\000\000\000\000\
\127\000\000\000\000\000\000\000\000\000\127\000\127\000\000\000\
\127\000\000\000\000\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\000\127\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\000\000\000\000\000\000\000\127\000\
\000\000\000\000\000\000\128\000\127\000\128\000\128\000\128\000\
\128\000\128\000\128\000\128\000\000\000\000\000\000\000\128\000\
\128\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\
\000\000\000\000\000\000\000\000\128\000\128\000\000\000\128\000\
\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\
\000\000\128\000\128\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\128\000\000\000\000\000\000\000\128\000\000\000\
\000\000\000\000\131\000\128\000\131\000\131\000\131\000\131\000\
\131\000\131\000\131\000\000\000\000\000\000\000\131\000\131\000\
\000\000\000\000\000\000\000\000\000\000\000\000\131\000\000\000\
\000\000\000\000\000\000\131\000\131\000\000\000\131\000\000\000\
\000\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\131\000\131\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\131\000\000\000\000\000\000\000\131\000\000\000\000\000\
\000\000\129\000\131\000\129\000\129\000\129\000\129\000\129\000\
\129\000\129\000\000\000\000\000\000\000\129\000\129\000\000\000\
\000\000\000\000\000\000\000\000\000\000\129\000\000\000\000\000\
\000\000\000\000\129\000\129\000\000\000\129\000\000\000\000\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\129\000\000\000\000\000\000\000\129\000\000\000\000\000\000\000\
\130\000\129\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\000\000\000\000\000\000\130\000\130\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\000\
\000\000\130\000\130\000\000\000\130\000\000\000\000\000\130\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\000\130\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\
\000\000\000\000\000\000\130\000\000\000\000\000\000\000\000\000\
\130\000"

let yycheck = "\028\000\
\039\000\035\000\028\000\047\000\031\000\032\000\028\000\080\000\
\135\000\004\001\066\000\034\001\001\000\042\000\180\000\009\000\
\042\000\031\000\032\000\006\001\076\000\026\001\006\001\006\001\
\078\000\079\000\080\000\016\001\030\001\034\001\013\001\009\001\
\010\001\011\001\027\001\031\001\032\001\060\001\027\001\033\000\
\023\001\024\001\027\001\025\001\014\001\027\001\026\001\026\001\
\175\000\034\001\041\000\038\001\043\000\044\000\045\000\038\001\
\026\001\048\000\054\001\055\001\047\001\048\001\049\001\050\001\
\047\001\070\001\092\000\007\001\008\001\009\001\010\001\011\001\
\067\001\127\000\067\001\202\000\060\001\017\001\018\001\019\001\
\020\001\021\001\022\001\066\001\026\001\065\001\065\001\214\000\
\071\001\072\001\070\001\070\001\075\001\025\001\123\000\027\001\
\074\001\123\000\089\000\126\000\091\000\123\000\093\000\094\000\
\006\001\045\001\150\000\151\000\026\001\100\000\101\000\102\000\
\126\000\127\000\077\001\078\001\034\001\108\000\006\001\026\001\
\026\001\147\000\176\000\065\001\034\001\179\000\033\001\183\000\
\070\001\006\001\174\000\006\001\006\001\073\001\074\001\208\000\
\006\001\181\000\177\000\168\000\131\000\006\001\168\000\033\001\
\173\000\026\001\026\001\173\000\204\000\178\000\038\001\006\001\
\070\001\034\001\208\000\025\001\034\001\027\001\149\000\047\001\
\048\001\049\001\050\001\051\001\042\001\013\001\157\000\158\000\
\159\000\160\000\161\000\162\000\163\000\164\000\165\000\166\000\
\167\000\087\001\169\000\170\000\171\000\172\000\060\001\038\001\
\065\001\013\001\212\000\213\000\026\001\070\001\026\001\028\001\
\047\001\048\001\049\001\050\001\034\001\007\001\008\001\009\001\
\010\001\011\001\007\001\008\001\009\001\010\001\011\001\017\001\
\018\001\019\001\020\001\021\001\022\001\038\001\006\001\026\001\
\013\001\019\001\015\001\025\001\211\000\250\000\047\001\034\001\
\049\001\050\001\007\001\008\001\009\001\010\001\011\001\028\001\
\070\001\012\001\006\001\026\001\017\001\018\001\019\001\020\001\
\021\001\022\001\052\001\053\001\006\001\028\001\014\001\014\001\
\021\001\022\001\026\001\021\001\022\001\026\001\024\001\072\001\
\019\001\026\001\249\000\034\001\251\000\252\000\040\001\073\001\
\074\001\034\001\019\001\042\001\073\001\074\001\026\001\052\001\
\053\001\015\001\072\001\034\001\026\001\026\001\034\001\049\001\
\050\001\016\001\017\001\042\001\040\001\034\001\042\001\026\001\
\006\001\106\001\063\001\064\001\073\001\074\001\064\001\034\001\
\026\001\040\001\012\001\082\001\040\001\040\001\075\001\076\001\
\034\001\075\001\076\001\034\001\106\001\065\001\026\001\026\001\
\047\001\048\001\070\001\042\001\026\001\034\001\034\001\034\001\
\090\001\091\001\034\001\013\001\034\001\042\001\065\001\062\001\
\101\001\102\001\042\001\070\001\014\001\025\001\016\001\026\001\
\007\001\008\001\009\001\010\001\011\001\114\001\115\001\014\001\
\026\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\034\001\026\001\006\001\026\001\027\001\001\001\040\001\034\001\
\042\001\034\001\026\001\034\001\099\001\100\001\034\001\040\001\
\039\001\040\001\012\001\042\001\006\001\029\001\045\001\001\001\
\002\001\003\001\004\001\005\001\006\001\052\001\053\001\065\001\
\016\001\025\001\027\001\034\001\070\001\014\001\061\001\028\001\
\065\001\016\001\065\001\025\001\042\001\070\001\006\001\070\001\
\045\001\014\001\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\045\001\026\001\014\001\026\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\001\001\061\001\026\001\
\027\001\042\001\040\001\025\001\042\001\006\001\012\001\034\001\
\026\001\061\001\026\001\026\001\039\001\040\001\034\001\042\001\
\042\001\034\001\045\001\026\001\025\001\034\001\033\001\014\001\
\014\001\052\001\053\001\065\001\040\001\014\001\026\001\026\001\
\070\001\014\001\061\001\014\001\016\001\025\001\065\001\033\001\
\016\001\034\001\042\001\070\001\026\001\007\001\073\001\074\001\
\007\001\008\001\009\001\010\001\011\001\045\001\030\000\032\000\
\126\000\141\000\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\037\001\137\000\179\000\
\020\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\052\001\053\001\255\255\
\039\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\027\001\007\001\008\001\009\001\010\001\
\011\001\255\255\073\001\074\001\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\007\001\008\001\009\001\
\010\001\011\001\073\001\074\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\073\001\074\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\061\001\045\001\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\073\001\074\001\
\255\255\039\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\073\001\
\074\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\073\001\074\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\255\255\061\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\045\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\039\001\073\001\074\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\073\001\074\001\
\017\001\018\001\019\001\020\001\021\001\022\001\007\001\008\001\
\009\001\010\001\011\001\061\001\045\001\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\073\001\
\074\001\255\255\255\255\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\074\001\255\255\255\255\045\001\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\073\001\074\001\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\073\001\074\001\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\255\255\045\001\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\255\255\045\001\255\255\
\255\255\026\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\034\001\073\001\074\001\255\255\255\255\045\001\040\001\
\026\001\042\001\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\073\001\074\001\255\255\255\255\040\001\255\255\
\042\001\255\255\255\255\255\255\255\255\007\001\008\001\255\255\
\065\001\255\255\073\001\074\001\014\001\070\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\065\001\
\026\001\027\001\073\001\074\001\070\001\255\255\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\255\255\255\255\045\001\026\001\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\034\001\255\255\255\255\255\255\
\255\255\255\255\040\001\061\001\042\001\255\255\255\255\065\001\
\255\255\007\001\008\001\255\255\070\001\255\255\255\255\073\001\
\014\001\026\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\034\001\255\255\065\001\026\001\027\001\255\255\040\001\
\070\001\042\001\255\255\255\255\034\001\255\255\255\255\255\255\
\255\255\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\065\001\255\255\255\255\255\255\255\255\070\001\255\255\061\001\
\255\255\255\255\255\255\065\001\255\255\007\001\008\001\255\255\
\070\001\255\255\255\255\073\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\014\001\255\255\016\001\
\034\001\006\001\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\026\001\255\255\045\001\255\255\255\255\255\255\255\255\
\255\255\034\001\052\001\053\001\255\255\255\255\255\255\040\001\
\255\255\042\001\255\255\061\001\006\001\255\255\255\255\065\001\
\255\255\038\001\255\255\255\255\070\001\255\255\255\255\073\001\
\006\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\065\001\255\255\255\255\056\001\057\001\070\001\255\255\033\001\
\255\255\035\001\036\001\037\001\255\255\255\255\255\255\041\001\
\069\001\043\001\044\001\033\001\255\255\035\001\036\001\037\001\
\255\255\255\255\255\255\041\001\255\255\043\001\044\001\255\255\
\058\001\059\001\060\001\255\255\062\001\063\001\064\001\255\255\
\255\255\255\255\068\001\255\255\058\001\059\001\060\001\255\255\
\062\001\063\001\064\001\255\255\255\255\014\001\068\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\035\001\036\001\037\001\255\255\
\255\255\034\001\041\001\255\255\255\255\255\255\039\001\040\001\
\255\255\042\001\255\255\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\053\001\060\001\255\255\255\255\
\255\255\064\001\255\255\255\255\061\001\255\255\255\255\255\255\
\065\001\255\255\255\255\255\255\014\001\070\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\255\255\255\255\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\255\255\255\255\255\255\065\001\
\255\255\255\255\255\255\014\001\070\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\065\001\255\255\
\255\255\255\255\014\001\070\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\255\255\
\255\255\255\255\255\255\039\001\040\001\255\255\042\001\255\255\
\255\255\045\001\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\053\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\255\255\065\001\255\255\255\255\
\255\255\014\001\070\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\039\001\040\001\255\255\042\001\255\255\255\255\
\045\001\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\053\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\061\001\255\255\255\255\255\255\065\001\255\255\255\255\255\255\
\014\001\070\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\255\255\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\255\255\065\001\255\255\255\255\255\255\255\255\
\070\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  MOD\000\
  ASG\000\
  LPAR\000\
  RPAR\000\
  LBRA\000\
  RBRA\000\
  GT\000\
  LT\000\
  EQUAL\000\
  NOTEQ\000\
  GTEQ\000\
  LTEQ\000\
  GETREF\000\
  DEREF\000\
  COLON\000\
  SCOLON\000\
  COMMA\000\
  DOT\000\
  RANGE\000\
  PROGRAM\000\
  FUNCTION\000\
  PROCEDURE\000\
  BEGIN\000\
  END\000\
  FOR\000\
  WHILE\000\
  REPEAT\000\
  INTEGER\000\
  THEN\000\
  UNTIL\000\
  IF\000\
  ELSE\000\
  INC\000\
  DEC\000\
  DO\000\
  REF\000\
  REAL\000\
  STRING\000\
  BOOLEAN\000\
  CHARACTER\000\
  ARRAY\000\
  TO\000\
  DOWNTO\000\
  VAR\000\
  TYPE\000\
  ENUMERATE\000\
  RECORD\000\
  WRITE\000\
  READ\000\
  CASE\000\
  OF\000\
  BREAK\000\
  CONTINUE\000\
  TRY\000\
  EXCEPT\000\
  NIL\000\
  AS\000\
  RAISE\000\
  EXCEPTION\000\
  FINALLY\000\
  FALSE\000\
  TRUE\000\
  "

let yynames_block = "\
  ICONST\000\
  RCONST\000\
  BCONST\000\
  CCONST\000\
  SCONST\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'program_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 36 "parser.mly"
                                                                       ( print_endline "Parse Successfully.";; )
# 821 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'global_declaration_list) in
    Obj.repr(
# 40 "parser.mly"
                                                        ()
# 829 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global_declaration) in
    Obj.repr(
# 41 "parser.mly"
                                ()
# 836 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 45 "parser.mly"
                           ()
# 843 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_definition) in
    Obj.repr(
# 46 "parser.mly"
                           ()
# 850 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 47 "parser.mly"
                          ()
# 857 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition) in
    Obj.repr(
# 48 "parser.mly"
                      ()
# 864 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 52 "parser.mly"
                      ()
# 871 "parser.ml"
               : 'program_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
              ()
# 877 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
             ()
# 883 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
             ()
# 889 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                ()
# 895 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
              ()
# 901 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
         ()
# 908 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 67 "parser.mly"
                  ()
# 915 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
              ()
# 921 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
           ()
# 927 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                ()
# 933 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
              ()
# 939 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
         ()
# 946 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 79 "parser.mly"
                 ()
# 953 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 80 "parser.mly"
                  ()
# 960 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'range_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'any_named_type) in
    Obj.repr(
# 83 "parser.mly"
                                                 ()
# 968 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range_list) in
    Obj.repr(
# 87 "parser.mly"
                             ()
# 976 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range) in
    Obj.repr(
# 88 "parser.mly"
            ()
# 983 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 92 "parser.mly"
                          ()
# 991 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
      ()
# 997 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 97 "parser.mly"
                            ()
# 1004 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declr_or_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 101 "parser.mly"
                                               ()
# 1012 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declr_or_init) in
    Obj.repr(
# 102 "parser.mly"
                           ()
# 1019 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 106 "parser.mly"
                ()
# 1026 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 107 "parser.mly"
               ()
# 1033 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 111 "parser.mly"
                              ()
# 1042 "parser.ml"
               : 'var_declr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'simple_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 119 "parser.mly"
                                                  ()
# 1051 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parser.mly"
                                ()
# 1060 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 124 "parser.mly"
                                                                                            ()
# 1070 "parser.ml"
               : 'procedure_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'any_type) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 128 "parser.mly"
                                                                                                          ()
# 1081 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 132 "parser.mly"
                          ()
# 1088 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
      ()
# 1094 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 137 "parser.mly"
                                          ()
# 1102 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr_list) in
    Obj.repr(
# 138 "parser.mly"
                     ()
# 1109 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 139 "parser.mly"
                    ()
# 1116 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "parser.mly"
                       ()
# 1122 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 144 "parser.mly"
                                        ()
# 1130 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 145 "parser.mly"
                 ()
# 1137 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_init_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 149 "parser.mly"
                                    ()
# 1145 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 150 "parser.mly"
               ()
# 1152 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 154 "parser.mly"
                              ()
# 1159 "parser.ml"
               : 'type_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 158 "parser.mly"
                                                     ()
# 1168 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_body) in
    Obj.repr(
# 159 "parser.mly"
                                ()
# 1176 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 163 "parser.mly"
               ()
# 1183 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record_body) in
    Obj.repr(
# 164 "parser.mly"
                  ()
# 1190 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumerate_body) in
    Obj.repr(
# 165 "parser.mly"
                     ()
# 1197 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exception_body) in
    Obj.repr(
# 166 "parser.mly"
                     ()
# 1204 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference_body) in
    Obj.repr(
# 167 "parser.mly"
                     ()
# 1211 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 171 "parser.mly"
                                               ()
# 1219 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 172 "parser.mly"
                              ()
# 1226 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 173 "parser.mly"
                                  ()
# 1233 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 177 "parser.mly"
                                          ()
# 1241 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field) in
    Obj.repr(
# 178 "parser.mly"
                  ()
# 1248 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 182 "parser.mly"
                           ()
# 1256 "parser.ml"
               : 'fixed_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'variant_else_part) in
    Obj.repr(
# 186 "parser.mly"
                                                                                             ()
# 1266 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 187 "parser.mly"
                                                                           ()
# 1275 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 191 "parser.mly"
                           ()
# 1282 "parser.ml"
               : 'variant_else_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 195 "parser.mly"
                          ()
# 1289 "parser.ml"
               : 'enumerate_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
                ()
# 1295 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 200 "parser.mly"
                                     ()
# 1302 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 203 "parser.mly"
                             ()
# 1309 "parser.ml"
               : 'reference_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 208 "parser.mly"
             ()
# 1316 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 209 "parser.mly"
             ()
# 1323 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 214 "parser.mly"
                                            ()
# 1332 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'case_part_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_m) in
    Obj.repr(
# 215 "parser.mly"
                                                     ()
# 1341 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_part_m) in
    Obj.repr(
# 216 "parser.mly"
                                         ()
# 1349 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 217 "parser.mly"
                        ()
# 1357 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 218 "parser.mly"
                                 ()
# 1365 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_m_list) in
    Obj.repr(
# 219 "parser.mly"
                            ()
# 1372 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 220 "parser.mly"
                                                    ()
# 1382 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 221 "parser.mly"
                                                        ()
# 1392 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 222 "parser.mly"
                                     ()
# 1400 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_m_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_m_list) in
    Obj.repr(
# 223 "parser.mly"
                                                               ()
# 1409 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_m_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_m_list) in
    Obj.repr(
# 224 "parser.mly"
                                              ()
# 1417 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'stmt_m_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_m_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_m_list) in
    Obj.repr(
# 225 "parser.mly"
                                                                                   ()
# 1427 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 226 "parser.mly"
                                          ()
# 1435 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 227 "parser.mly"
                            ()
# 1442 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 228 "parser.mly"
                           ()
# 1449 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 229 "parser.mly"
                     ()
# 1456 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 230 "parser.mly"
                     ()
# 1463 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "parser.mly"
            ()
# 1469 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
               ()
# 1475 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "parser.mly"
                            ()
# 1481 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 237 "parser.mly"
                                   ()
# 1489 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 238 "parser.mly"
                                            ()
# 1498 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 239 "parser.mly"
                                 ()
# 1506 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 240 "parser.mly"
                                                    ()
# 1516 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 241 "parser.mly"
                                                        ()
# 1526 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'case_part_u) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u) in
    Obj.repr(
# 242 "parser.mly"
                                                     ()
# 1535 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_part_u) in
    Obj.repr(
# 243 "parser.mly"
                                         ()
# 1543 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 244 "parser.mly"
                                     ()
# 1551 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_u_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u_list) in
    Obj.repr(
# 245 "parser.mly"
                                                               ()
# 1560 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_u_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u_list) in
    Obj.repr(
# 246 "parser.mly"
                                              ()
# 1568 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'stmt_u_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_u_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u_list) in
    Obj.repr(
# 247 "parser.mly"
                                                                                   ()
# 1578 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_part_u) in
    Obj.repr(
# 252 "parser.mly"
                                                           ()
# 1587 "parser.ml"
               : 'case_part_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_m) in
    Obj.repr(
# 253 "parser.mly"
                                               ()
# 1595 "parser.ml"
               : 'case_part_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_part_u) in
    Obj.repr(
# 257 "parser.mly"
                                                           ()
# 1604 "parser.ml"
               : 'case_part_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u) in
    Obj.repr(
# 258 "parser.mly"
                                               ()
# 1612 "parser.ml"
               : 'case_part_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 262 "parser.mly"
             ()
# 1619 "parser.ml"
               : 'stmt_m_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 263 "parser.mly"
                                ()
# 1627 "parser.ml"
               : 'stmt_m_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 267 "parser.mly"
             ()
# 1634 "parser.ml"
               : 'stmt_u_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 268 "parser.mly"
                                ()
# 1642 "parser.ml"
               : 'stmt_u_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 272 "parser.mly"
              ()
# 1649 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 273 "parser.mly"
         ()
# 1656 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 277 "parser.mly"
             ()
# 1663 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 278 "parser.mly"
             ()
# 1670 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 279 "parser.mly"
             ()
# 1677 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 280 "parser.mly"
             ()
# 1684 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 281 "parser.mly"
             ()
# 1691 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'literal_or_enum) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum_list) in
    Obj.repr(
# 285 "parser.mly"
                                           ()
# 1699 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum) in
    Obj.repr(
# 286 "parser.mly"
                      ()
# 1706 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 290 "parser.mly"
              ()
# 1713 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 291 "parser.mly"
                    ()
# 1721 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 295 "parser.mly"
                       ()
# 1729 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 296 "parser.mly"
         ()
# 1736 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 299 "parser.mly"
                                             ()
# 1743 "parser.ml"
               : 'compound_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 302 "parser.mly"
                ()
# 1750 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 303 "parser.mly"
                                      ()
# 1758 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 309 "parser.mly"
                                 ()
# 1766 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 310 "parser.mly"
                                 ()
# 1774 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 311 "parser.mly"
                                  ()
# 1782 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 312 "parser.mly"
                                 ()
# 1790 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 313 "parser.mly"
                                 ()
# 1798 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 314 "parser.mly"
                                  ()
# 1806 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 315 "parser.mly"
                                  ()
# 1814 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 316 "parser.mly"
                                  ()
# 1822 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 317 "parser.mly"
                                  ()
# 1830 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 318 "parser.mly"
                                ()
# 1838 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 319 "parser.mly"
                                ()
# 1846 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 320 "parser.mly"
                                ()
# 1854 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 321 "parser.mly"
                                ()
# 1862 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 322 "parser.mly"
                     ()
# 1869 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 323 "parser.mly"
                        ()
# 1876 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 324 "parser.mly"
                        ()
# 1883 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 325 "parser.mly"
           ()
# 1889 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 326 "parser.mly"
            ()
# 1895 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 327 "parser.mly"
           ()
# 1901 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 328 "parser.mly"
              ()
# 1907 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 329 "parser.mly"
         ()
# 1914 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 330 "parser.mly"
          ()
# 1920 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 331 "parser.mly"
                           ()
# 1927 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 332 "parser.mly"
                                                  ()
# 1935 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 333 "parser.mly"
                                                  ()
# 1943 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 334 "parser.mly"
                   ()
# 1951 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 338 "parser.mly"
         ()
# 1958 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 339 "parser.mly"
                   ()
# 1966 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 343 "parser.mly"
               ()
# 1973 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 344 "parser.mly"
                                       ()
# 1981 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 345 "parser.mly"
      ()
# 1987 "parser.ml"
               : 'expression_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
