type token =
  | ICONST of (int)
  | RCONST of (float)
  | BCONST of (bool)
  | CCONST of (char)
  | SCONST of (string)
  | ID of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | ASG
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | GT
  | LT
  | EQUAL
  | NOTEQ
  | GTEQ
  | LTEQ
  | GETREF
  | DEREF
  | COLON
  | SCOLON
  | COMMA
  | DOT
  | RANGE
  | PROGRAM
  | FUNCTION
  | PROCEDURE
  | BEGIN
  | END
  | FOR
  | WHILE
  | REPEAT
  | INTEGER
  | THEN
  | UNTIL
  | IF
  | ELSE
  | INC
  | DEC
  | DO
  | REF
  | REAL
  | STRING
  | BOOLEAN
  | CHARACTER
  | ARRAY
  | TO
  | DOWNTO
  | VAR
  | TYPE
  | ENUMERATE
  | RECORD
  | WRITE
  | READ
  | CASE
  | OF
  | BREAK
  | CONTINUE
  | TRY
  | EXCEPT
  | NIL
  | AS
  | RAISE
  | EXCEPTION
  | FINALLY
  | FALSE
  | TRUE
  | OR
  | AND

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  263 (* ADD *);
  264 (* SUB *);
  265 (* MUL *);
  266 (* DIV *);
  267 (* MOD *);
  268 (* ASG *);
  269 (* LPAR *);
  270 (* RPAR *);
  271 (* LBRA *);
  272 (* RBRA *);
  273 (* GT *);
  274 (* LT *);
  275 (* EQUAL *);
  276 (* NOTEQ *);
  277 (* GTEQ *);
  278 (* LTEQ *);
  279 (* GETREF *);
  280 (* DEREF *);
  281 (* COLON *);
  282 (* SCOLON *);
  283 (* COMMA *);
  284 (* DOT *);
  285 (* RANGE *);
  286 (* PROGRAM *);
  287 (* FUNCTION *);
  288 (* PROCEDURE *);
  289 (* BEGIN *);
  290 (* END *);
  291 (* FOR *);
  292 (* WHILE *);
  293 (* REPEAT *);
  294 (* INTEGER *);
  295 (* THEN *);
  296 (* UNTIL *);
  297 (* IF *);
  298 (* ELSE *);
  299 (* INC *);
  300 (* DEC *);
  301 (* DO *);
  302 (* REF *);
  303 (* REAL *);
  304 (* STRING *);
  305 (* BOOLEAN *);
  306 (* CHARACTER *);
  307 (* ARRAY *);
  308 (* TO *);
  309 (* DOWNTO *);
  310 (* VAR *);
  311 (* TYPE *);
  312 (* ENUMERATE *);
  313 (* RECORD *);
  314 (* WRITE *);
  315 (* READ *);
  316 (* CASE *);
  317 (* OF *);
  318 (* BREAK *);
  319 (* CONTINUE *);
  320 (* TRY *);
  321 (* EXCEPT *);
  322 (* NIL *);
  323 (* AS *);
  324 (* RAISE *);
  325 (* EXCEPTION *);
  326 (* FINALLY *);
  327 (* FALSE *);
  328 (* TRUE *);
  329 (* OR *);
  330 (* AND *);
    0|]

let yytransl_block = [|
  257 (* ICONST *);
  258 (* RCONST *);
  259 (* BCONST *);
  260 (* CCONST *);
  261 (* SCONST *);
  262 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\005\000\005\000\005\000\005\000\
\002\000\010\000\010\000\010\000\010\000\010\000\011\000\011\000\
\012\000\012\000\012\000\012\000\013\000\013\000\013\000\013\000\
\014\000\016\000\016\000\017\000\017\000\006\000\018\000\018\000\
\019\000\019\000\020\000\021\000\021\000\007\000\008\000\025\000\
\025\000\024\000\024\000\024\000\024\000\026\000\026\000\027\000\
\027\000\009\000\028\000\028\000\029\000\029\000\029\000\029\000\
\030\000\030\000\030\000\033\000\033\000\035\000\034\000\034\000\
\037\000\031\000\032\000\032\000\015\000\038\000\038\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\041\000\041\000\045\000\045\000\046\000\046\000\047\000\047\000\
\047\000\047\000\047\000\036\000\036\000\043\000\043\000\022\000\
\022\000\004\000\042\000\042\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\044\000\044\000\044\000\000\000"

let yylen = "\002\000\
\004\000\003\000\002\000\001\000\001\000\001\000\001\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\006\000\003\000\001\000\003\000\000\000\002\000\003\000\002\000\
\001\000\001\000\003\000\005\000\005\000\009\000\011\000\001\000\
\000\000\003\000\001\000\001\000\000\000\003\000\001\000\003\000\
\001\000\002\000\005\000\004\000\001\000\001\000\001\000\001\000\
\004\000\003\000\003\000\003\000\002\000\003\000\008\000\007\000\
\002\000\003\000\001\000\003\000\002\000\001\000\001\000\006\000\
\006\000\005\000\003\000\004\000\003\000\008\000\008\000\004\000\
\005\000\004\000\008\000\005\000\002\000\002\000\002\000\002\000\
\002\000\001\000\001\000\004\000\000\000\004\000\006\000\004\000\
\008\000\008\000\007\000\005\000\004\000\006\000\005\000\007\000\
\005\000\004\000\005\000\004\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\003\000\003\000\
\001\000\003\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\001\000\001\000\001\000\003\000\
\004\000\004\000\003\000\001\000\003\000\000\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\151\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\
\007\000\008\000\009\000\000\000\000\000\111\000\112\000\113\000\
\115\000\114\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\091\000\000\000\143\000\000\000\000\000\000\000\123\000\
\070\000\071\000\000\000\141\000\121\000\030\000\000\000\033\000\
\034\000\000\000\000\000\050\000\000\000\002\000\003\000\000\000\
\000\000\000\000\000\000\000\000\000\000\139\000\140\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\086\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\122\000\
\000\000\000\000\000\000\000\000\001\000\047\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\144\000\077\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\147\000\000\000\000\000\124\000\031\000\000\000\010\000\000\000\
\011\000\012\000\014\000\013\000\000\000\000\000\035\000\022\000\
\024\000\120\000\021\000\000\000\000\000\000\000\023\000\053\000\
\000\000\054\000\055\000\056\000\000\000\000\000\000\000\000\000\
\000\000\145\000\000\000\000\000\076\000\096\000\000\000\000\000\
\094\000\000\000\149\000\110\000\000\000\000\000\000\000\000\000\
\109\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\082\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\046\000\000\000\048\000\000\000\000\000\146\000\000\000\000\000\
\000\000\000\000\074\000\000\000\100\000\000\000\116\000\000\000\
\000\000\081\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\103\000\084\000\037\000\000\000\
\000\000\000\000\000\000\066\000\000\000\000\000\059\000\000\000\
\058\000\000\000\068\000\051\000\000\000\000\000\040\000\000\000\
\000\000\000\000\072\000\095\000\000\000\000\000\073\000\000\000\
\119\000\000\000\000\000\000\000\000\000\000\000\102\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\062\000\057\000\060\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\099\000\000\000\000\000\000\000\000\000\
\104\000\000\000\000\000\000\000\028\000\000\000\026\000\017\000\
\018\000\020\000\019\000\000\000\000\000\038\000\078\000\097\000\
\079\000\098\000\105\000\107\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\015\000\016\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\064\000\000\000\000\000\065\000\
\063\000"

let yydgoto = "\002\000\
\004\000\005\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\167\000\088\001\068\001\159\000\160\000\161\000\001\001\
\002\001\054\000\055\000\056\000\111\000\058\000\047\000\112\000\
\016\001\113\000\114\000\060\000\169\000\170\000\171\000\172\000\
\219\000\220\000\221\000\060\001\103\001\048\000\049\000\050\000\
\190\000\051\000\195\000\081\000\191\000\192\000\052\000"

let yysindex = "\011\000\
\013\255\000\000\038\255\000\000\124\255\034\255\081\255\087\255\
\176\000\126\255\142\255\116\255\139\255\205\255\000\000\000\000\
\000\000\000\000\000\000\172\255\185\255\000\000\000\000\000\000\
\000\000\000\000\151\255\157\255\157\255\157\255\176\000\195\255\
\157\255\176\000\157\255\157\255\157\255\157\255\157\255\157\255\
\000\000\000\000\176\000\000\000\196\255\157\255\022\003\000\000\
\000\000\000\000\097\255\000\000\000\000\000\000\179\255\000\000\
\000\000\159\255\189\255\000\000\187\255\000\000\000\000\126\255\
\126\255\157\255\157\255\252\255\044\003\000\000\000\000\100\255\
\209\255\066\003\213\255\228\255\082\003\248\004\248\004\010\255\
\000\000\000\000\105\003\082\255\147\255\218\255\234\255\157\255\
\157\255\157\255\157\255\157\255\157\255\157\255\157\255\157\255\
\157\255\157\255\157\255\014\000\157\255\157\255\176\000\000\000\
\126\255\029\000\017\000\160\005\000\000\000\000\000\000\255\255\
\001\000\008\000\010\000\022\000\009\000\157\255\000\000\000\000\
\157\255\176\000\157\255\157\255\176\000\157\255\075\001\126\255\
\224\000\126\255\217\000\157\255\025\255\025\255\234\255\234\255\
\234\255\248\004\238\255\238\255\238\255\238\255\238\255\238\255\
\000\000\025\255\234\255\000\000\000\000\018\000\000\000\225\000\
\000\000\000\000\000\000\000\000\030\000\025\000\000\000\000\000\
\000\000\000\000\000\000\126\255\017\255\126\255\000\000\000\000\
\031\000\000\000\000\000\000\000\023\000\126\255\126\255\033\000\
\000\000\000\000\046\000\021\000\000\000\000\000\248\004\248\004\
\000\000\005\000\000\000\000\000\036\000\093\255\102\255\075\001\
\000\000\240\254\128\000\063\000\157\255\224\000\157\255\157\255\
\224\000\000\000\027\000\086\000\157\255\217\000\157\255\157\255\
\217\000\062\000\085\000\094\000\000\000\032\000\157\255\095\255\
\075\001\247\255\008\255\071\000\081\000\074\000\142\255\225\000\
\000\000\008\000\000\000\248\255\055\000\000\000\157\255\157\255\
\176\000\176\000\000\000\224\000\000\000\217\000\000\000\104\000\
\224\000\000\000\106\000\140\003\173\003\189\003\217\000\049\000\
\114\000\211\003\250\003\027\004\000\000\000\000\000\000\098\000\
\112\000\108\000\248\004\000\000\111\000\225\000\000\000\103\000\
\000\000\126\255\000\000\000\000\121\000\144\255\000\000\116\255\
\052\004\074\004\000\000\000\000\123\000\127\000\000\000\120\000\
\000\000\087\000\157\255\224\000\224\000\075\001\000\000\217\000\
\157\255\217\000\176\000\075\001\155\000\097\000\032\000\042\255\
\000\000\000\000\000\000\055\000\018\000\025\000\133\000\176\000\
\176\000\075\001\075\001\000\000\224\000\210\002\118\000\141\000\
\000\000\250\002\125\000\143\000\000\000\191\255\000\000\000\000\
\000\000\000\000\000\000\113\000\116\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\157\255\157\255\224\000\
\224\000\157\255\157\255\217\000\217\000\000\000\000\000\000\000\
\126\255\149\000\096\004\135\004\157\004\179\004\112\255\000\000\
\224\000\224\000\217\000\217\000\000\000\126\255\150\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\169\255\000\000\000\000\000\000\000\000\152\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\226\004\000\000\000\000\000\000\169\255\000\000\
\000\000\153\000\000\000\000\000\000\000\036\255\036\255\000\000\
\000\000\000\000\165\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\169\000\
\169\000\181\000\182\000\030\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\087\001\155\001\019\001\
\000\000\000\000\000\000\000\000\000\000\223\001\098\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\169\255\000\000\
\156\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\183\000\188\000\000\000\000\000\000\000\181\000\000\000\000\000\
\000\000\035\002\000\000\000\000\035\002\209\002\000\000\000\000\
\035\002\000\000\000\000\181\000\011\005\071\005\166\001\234\001\
\046\002\103\002\206\005\005\006\060\006\115\006\170\006\225\006\
\000\000\131\005\114\002\000\000\000\000\019\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\178\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\182\002\000\000\000\000\000\000\000\000\000\000\171\002\035\255\
\000\000\136\000\000\000\000\000\000\000\000\000\000\000\180\000\
\000\000\080\000\035\002\000\000\000\000\153\000\000\000\000\000\
\165\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\103\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\193\000\000\000\000\000\175\000\000\000\000\000\000\000\
\035\002\184\000\000\000\035\002\000\000\000\000\000\000\000\000\
\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\199\000\068\255\000\000\000\000\000\000\000\000\000\000\
\000\000\030\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\035\002\174\000\000\000\000\000\000\000\
\000\000\000\000\035\002\000\000\000\000\000\000\103\255\000\000\
\000\000\000\000\000\000\175\000\000\000\000\000\000\000\035\002\
\035\002\210\255\221\255\000\000\035\002\000\000\000\000\000\000\
\000\000\000\000\136\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\002\
\184\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\002\035\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\204\001\245\255\000\000\037\255\000\000\000\000\
\000\000\163\255\000\000\000\000\170\255\000\000\000\000\185\000\
\000\000\116\001\000\000\206\255\254\255\131\255\019\000\157\001\
\179\000\000\000\058\001\010\001\000\000\000\000\000\000\000\000\
\094\255\022\001\000\000\135\255\000\000\155\255\229\255\222\255\
\000\000\212\001\115\001\007\000\231\254\000\000\192\255"

let yytablesize = 2087
let yytable = "\076\000\
\061\000\148\000\194\000\222\000\194\000\189\000\075\000\057\000\
\085\000\015\001\107\000\001\000\158\000\110\000\110\000\084\000\
\088\000\089\000\090\000\091\000\092\000\168\000\053\000\185\000\
\075\001\076\001\094\000\095\000\096\000\097\000\098\000\099\000\
\021\000\090\000\091\000\092\000\126\000\100\000\216\000\218\000\
\218\000\007\001\003\000\006\000\021\000\082\000\069\000\070\000\
\071\000\228\000\240\000\074\000\100\000\077\000\078\000\079\000\
\080\000\080\000\083\000\019\000\101\000\150\000\193\000\061\000\
\087\000\213\000\023\000\217\000\101\000\150\000\239\000\061\000\
\116\000\117\000\101\000\150\000\217\000\150\000\023\000\064\001\
\015\001\036\000\101\000\102\000\080\000\080\000\020\000\182\000\
\065\001\061\000\066\001\067\001\021\000\036\000\181\000\005\001\
\210\000\186\000\102\000\101\000\150\000\202\000\057\000\043\001\
\101\000\150\000\133\000\134\000\135\000\136\000\137\000\138\000\
\139\000\140\000\141\000\142\000\143\000\144\000\029\000\146\000\
\147\000\107\000\103\000\225\000\179\000\103\000\235\000\193\000\
\004\001\029\000\104\000\053\000\187\000\120\000\236\000\237\000\
\080\000\013\001\211\000\180\000\218\000\183\000\184\000\238\000\
\080\000\101\001\128\000\059\000\009\000\045\001\080\000\129\000\
\193\000\102\001\007\000\008\000\009\000\022\000\023\000\024\000\
\025\000\026\000\068\000\066\000\056\001\067\000\062\000\242\000\
\248\000\028\000\075\000\076\000\227\000\084\000\085\000\041\001\
\046\001\010\000\011\000\029\000\030\000\151\000\095\001\106\000\
\064\000\107\000\032\000\032\000\032\000\185\000\153\000\154\000\
\155\000\156\000\093\000\104\001\086\001\065\000\020\001\022\001\
\073\000\086\000\093\000\024\001\105\000\019\001\021\001\108\000\
\023\001\032\000\032\000\130\000\031\001\026\001\109\000\244\000\
\131\000\245\000\246\000\218\000\121\000\193\000\044\000\250\000\
\087\001\251\000\252\000\193\000\151\000\093\000\132\000\046\000\
\218\000\003\001\093\000\007\000\008\000\153\000\154\000\155\000\
\156\000\193\000\193\000\106\000\088\000\089\000\090\000\091\000\
\092\000\017\001\018\001\106\000\123\000\057\001\108\000\182\000\
\181\000\055\001\010\000\011\000\047\001\100\000\108\000\059\001\
\118\000\100\000\067\000\124\000\173\000\072\001\074\001\006\001\
\014\001\107\000\107\000\145\000\071\001\073\001\162\000\176\000\
\178\000\077\001\174\000\088\000\089\000\090\000\091\000\092\000\
\000\001\175\000\150\000\177\000\212\000\094\000\095\000\096\000\
\097\000\098\000\099\000\215\000\214\000\054\001\233\000\224\000\
\100\000\020\001\022\001\058\001\019\001\021\001\101\000\102\000\
\223\000\090\001\229\000\230\000\234\000\204\000\205\000\206\000\
\072\001\074\001\151\000\207\000\243\000\071\001\073\001\247\000\
\231\000\232\000\152\000\153\000\154\000\155\000\156\000\157\000\
\118\000\118\000\118\000\118\000\118\000\118\000\208\000\052\000\
\052\000\052\000\209\000\249\000\118\000\101\000\102\000\253\000\
\091\001\092\001\254\000\255\000\093\001\094\001\118\000\118\000\
\009\001\118\000\010\001\011\001\010\000\025\001\052\000\052\000\
\118\000\118\000\118\000\118\000\118\000\027\001\032\001\118\000\
\118\000\118\000\118\000\118\000\118\000\033\001\037\001\038\001\
\022\000\023\000\024\000\025\000\026\000\027\000\039\001\040\001\
\042\001\118\000\118\000\118\000\028\000\118\000\118\000\118\000\
\118\000\118\000\044\001\118\000\050\001\118\000\029\000\030\000\
\051\001\052\001\118\000\061\001\053\001\062\001\070\001\080\001\
\031\000\070\000\196\000\197\000\198\000\081\001\084\001\085\001\
\199\000\070\000\036\000\037\000\241\000\089\001\096\001\070\000\
\022\000\023\000\024\000\025\000\026\000\027\000\045\000\105\001\
\004\000\038\000\039\000\200\000\028\000\041\000\042\000\201\000\
\093\000\044\000\150\000\045\000\043\000\150\000\029\000\030\000\
\070\000\044\000\046\000\067\000\117\000\070\000\042\000\041\000\
\031\000\093\000\032\000\033\000\034\000\093\000\027\000\093\000\
\035\000\063\000\036\000\037\000\149\000\115\000\069\001\063\001\
\022\000\023\000\024\000\025\000\026\000\027\000\163\000\226\000\
\012\001\038\000\039\000\040\000\028\000\041\000\042\000\043\000\
\008\001\044\000\072\000\045\000\203\000\000\000\029\000\030\000\
\000\000\000\000\046\000\204\000\205\000\206\000\000\000\000\000\
\031\000\207\000\196\000\197\000\198\000\000\000\151\000\000\000\
\199\000\000\000\036\000\037\000\000\000\000\000\152\000\153\000\
\154\000\155\000\156\000\157\000\208\000\000\000\000\000\000\000\
\209\000\038\000\039\000\200\000\000\000\041\000\042\000\201\000\
\148\000\044\000\148\000\045\000\142\000\142\000\142\000\142\000\
\142\000\142\000\046\000\142\000\148\000\142\000\142\000\142\000\
\142\000\142\000\142\000\142\000\148\000\000\000\000\000\142\000\
\142\000\142\000\148\000\000\000\148\000\000\000\000\000\142\000\
\000\000\000\000\000\000\000\000\142\000\142\000\000\000\142\000\
\000\000\000\000\142\000\022\000\023\000\024\000\025\000\026\000\
\188\000\142\000\142\000\148\000\000\000\000\000\000\000\000\000\
\148\000\000\000\142\000\000\000\000\000\000\000\142\000\000\000\
\000\000\000\000\000\000\142\000\000\000\000\000\142\000\142\000\
\138\000\138\000\138\000\138\000\138\000\138\000\000\000\138\000\
\089\000\138\000\138\000\138\000\138\000\138\000\138\000\138\000\
\089\000\000\000\000\000\138\000\138\000\000\000\089\000\000\000\
\089\000\000\000\000\000\138\000\000\000\000\000\000\000\000\000\
\138\000\138\000\000\000\138\000\000\000\000\000\138\000\000\000\
\000\000\000\000\000\000\000\000\000\000\138\000\138\000\089\000\
\000\000\000\000\000\000\000\000\089\000\000\000\138\000\000\000\
\000\000\000\000\138\000\000\000\000\000\000\000\000\000\138\000\
\000\000\000\000\138\000\138\000\134\000\134\000\134\000\134\000\
\134\000\134\000\000\000\134\000\088\000\134\000\134\000\134\000\
\134\000\134\000\134\000\134\000\088\000\000\000\000\000\134\000\
\134\000\000\000\088\000\000\000\088\000\000\000\000\000\134\000\
\000\000\000\000\000\000\000\000\134\000\134\000\000\000\134\000\
\000\000\000\000\134\000\000\000\000\000\000\000\000\000\000\000\
\000\000\134\000\134\000\088\000\000\000\000\000\000\000\000\000\
\088\000\000\000\134\000\000\000\000\000\000\000\134\000\000\000\
\000\000\000\000\000\000\134\000\000\000\000\000\134\000\134\000\
\135\000\135\000\135\000\135\000\135\000\135\000\000\000\135\000\
\085\000\135\000\135\000\135\000\135\000\135\000\135\000\135\000\
\085\000\000\000\000\000\135\000\135\000\000\000\085\000\000\000\
\085\000\000\000\000\000\135\000\000\000\000\000\000\000\000\000\
\135\000\135\000\000\000\135\000\000\000\000\000\135\000\000\000\
\000\000\000\000\000\000\000\000\000\000\135\000\135\000\085\000\
\000\000\000\000\000\000\000\000\085\000\000\000\135\000\000\000\
\000\000\000\000\135\000\000\000\000\000\000\000\000\000\135\000\
\000\000\000\000\135\000\135\000\136\000\136\000\136\000\136\000\
\136\000\136\000\000\000\136\000\093\000\136\000\136\000\136\000\
\136\000\136\000\136\000\136\000\093\000\000\000\000\000\136\000\
\136\000\000\000\093\000\000\000\093\000\000\000\000\000\136\000\
\000\000\000\000\000\000\000\000\136\000\136\000\000\000\136\000\
\000\000\000\000\136\000\000\000\000\000\000\000\000\000\000\000\
\000\000\136\000\136\000\093\000\000\000\000\000\000\000\000\000\
\093\000\000\000\136\000\000\000\000\000\000\000\136\000\000\000\
\000\000\000\000\000\000\136\000\000\000\000\000\136\000\136\000\
\137\000\137\000\137\000\137\000\137\000\137\000\000\000\137\000\
\075\000\137\000\137\000\137\000\137\000\137\000\137\000\137\000\
\075\000\000\000\000\000\137\000\137\000\000\000\075\000\000\000\
\075\000\000\000\000\000\137\000\000\000\000\000\000\000\000\000\
\137\000\137\000\000\000\137\000\000\000\000\000\137\000\000\000\
\000\000\000\000\000\000\000\000\000\000\137\000\137\000\075\000\
\000\000\000\000\000\000\000\000\075\000\000\000\137\000\000\000\
\000\000\000\000\137\000\000\000\000\000\000\000\000\000\137\000\
\000\000\000\000\137\000\137\000\146\000\146\000\146\000\146\000\
\146\000\146\000\000\000\000\000\080\000\000\000\146\000\146\000\
\146\000\146\000\146\000\146\000\080\000\000\000\000\000\092\000\
\000\000\146\000\080\000\000\000\080\000\000\000\000\000\092\000\
\088\000\089\000\090\000\091\000\092\000\092\000\150\000\092\000\
\150\000\000\000\094\000\095\000\096\000\097\000\098\000\099\000\
\000\000\000\000\150\000\080\000\000\000\100\000\000\000\000\000\
\080\000\000\000\150\000\000\000\000\000\000\000\092\000\000\000\
\150\000\000\000\150\000\092\000\000\000\000\000\146\000\146\000\
\088\000\089\000\090\000\091\000\092\000\078\001\079\001\000\000\
\000\000\000\000\094\000\095\000\096\000\097\000\098\000\099\000\
\000\000\150\000\000\000\000\000\000\000\100\000\150\000\000\000\
\000\000\000\000\101\000\102\000\088\000\089\000\090\000\091\000\
\092\000\093\000\000\000\000\000\000\000\000\000\094\000\095\000\
\096\000\097\000\098\000\099\000\000\000\082\001\083\001\000\000\
\000\000\100\000\088\000\089\000\090\000\091\000\092\000\000\000\
\000\000\119\000\000\000\000\000\094\000\095\000\096\000\097\000\
\098\000\099\000\101\000\102\000\000\000\000\000\000\000\100\000\
\088\000\089\000\090\000\091\000\092\000\000\000\000\000\000\000\
\000\000\000\000\094\000\095\000\096\000\097\000\098\000\099\000\
\088\000\089\000\090\000\091\000\092\000\100\000\101\000\102\000\
\000\000\000\000\094\000\095\000\096\000\097\000\098\000\099\000\
\000\000\000\000\000\000\000\000\000\000\100\000\122\000\088\000\
\089\000\090\000\091\000\092\000\101\000\102\000\000\000\000\000\
\125\000\094\000\095\000\096\000\097\000\098\000\099\000\000\000\
\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\
\000\000\000\000\101\000\102\000\000\000\000\000\000\000\000\000\
\000\000\000\000\088\000\089\000\090\000\091\000\092\000\000\000\
\000\000\000\000\101\000\102\000\094\000\095\000\096\000\097\000\
\098\000\099\000\000\000\000\000\000\000\127\000\000\000\100\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\101\000\102\000\088\000\089\000\090\000\091\000\092\000\
\028\001\000\000\000\000\000\000\000\000\094\000\095\000\096\000\
\097\000\098\000\099\000\088\000\089\000\090\000\091\000\092\000\
\100\000\000\000\000\000\000\000\000\000\094\000\095\000\096\000\
\097\000\098\000\099\000\029\001\101\000\102\000\000\000\000\000\
\100\000\088\000\089\000\090\000\091\000\092\000\000\000\000\000\
\000\000\000\000\000\000\094\000\095\000\096\000\097\000\098\000\
\099\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\
\000\000\000\000\000\000\000\000\000\000\101\000\102\000\000\000\
\000\000\030\001\000\000\000\000\000\000\000\000\000\000\034\001\
\088\000\089\000\090\000\091\000\092\000\101\000\102\000\000\000\
\000\000\000\000\094\000\095\000\096\000\097\000\098\000\099\000\
\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\
\000\000\000\000\000\000\101\000\102\000\000\000\000\000\000\000\
\035\001\088\000\089\000\090\000\091\000\092\000\000\000\000\000\
\000\000\000\000\000\000\094\000\095\000\096\000\097\000\098\000\
\099\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\
\000\000\000\000\088\000\089\000\090\000\091\000\092\000\000\000\
\000\000\000\000\101\000\102\000\094\000\095\000\096\000\097\000\
\098\000\099\000\000\000\000\000\000\000\000\000\000\000\100\000\
\088\000\089\000\090\000\091\000\092\000\000\000\000\000\036\001\
\000\000\000\000\094\000\095\000\096\000\097\000\098\000\099\000\
\048\001\000\000\000\000\101\000\102\000\100\000\088\000\089\000\
\090\000\091\000\092\000\000\000\000\000\000\000\000\000\000\000\
\094\000\095\000\096\000\097\000\098\000\099\000\049\001\000\000\
\000\000\000\000\000\000\100\000\101\000\102\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\001\088\000\089\000\090\000\
\091\000\092\000\101\000\102\000\000\000\000\000\000\000\094\000\
\095\000\096\000\097\000\098\000\099\000\000\000\000\000\000\000\
\000\000\000\000\100\000\088\000\089\000\090\000\091\000\092\000\
\101\000\102\000\000\000\000\000\000\000\094\000\095\000\096\000\
\097\000\098\000\099\000\098\001\000\000\000\000\000\000\000\000\
\100\000\088\000\089\000\090\000\091\000\092\000\000\000\000\000\
\000\000\000\000\000\000\094\000\095\000\096\000\097\000\098\000\
\099\000\099\001\000\000\000\000\000\000\000\000\100\000\101\000\
\102\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\001\
\000\000\000\000\000\000\000\000\000\000\101\000\102\000\000\000\
\142\000\142\000\142\000\142\000\142\000\142\000\000\000\000\000\
\000\000\000\000\142\000\142\000\142\000\142\000\142\000\142\000\
\000\000\000\000\000\000\101\000\102\000\142\000\088\000\089\000\
\090\000\091\000\092\000\000\000\000\000\000\000\000\000\000\000\
\094\000\095\000\096\000\097\000\098\000\099\000\000\000\000\000\
\000\000\131\000\131\000\100\000\000\000\000\000\131\000\000\000\
\131\000\000\000\131\000\131\000\131\000\131\000\131\000\131\000\
\131\000\000\000\000\000\000\000\131\000\131\000\000\000\000\000\
\000\000\000\000\142\000\142\000\131\000\000\000\000\000\000\000\
\000\000\131\000\131\000\000\000\131\000\000\000\000\000\131\000\
\000\000\000\000\000\000\000\000\000\000\000\000\131\000\131\000\
\101\000\102\000\000\000\000\000\000\000\000\000\000\000\131\000\
\000\000\000\000\000\000\131\000\000\000\132\000\132\000\000\000\
\131\000\000\000\132\000\131\000\132\000\000\000\132\000\132\000\
\132\000\132\000\132\000\132\000\132\000\000\000\000\000\000\000\
\132\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\
\132\000\000\000\000\000\000\000\000\000\132\000\132\000\000\000\
\132\000\000\000\000\000\132\000\000\000\000\000\000\000\000\000\
\000\000\000\000\132\000\132\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\132\000\000\000\000\000\000\000\132\000\
\000\000\133\000\133\000\000\000\132\000\000\000\133\000\132\000\
\133\000\000\000\133\000\133\000\133\000\133\000\133\000\133\000\
\133\000\000\000\000\000\000\000\133\000\133\000\000\000\000\000\
\000\000\000\000\000\000\000\000\133\000\163\000\000\000\000\000\
\000\000\133\000\133\000\000\000\133\000\000\000\000\000\133\000\
\000\000\000\000\000\000\000\000\000\000\000\000\133\000\133\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\
\000\000\000\000\000\000\133\000\000\000\151\000\000\000\000\000\
\133\000\000\000\000\000\133\000\000\000\152\000\153\000\154\000\
\155\000\156\000\157\000\000\000\000\000\000\000\000\000\164\000\
\165\000\125\000\000\000\125\000\000\000\125\000\125\000\125\000\
\125\000\125\000\125\000\125\000\166\000\000\000\000\000\125\000\
\125\000\000\000\000\000\000\000\000\000\000\000\000\000\125\000\
\000\000\000\000\000\000\000\000\125\000\125\000\000\000\125\000\
\000\000\000\000\125\000\000\000\000\000\000\000\000\000\000\000\
\000\000\125\000\125\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\125\000\000\000\000\000\000\000\125\000\000\000\
\126\000\000\000\126\000\125\000\126\000\126\000\126\000\126\000\
\126\000\126\000\126\000\000\000\000\000\000\000\126\000\126\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\000\000\000\
\000\000\000\000\000\000\126\000\126\000\000\000\126\000\000\000\
\000\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\126\000\126\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\126\000\000\000\000\000\000\000\126\000\000\000\127\000\
\000\000\127\000\126\000\127\000\127\000\127\000\127\000\127\000\
\127\000\127\000\000\000\000\000\000\000\127\000\127\000\000\000\
\000\000\000\000\000\000\000\000\000\000\127\000\000\000\000\000\
\000\000\000\000\127\000\127\000\000\000\127\000\000\000\000\000\
\127\000\000\000\000\000\000\000\000\000\000\000\000\000\127\000\
\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\127\000\000\000\000\000\000\000\127\000\000\000\130\000\000\000\
\130\000\127\000\130\000\130\000\130\000\130\000\130\000\130\000\
\130\000\000\000\000\000\000\000\130\000\130\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\000\000\000\000\000\000\000\
\000\000\130\000\130\000\000\000\130\000\000\000\000\000\130\000\
\000\000\000\000\000\000\000\000\000\000\000\000\130\000\130\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\130\000\
\000\000\000\000\000\000\130\000\000\000\128\000\000\000\128\000\
\130\000\128\000\128\000\128\000\128\000\128\000\128\000\128\000\
\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\
\128\000\128\000\000\000\128\000\000\000\000\000\128\000\000\000\
\000\000\000\000\000\000\000\000\000\000\128\000\128\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\
\000\000\000\000\128\000\000\000\129\000\000\000\129\000\128\000\
\129\000\129\000\129\000\129\000\129\000\129\000\129\000\000\000\
\000\000\000\000\129\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\000\000\000\000\000\000\000\000\000\129\000\
\129\000\000\000\129\000\000\000\000\000\129\000\000\000\000\000\
\000\000\000\000\000\000\000\000\129\000\129\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\129\000\000\000\000\000\
\000\000\129\000\000\000\000\000\000\000\000\000\129\000"

let yycheck = "\034\000\
\012\000\103\000\128\000\166\000\130\000\127\000\034\000\010\000\
\043\000\229\000\027\001\001\000\106\000\064\000\065\000\043\000\
\007\001\008\001\009\001\010\001\011\001\108\000\006\001\125\000\
\050\001\051\001\017\001\018\001\019\001\020\001\021\001\022\001\
\014\001\009\001\010\001\011\001\027\001\028\001\164\000\165\000\
\166\000\034\001\030\001\006\001\026\001\039\000\028\000\029\000\
\030\000\175\000\067\001\033\000\028\001\035\000\036\000\037\000\
\038\000\039\000\040\000\026\001\026\001\026\001\127\000\034\001\
\046\000\152\000\014\001\060\001\034\001\034\001\192\000\042\001\
\066\000\067\000\040\001\040\001\060\001\042\001\026\001\038\001\
\044\001\014\001\073\001\074\001\066\000\067\000\006\001\122\000\
\047\001\060\001\049\001\050\001\006\001\026\001\122\000\217\000\
\131\000\125\000\074\001\065\001\065\001\129\000\105\000\010\001\
\070\001\070\001\088\000\089\000\090\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\016\001\101\000\
\102\000\027\001\026\001\174\000\118\000\026\001\034\001\192\000\
\034\001\027\001\034\001\006\001\126\000\034\001\042\001\034\001\
\118\000\224\000\132\000\121\000\010\001\123\000\124\000\042\001\
\126\000\034\001\065\001\006\001\033\001\006\001\132\000\070\001\
\217\000\042\001\031\001\032\001\033\001\001\001\002\001\003\001\
\004\001\005\001\006\001\013\001\030\001\015\001\028\001\195\000\
\203\000\013\001\198\000\206\000\175\000\201\000\209\000\006\001\
\014\001\054\001\055\001\023\001\024\001\038\001\089\001\025\001\
\013\001\027\001\031\001\032\001\033\001\035\001\047\001\048\001\
\049\001\050\001\026\001\102\001\006\001\013\001\233\000\234\000\
\006\001\006\001\034\001\238\000\026\001\233\000\234\000\019\001\
\236\000\054\001\055\001\065\001\247\000\241\000\028\001\197\000\
\070\001\199\000\200\000\089\001\012\001\030\001\066\001\205\000\
\062\001\207\000\208\000\036\001\038\001\065\001\013\001\075\001\
\102\001\215\000\070\001\031\001\032\001\047\001\048\001\049\001\
\050\001\050\001\051\001\034\001\007\001\008\001\009\001\010\001\
\011\001\231\000\232\000\042\001\040\001\032\001\034\001\034\001\
\028\001\029\001\054\001\055\001\016\001\028\001\042\001\035\001\
\013\001\028\001\015\001\040\001\014\001\048\001\049\001\025\001\
\025\001\027\001\027\001\006\001\048\001\049\001\006\001\014\001\
\016\001\053\001\026\001\007\001\008\001\009\001\010\001\011\001\
\001\001\026\001\006\001\014\001\019\001\017\001\018\001\019\001\
\020\001\021\001\022\001\019\001\015\001\027\001\042\001\025\001\
\028\001\084\001\085\001\033\001\080\001\081\001\073\001\074\001\
\026\001\069\001\026\001\014\001\025\001\035\001\036\001\037\001\
\099\001\100\001\038\001\041\001\006\001\097\001\098\001\045\001\
\052\001\053\001\046\001\047\001\048\001\049\001\050\001\051\001\
\001\001\002\001\003\001\004\001\005\001\006\001\060\001\031\001\
\032\001\033\001\064\001\006\001\013\001\073\001\074\001\034\001\
\078\001\079\001\014\001\006\001\082\001\083\001\023\001\024\001\
\034\001\026\001\026\001\034\001\054\001\006\001\054\001\055\001\
\033\001\034\001\035\001\036\001\037\001\012\001\070\001\040\001\
\041\001\042\001\043\001\044\001\045\001\012\001\029\001\016\001\
\001\001\002\001\003\001\004\001\005\001\006\001\027\001\025\001\
\034\001\058\001\059\001\060\001\013\001\062\001\063\001\064\001\
\065\001\066\001\026\001\068\001\026\001\070\001\023\001\024\001\
\026\001\034\001\075\001\001\001\070\001\061\001\026\001\042\001\
\033\001\026\001\035\001\036\001\037\001\025\001\042\001\025\001\
\041\001\034\001\043\001\044\001\045\001\061\001\026\001\040\001\
\001\001\002\001\003\001\004\001\005\001\006\001\014\001\034\001\
\033\001\058\001\059\001\060\001\013\001\062\001\063\001\064\001\
\040\001\066\001\014\001\068\001\014\001\016\001\023\001\024\001\
\065\001\014\001\075\001\026\001\025\001\070\001\014\001\033\001\
\033\001\026\001\035\001\036\001\037\001\070\001\016\001\042\001\
\041\001\014\000\043\001\044\001\105\000\065\000\044\001\039\001\
\001\001\002\001\003\001\004\001\005\001\006\001\006\001\174\000\
\223\000\058\001\059\001\060\001\013\001\062\001\063\001\064\001\
\219\000\066\001\031\000\068\001\130\000\255\255\023\001\024\001\
\255\255\255\255\075\001\035\001\036\001\037\001\255\255\255\255\
\033\001\041\001\035\001\036\001\037\001\255\255\038\001\255\255\
\041\001\255\255\043\001\044\001\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\060\001\255\255\255\255\255\255\
\064\001\058\001\059\001\060\001\255\255\062\001\063\001\064\001\
\014\001\066\001\016\001\068\001\007\001\008\001\009\001\010\001\
\011\001\012\001\075\001\014\001\026\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\255\255\255\255\026\001\
\027\001\028\001\040\001\255\255\042\001\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\001\001\002\001\003\001\004\001\005\001\
\006\001\052\001\053\001\065\001\255\255\255\255\255\255\255\255\
\070\001\255\255\061\001\255\255\255\255\255\255\065\001\255\255\
\255\255\255\255\255\255\070\001\255\255\255\255\073\001\074\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\014\001\
\026\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\034\001\255\255\255\255\026\001\027\001\255\255\040\001\255\255\
\042\001\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\065\001\
\255\255\255\255\255\255\255\255\070\001\255\255\061\001\255\255\
\255\255\255\255\065\001\255\255\255\255\255\255\255\255\070\001\
\255\255\255\255\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\014\001\026\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\255\255\255\255\026\001\
\027\001\255\255\040\001\255\255\042\001\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\065\001\255\255\255\255\255\255\255\255\
\070\001\255\255\061\001\255\255\255\255\255\255\065\001\255\255\
\255\255\255\255\255\255\070\001\255\255\255\255\073\001\074\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\014\001\
\026\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\034\001\255\255\255\255\026\001\027\001\255\255\040\001\255\255\
\042\001\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\065\001\
\255\255\255\255\255\255\255\255\070\001\255\255\061\001\255\255\
\255\255\255\255\065\001\255\255\255\255\255\255\255\255\070\001\
\255\255\255\255\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\014\001\026\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\255\255\255\255\026\001\
\027\001\255\255\040\001\255\255\042\001\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\065\001\255\255\255\255\255\255\255\255\
\070\001\255\255\061\001\255\255\255\255\255\255\065\001\255\255\
\255\255\255\255\255\255\070\001\255\255\255\255\073\001\074\001\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\014\001\
\026\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\034\001\255\255\255\255\026\001\027\001\255\255\040\001\255\255\
\042\001\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\065\001\
\255\255\255\255\255\255\255\255\070\001\255\255\061\001\255\255\
\255\255\255\255\065\001\255\255\255\255\255\255\255\255\070\001\
\255\255\255\255\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\026\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\255\255\255\255\026\001\
\255\255\028\001\040\001\255\255\042\001\255\255\255\255\034\001\
\007\001\008\001\009\001\010\001\011\001\040\001\014\001\042\001\
\016\001\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\026\001\065\001\255\255\028\001\255\255\255\255\
\070\001\255\255\034\001\255\255\255\255\255\255\065\001\255\255\
\040\001\255\255\042\001\070\001\255\255\255\255\073\001\074\001\
\007\001\008\001\009\001\010\001\011\001\052\001\053\001\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\065\001\255\255\255\255\255\255\028\001\070\001\255\255\
\255\255\255\255\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\052\001\053\001\255\255\
\255\255\028\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\073\001\074\001\255\255\255\255\255\255\028\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\028\001\073\001\074\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\028\001\045\001\007\001\
\008\001\009\001\010\001\011\001\073\001\074\001\255\255\255\255\
\039\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\255\255\255\255\028\001\255\255\255\255\255\255\
\255\255\255\255\073\001\074\001\255\255\255\255\255\255\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\073\001\074\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\061\001\255\255\028\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\073\001\074\001\007\001\008\001\009\001\010\001\011\001\
\045\001\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\007\001\008\001\009\001\010\001\011\001\
\028\001\255\255\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\039\001\073\001\074\001\255\255\255\255\
\028\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\255\255\
\255\255\255\255\255\255\255\255\255\255\073\001\074\001\255\255\
\255\255\061\001\255\255\255\255\255\255\255\255\255\255\045\001\
\007\001\008\001\009\001\010\001\011\001\073\001\074\001\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\028\001\255\255\255\255\
\255\255\255\255\255\255\073\001\074\001\255\255\255\255\255\255\
\039\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\255\255\255\255\028\001\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\073\001\074\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\255\255\255\255\028\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\061\001\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\045\001\255\255\255\255\073\001\074\001\028\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\045\001\255\255\
\255\255\255\255\255\255\028\001\073\001\074\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\045\001\007\001\008\001\009\001\
\010\001\011\001\073\001\074\001\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\255\255\255\255\028\001\007\001\008\001\009\001\010\001\011\001\
\073\001\074\001\255\255\255\255\255\255\017\001\018\001\019\001\
\020\001\021\001\022\001\045\001\255\255\255\255\255\255\255\255\
\028\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\045\001\255\255\255\255\255\255\255\255\028\001\073\001\
\074\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\073\001\074\001\255\255\
\007\001\008\001\009\001\010\001\011\001\012\001\255\255\255\255\
\255\255\255\255\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\073\001\074\001\028\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\007\001\008\001\028\001\255\255\255\255\012\001\255\255\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\073\001\074\001\034\001\255\255\255\255\255\255\
\255\255\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\255\255\065\001\255\255\007\001\008\001\255\255\
\070\001\255\255\012\001\073\001\014\001\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\255\255\255\255\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\255\255\255\255\255\255\065\001\
\255\255\007\001\008\001\255\255\070\001\255\255\012\001\073\001\
\014\001\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\006\001\255\255\255\255\
\255\255\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\255\255\065\001\255\255\038\001\255\255\255\255\
\070\001\255\255\255\255\073\001\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\255\255\255\255\255\255\255\255\056\001\
\057\001\012\001\255\255\014\001\255\255\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\069\001\255\255\255\255\026\001\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\061\001\255\255\255\255\255\255\065\001\255\255\
\012\001\255\255\014\001\070\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\034\001\255\255\
\255\255\255\255\255\255\039\001\040\001\255\255\042\001\255\255\
\255\255\045\001\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\053\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\061\001\255\255\255\255\255\255\065\001\255\255\012\001\
\255\255\014\001\070\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\039\001\040\001\255\255\042\001\255\255\255\255\
\045\001\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\053\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\061\001\255\255\255\255\255\255\065\001\255\255\012\001\255\255\
\014\001\070\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\034\001\255\255\255\255\255\255\
\255\255\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\255\255\065\001\255\255\012\001\255\255\014\001\
\070\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\255\255\255\255\065\001\255\255\012\001\255\255\014\001\070\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\039\001\
\040\001\255\255\042\001\255\255\255\255\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\255\255\065\001\255\255\255\255\255\255\255\255\070\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  MOD\000\
  ASG\000\
  LPAR\000\
  RPAR\000\
  LBRA\000\
  RBRA\000\
  GT\000\
  LT\000\
  EQUAL\000\
  NOTEQ\000\
  GTEQ\000\
  LTEQ\000\
  GETREF\000\
  DEREF\000\
  COLON\000\
  SCOLON\000\
  COMMA\000\
  DOT\000\
  RANGE\000\
  PROGRAM\000\
  FUNCTION\000\
  PROCEDURE\000\
  BEGIN\000\
  END\000\
  FOR\000\
  WHILE\000\
  REPEAT\000\
  INTEGER\000\
  THEN\000\
  UNTIL\000\
  IF\000\
  ELSE\000\
  INC\000\
  DEC\000\
  DO\000\
  REF\000\
  REAL\000\
  STRING\000\
  BOOLEAN\000\
  CHARACTER\000\
  ARRAY\000\
  TO\000\
  DOWNTO\000\
  VAR\000\
  TYPE\000\
  ENUMERATE\000\
  RECORD\000\
  WRITE\000\
  READ\000\
  CASE\000\
  OF\000\
  BREAK\000\
  CONTINUE\000\
  TRY\000\
  EXCEPT\000\
  NIL\000\
  AS\000\
  RAISE\000\
  EXCEPTION\000\
  FINALLY\000\
  FALSE\000\
  TRUE\000\
  OR\000\
  AND\000\
  "

let yynames_block = "\
  ICONST\000\
  RCONST\000\
  BCONST\000\
  CCONST\000\
  SCONST\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'program_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 35 "parser.mly"
                                                                         ()
# 978 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'program_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 36 "parser.mly"
                                                 ()
# 986 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_declaration_list) in
    Obj.repr(
# 40 "parser.mly"
                                                 ()
# 994 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'global_declaration) in
    Obj.repr(
# 41 "parser.mly"
                         ()
# 1001 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 45 "parser.mly"
                           ()
# 1008 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_definition) in
    Obj.repr(
# 46 "parser.mly"
                           ()
# 1015 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 47 "parser.mly"
                          ()
# 1022 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition) in
    Obj.repr(
# 48 "parser.mly"
                      ()
# 1029 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 52 "parser.mly"
                      ()
# 1036 "parser.ml"
               : 'program_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
              ()
# 1042 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
             ()
# 1048 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
             ()
# 1054 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                ()
# 1060 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
              ()
# 1066 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
         ()
# 1073 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 67 "parser.mly"
                  ()
# 1080 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
              ()
# 1086 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
           ()
# 1092 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                ()
# 1098 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
              ()
# 1104 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
         ()
# 1111 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 79 "parser.mly"
                 ()
# 1118 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 80 "parser.mly"
                  ()
# 1125 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference_type) in
    Obj.repr(
# 81 "parser.mly"
                     ()
# 1132 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'range_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'any_named_type) in
    Obj.repr(
# 84 "parser.mly"
                                                 ()
# 1140 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range_list) in
    Obj.repr(
# 88 "parser.mly"
                             ()
# 1148 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range) in
    Obj.repr(
# 89 "parser.mly"
            ()
# 1155 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "parser.mly"
                          ()
# 1163 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "parser.mly"
      ()
# 1169 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 98 "parser.mly"
                            ()
# 1176 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declr_or_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 102 "parser.mly"
                                               ()
# 1184 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declr_or_init) in
    Obj.repr(
# 103 "parser.mly"
                           ()
# 1191 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 107 "parser.mly"
                ()
# 1198 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 108 "parser.mly"
               ()
# 1205 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 112 "parser.mly"
                           ()
# 1213 "parser.ml"
               : 'var_declr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'simple_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 120 "parser.mly"
                                                  ()
# 1222 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parser.mly"
                                ()
# 1231 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 125 "parser.mly"
                                                                                            ()
# 1241 "parser.ml"
               : 'procedure_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'any_type) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 129 "parser.mly"
                                                                                                          ()
# 1252 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 133 "parser.mly"
                           ()
# 1259 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
      ()
# 1265 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 138 "parser.mly"
                                          ()
# 1273 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr_list) in
    Obj.repr(
# 139 "parser.mly"
                     ()
# 1280 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 140 "parser.mly"
                    ()
# 1287 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "parser.mly"
                       ()
# 1293 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 145 "parser.mly"
                                        ()
# 1301 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 146 "parser.mly"
                 ()
# 1308 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_init_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 150 "parser.mly"
                                    ()
# 1316 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 151 "parser.mly"
               ()
# 1323 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 155 "parser.mly"
                              ()
# 1330 "parser.ml"
               : 'type_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 159 "parser.mly"
                                                     ()
# 1339 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_body) in
    Obj.repr(
# 160 "parser.mly"
                                ()
# 1347 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 164 "parser.mly"
               ()
# 1354 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record_body) in
    Obj.repr(
# 165 "parser.mly"
                  ()
# 1361 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumerate_body) in
    Obj.repr(
# 166 "parser.mly"
                     ()
# 1368 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exception_body) in
    Obj.repr(
# 167 "parser.mly"
                     ()
# 1375 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 171 "parser.mly"
                                               ()
# 1383 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 172 "parser.mly"
                              ()
# 1390 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 173 "parser.mly"
                                  ()
# 1397 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 177 "parser.mly"
                                          ()
# 1405 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field) in
    Obj.repr(
# 178 "parser.mly"
                         ()
# 1412 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 182 "parser.mly"
                           ()
# 1420 "parser.ml"
               : 'fixed_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'variant_else_part) in
    Obj.repr(
# 186 "parser.mly"
                                                                                             ()
# 1430 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 187 "parser.mly"
                                                                           ()
# 1439 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 191 "parser.mly"
                           ()
# 1446 "parser.ml"
               : 'variant_else_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 195 "parser.mly"
                          ()
# 1453 "parser.ml"
               : 'enumerate_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
                ()
# 1459 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 200 "parser.mly"
                                     ()
# 1466 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 203 "parser.mly"
                             ()
# 1473 "parser.ml"
               : 'reference_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 208 "parser.mly"
             ()
# 1480 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 209 "parser.mly"
             ()
# 1487 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 214 "parser.mly"
                                            ()
# 1496 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'case_part_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 215 "parser.mly"
                                                 ()
# 1505 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_part_m) in
    Obj.repr(
# 216 "parser.mly"
                                         ()
# 1513 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 217 "parser.mly"
                                ()
# 1521 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 218 "parser.mly"
                                 ()
# 1529 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 219 "parser.mly"
                               ()
# 1536 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 220 "parser.mly"
                                                    ()
# 1546 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 221 "parser.mly"
                                                        ()
# 1556 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 222 "parser.mly"
                                     ()
# 1564 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exception_part) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 223 "parser.mly"
                                              ()
# 1573 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 224 "parser.mly"
                                ()
# 1581 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 225 "parser.mly"
                                                                ()
# 1591 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 226 "parser.mly"
                                          ()
# 1599 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 227 "parser.mly"
               ()
# 1606 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 228 "parser.mly"
                            ()
# 1613 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 229 "parser.mly"
                           ()
# 1620 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 230 "parser.mly"
                     ()
# 1627 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 231 "parser.mly"
                     ()
# 1634 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "parser.mly"
            ()
# 1640 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "parser.mly"
               ()
# 1646 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 234 "parser.mly"
                                   ()
# 1654 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 235 "parser.mly"
                            ()
# 1660 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 239 "parser.mly"
                                   ()
# 1668 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 240 "parser.mly"
                                            ()
# 1677 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 241 "parser.mly"
                                 ()
# 1685 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 242 "parser.mly"
                                                    ()
# 1695 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 243 "parser.mly"
                                                        ()
# 1705 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'case_part_u) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u) in
    Obj.repr(
# 244 "parser.mly"
                                                     ()
# 1714 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_part_u) in
    Obj.repr(
# 245 "parser.mly"
                                         ()
# 1722 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 246 "parser.mly"
                                     ()
# 1730 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 247 "parser.mly"
                                                 ()
# 1739 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u) in
    Obj.repr(
# 248 "parser.mly"
                                    ()
# 1747 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exception_part) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 249 "parser.mly"
                                                             ()
# 1757 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_part_u) in
    Obj.repr(
# 254 "parser.mly"
                                                           ()
# 1766 "parser.ml"
               : 'case_part_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_m) in
    Obj.repr(
# 255 "parser.mly"
                                               ()
# 1774 "parser.ml"
               : 'case_part_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_part_u) in
    Obj.repr(
# 259 "parser.mly"
                                                           ()
# 1783 "parser.ml"
               : 'case_part_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u) in
    Obj.repr(
# 260 "parser.mly"
                                               ()
# 1791 "parser.ml"
               : 'case_part_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 278 "parser.mly"
              ()
# 1798 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 279 "parser.mly"
         ()
# 1805 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 283 "parser.mly"
             ()
# 1812 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 284 "parser.mly"
             ()
# 1819 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 285 "parser.mly"
             ()
# 1826 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 286 "parser.mly"
             ()
# 1833 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 287 "parser.mly"
             ()
# 1840 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'literal_or_enum) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum_list) in
    Obj.repr(
# 291 "parser.mly"
                                           ()
# 1848 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum) in
    Obj.repr(
# 292 "parser.mly"
                      ()
# 1855 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 296 "parser.mly"
              ()
# 1862 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 297 "parser.mly"
                    ()
# 1870 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 301 "parser.mly"
                       ()
# 1878 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 302 "parser.mly"
         ()
# 1885 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 305 "parser.mly"
                                             ()
# 1892 "parser.ml"
               : 'compound_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 308 "parser.mly"
                ()
# 1899 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 309 "parser.mly"
                                      ()
# 1907 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 315 "parser.mly"
                                 ()
# 1915 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 316 "parser.mly"
                                 ()
# 1923 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 317 "parser.mly"
                                  ()
# 1931 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 318 "parser.mly"
                                 ()
# 1939 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 319 "parser.mly"
                                 ()
# 1947 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 320 "parser.mly"
                                  ()
# 1955 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 321 "parser.mly"
                                  ()
# 1963 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 322 "parser.mly"
                                  ()
# 1971 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 323 "parser.mly"
                                  ()
# 1979 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 324 "parser.mly"
                                ()
# 1987 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 325 "parser.mly"
                                ()
# 1995 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 326 "parser.mly"
                                ()
# 2003 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 327 "parser.mly"
                                ()
# 2011 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 328 "parser.mly"
                     ()
# 2018 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 329 "parser.mly"
                        ()
# 2025 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 330 "parser.mly"
                        ()
# 2032 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 331 "parser.mly"
              ()
# 2039 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 332 "parser.mly"
         ()
# 2046 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 333 "parser.mly"
          ()
# 2052 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 334 "parser.mly"
                           ()
# 2059 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 335 "parser.mly"
                                                  ()
# 2067 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 336 "parser.mly"
                                                  ()
# 2075 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 337 "parser.mly"
                        ()
# 2083 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 342 "parser.mly"
                 ()
# 2090 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 343 "parser.mly"
                                       ()
# 2098 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 344 "parser.mly"
      ()
# 2104 "parser.ml"
               : 'expression_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
