type token =
  | ICONST of (int)
  | RCONST of (float)
  | BCONST of (bool)
  | CCONST of (char)
  | SCONST of (string)
  | ID of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | ASG
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | GT
  | LT
  | EQUAL
  | NOTEQ
  | GTEQ
  | LTEQ
  | GETREF
  | DEREF
  | COLON
  | SCOLON
  | COMMA
  | DOT
  | RANGE
  | PROGRAM
  | FUNCTION
  | PROCEDURE
  | BEGIN
  | END
  | FOR
  | WHILE
  | REPEAT
  | INTEGER
  | THEN
  | UNTIL
  | IF
  | ELSE
  | INC
  | DEC
  | DO
  | REF
  | REAL
  | STRING
  | BOOLEAN
  | CHARACTER
  | ARRAY
  | TO
  | DOWNTO
  | VAR
  | TYPE
  | ENUMERATE
  | RECORD
  | WRITE
  | READ
  | CASE
  | OF
  | BREAK
  | CONTINUE
  | TRY
  | EXCEPT
  | NIL
  | AS
  | RAISE
  | EXCEPTION
  | FINALLY
  | FALSE
  | TRUE

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  263 (* ADD *);
  264 (* SUB *);
  265 (* MUL *);
  266 (* DIV *);
  267 (* MOD *);
  268 (* ASG *);
  269 (* LPAR *);
  270 (* RPAR *);
  271 (* LBRA *);
  272 (* RBRA *);
  273 (* GT *);
  274 (* LT *);
  275 (* EQUAL *);
  276 (* NOTEQ *);
  277 (* GTEQ *);
  278 (* LTEQ *);
  279 (* GETREF *);
  280 (* DEREF *);
  281 (* COLON *);
  282 (* SCOLON *);
  283 (* COMMA *);
  284 (* DOT *);
  285 (* RANGE *);
  286 (* PROGRAM *);
  287 (* FUNCTION *);
  288 (* PROCEDURE *);
  289 (* BEGIN *);
  290 (* END *);
  291 (* FOR *);
  292 (* WHILE *);
  293 (* REPEAT *);
  294 (* INTEGER *);
  295 (* THEN *);
  296 (* UNTIL *);
  297 (* IF *);
  298 (* ELSE *);
  299 (* INC *);
  300 (* DEC *);
  301 (* DO *);
  302 (* REF *);
  303 (* REAL *);
  304 (* STRING *);
  305 (* BOOLEAN *);
  306 (* CHARACTER *);
  307 (* ARRAY *);
  308 (* TO *);
  309 (* DOWNTO *);
  310 (* VAR *);
  311 (* TYPE *);
  312 (* ENUMERATE *);
  313 (* RECORD *);
  314 (* WRITE *);
  315 (* READ *);
  316 (* CASE *);
  317 (* OF *);
  318 (* BREAK *);
  319 (* CONTINUE *);
  320 (* TRY *);
  321 (* EXCEPT *);
  322 (* NIL *);
  323 (* AS *);
  324 (* RAISE *);
  325 (* EXCEPTION *);
  326 (* FINALLY *);
  327 (* FALSE *);
  328 (* TRUE *);
    0|]

let yytransl_block = [|
  257 (* ICONST *);
  258 (* RCONST *);
  259 (* BCONST *);
  260 (* CCONST *);
  261 (* SCONST *);
  262 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\005\000\005\000\005\000\005\000\002\000\
\010\000\010\000\010\000\010\000\010\000\011\000\011\000\012\000\
\012\000\012\000\012\000\013\000\013\000\013\000\014\000\015\000\
\015\000\016\000\016\000\006\000\017\000\017\000\018\000\018\000\
\021\000\021\000\019\000\023\000\023\000\020\000\020\000\007\000\
\008\000\026\000\026\000\025\000\025\000\025\000\025\000\009\000\
\027\000\027\000\028\000\028\000\028\000\028\000\028\000\029\000\
\029\000\029\000\033\000\033\000\035\000\034\000\034\000\037\000\
\030\000\031\000\031\000\032\000\038\000\038\000\038\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\041\000\
\040\000\040\000\042\000\043\000\004\000\044\000\044\000\056\000\
\056\000\057\000\057\000\058\000\058\000\058\000\058\000\058\000\
\036\000\036\000\045\000\046\000\046\000\047\000\050\000\051\000\
\052\000\053\000\049\000\048\000\048\000\048\000\059\000\059\000\
\022\000\022\000\055\000\055\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\060\000\060\000\
\054\000\054\000\054\000\000\000"

let yylen = "\002\000\
\004\000\003\000\002\000\001\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\006\000\003\000\
\001\000\003\000\000\000\002\000\003\000\001\000\001\000\001\000\
\003\000\001\000\004\000\003\000\001\000\005\000\005\000\009\000\
\011\000\001\000\000\000\003\000\001\000\001\000\000\000\002\000\
\005\000\004\000\001\000\001\000\001\000\001\000\001\000\004\000\
\003\000\003\000\003\000\001\000\003\000\008\000\007\000\002\000\
\003\000\001\000\003\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\000\000\004\000\
\006\000\006\000\003\000\004\000\003\000\007\000\005\000\005\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\001\000\004\000\008\000\008\000\004\000\002\000\002\000\
\002\000\002\000\005\000\007\000\005\000\009\000\001\000\003\000\
\003\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\004\000\004\000\003\000\001\000\003\000\
\001\000\003\000\000\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\156\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\004\000\005\000\006\000\007\000\
\008\000\000\000\000\000\122\000\028\000\000\000\031\000\032\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\085\000\
\086\000\000\000\000\000\079\000\123\000\069\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\078\000\080\000\
\081\000\082\000\083\000\084\000\000\000\001\000\002\000\034\000\
\037\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\009\000\010\000\011\000\013\000\012\000\000\000\121\000\020\000\
\000\000\000\000\000\000\000\000\000\000\022\000\051\000\021\000\
\000\000\052\000\053\000\054\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\144\000\143\000\146\000\142\000\
\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\111\000\112\000\000\000\000\000\000\000\000\000\093\000\000\000\
\000\000\000\000\000\000\035\000\000\000\000\000\068\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\139\000\
\140\000\138\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\124\000\
\033\000\000\000\036\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\065\000\100\000\101\000\102\000\104\000\
\103\000\099\000\000\000\000\000\098\000\000\000\058\000\000\000\
\057\000\000\000\067\000\049\000\092\000\000\000\000\000\000\000\
\000\000\150\000\147\000\000\000\000\000\134\000\135\000\136\000\
\000\000\000\000\000\000\000\000\000\000\000\000\107\000\000\000\
\137\000\000\000\088\000\000\000\000\000\154\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\
\000\000\000\000\000\000\105\000\061\000\056\000\059\000\000\000\
\000\000\149\000\148\000\000\000\000\000\000\000\000\000\095\000\
\000\000\000\000\000\000\117\000\115\000\000\000\000\000\026\000\
\000\000\024\000\016\000\017\000\019\000\018\000\000\000\000\000\
\000\000\152\000\090\000\089\000\000\000\000\000\120\000\000\000\
\000\000\040\000\014\000\015\000\023\000\000\000\000\000\000\000\
\000\000\094\000\116\000\000\000\000\000\000\000\108\000\109\000\
\096\000\000\000\041\000\063\000\000\000\000\000\118\000\064\000\
\062\000"

let yydgoto = "\002\000\
\004\000\005\000\011\000\052\000\012\000\013\000\014\000\015\000\
\016\000\094\000\029\001\015\001\095\000\096\000\186\000\187\000\
\238\000\022\000\023\000\024\000\074\000\025\000\075\000\120\000\
\076\000\239\000\027\000\097\000\098\000\099\000\100\000\101\000\
\140\000\141\000\142\000\231\000\046\001\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\121\000\069\000\232\000\
\196\000\197\000\234\000\210\000"

let yysindex = "\058\000\
\243\254\000\000\069\255\000\000\118\255\066\255\090\255\091\255\
\095\255\105\255\089\255\099\255\000\000\000\000\000\000\000\000\
\000\000\115\255\129\255\000\000\000\000\126\255\000\000\000\000\
\230\255\139\255\000\000\135\001\131\255\118\255\095\255\095\255\
\095\255\136\255\145\255\175\255\108\001\018\255\192\255\023\255\
\135\001\023\255\023\255\023\255\023\255\023\255\023\255\000\000\
\000\000\135\001\194\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\201\255\000\000\000\000\000\000\
\000\000\149\255\195\255\148\255\168\255\000\000\065\255\207\255\
\000\000\000\000\000\000\000\000\000\000\218\255\000\000\000\000\
\065\255\229\255\095\255\003\255\095\255\000\000\000\000\000\000\
\228\255\000\000\000\000\000\000\000\000\023\255\023\255\009\000\
\156\255\023\255\023\255\023\255\000\000\000\000\000\000\000\000\
\000\000\023\255\031\255\227\255\146\255\199\000\199\000\169\255\
\000\000\000\000\122\000\007\255\020\000\135\001\000\000\095\255\
\095\255\017\000\008\000\000\000\039\000\023\255\000\000\045\000\
\053\255\099\000\016\000\000\255\023\000\032\000\033\000\105\255\
\199\000\052\000\023\255\023\255\023\255\072\000\138\000\000\000\
\000\000\000\000\023\255\023\255\023\255\023\255\023\255\023\255\
\023\255\023\255\023\255\023\255\023\255\135\001\023\255\023\255\
\023\255\135\001\023\255\099\000\095\255\135\001\023\255\000\000\
\000\000\195\255\000\000\025\000\065\255\095\255\000\000\199\000\
\050\000\066\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\099\000\000\000\065\255\000\000\055\000\
\000\000\095\255\000\000\000\000\000\000\047\255\076\000\075\000\
\064\000\000\000\000\000\017\255\017\255\000\000\000\000\000\000\
\198\255\198\255\198\255\198\255\198\255\198\255\000\000\017\255\
\000\000\199\000\000\000\053\000\056\000\000\000\084\000\246\254\
\079\255\065\000\252\255\083\000\085\000\000\000\089\255\111\000\
\059\000\045\000\184\255\000\000\000\000\000\000\000\000\023\255\
\023\255\000\000\000\000\072\000\135\001\135\001\135\001\000\000\
\135\001\108\000\135\001\000\000\000\000\095\255\090\000\000\000\
\191\255\000\000\000\000\000\000\000\000\000\000\060\000\154\000\
\170\000\000\000\000\000\000\000\091\000\088\000\000\000\059\255\
\089\255\000\000\000\000\000\000\000\000\095\255\135\001\135\001\
\099\000\000\000\000\000\135\001\092\000\039\255\000\000\000\000\
\000\000\001\000\000\000\000\000\095\255\089\000\000\000\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000\000\000\000\000\
\000\000\000\000\000\000\006\000\000\000\101\000\121\000\121\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\096\000\000\000\000\000\000\000\043\000\043\000\000\000\000\000\
\000\000\134\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\123\000\124\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\125\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\
\242\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\160\000\235\000\147\001\
\000\000\000\000\000\000\000\000\000\000\009\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\254\
\000\000\000\000\000\000\000\000\000\000\251\255\000\000\127\000\
\008\001\000\000\000\000\136\000\109\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\001\000\000\000\000\
\000\000\068\001\210\001\000\000\000\000\006\000\136\000\000\000\
\000\000\140\000\000\000\000\000\000\000\133\000\000\000\197\255\
\000\000\000\000\151\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\054\000\000\000\000\000\215\000\019\001\000\000\000\000\000\000\
\188\001\243\001\042\002\097\002\152\002\207\002\000\000\079\001\
\000\000\083\001\000\000\239\255\240\255\000\000\000\000\000\000\
\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\254\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\068\001\068\001\144\000\000\000\
\135\000\000\000\176\255\000\000\000\000\133\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\068\001\068\001\
\002\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\154\001\245\255\000\000\000\000\000\000\000\000\
\000\000\223\255\000\000\000\000\182\255\000\000\207\000\000\000\
\004\000\000\000\246\255\236\255\000\000\171\255\057\001\232\255\
\165\001\192\000\059\001\000\000\000\000\000\000\000\000\000\000\
\173\255\061\001\000\000\122\255\000\000\216\255\034\001\035\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\255\255\209\255\180\000\
\000\000\000\000\000\000\218\000"

let yytablesize = 1045
let yytable = "\029\000\
\116\000\086\000\124\000\195\000\132\000\137\000\139\000\139\000\
\020\000\143\000\073\000\073\000\021\000\027\000\135\000\115\000\
\003\000\117\000\118\000\119\000\072\000\072\000\123\000\000\001\
\027\000\157\000\158\000\159\000\105\000\102\000\103\000\001\001\
\126\000\199\000\087\000\106\000\078\000\155\000\156\000\157\000\
\158\000\159\000\087\000\180\000\122\000\107\000\108\000\160\000\
\161\000\162\000\163\000\164\000\165\000\155\000\156\000\157\000\
\158\000\159\000\001\000\138\000\109\000\244\000\138\000\160\000\
\161\000\162\000\163\000\164\000\165\000\110\000\088\000\173\000\
\044\001\087\000\006\000\166\000\174\000\145\000\087\000\036\000\
\045\001\151\000\152\000\153\000\126\000\176\000\188\000\233\000\
\111\000\154\000\168\000\017\000\035\001\112\000\113\000\018\000\
\019\000\114\000\248\000\249\000\020\000\146\000\081\000\167\000\
\168\000\036\000\237\000\073\000\179\000\184\000\026\000\082\000\
\083\000\084\000\085\000\090\000\139\000\177\000\247\000\167\000\
\168\000\028\000\206\000\245\000\030\000\223\000\235\000\031\000\
\036\001\227\000\212\000\213\000\214\000\215\000\216\000\217\000\
\218\000\219\000\220\000\221\000\222\000\032\000\224\000\225\000\
\226\000\002\001\207\000\208\000\007\000\008\000\080\000\033\000\
\155\000\156\000\157\000\158\000\159\000\037\000\070\000\087\000\
\079\000\130\000\160\000\161\000\162\000\163\000\164\000\165\000\
\148\000\230\000\149\000\009\000\010\000\236\000\128\000\155\000\
\156\000\157\000\158\000\159\000\087\000\131\000\081\000\150\000\
\170\000\160\000\161\000\162\000\163\000\164\000\165\000\082\000\
\083\000\084\000\085\000\171\000\027\001\104\000\087\000\125\000\
\139\000\087\000\038\001\087\000\155\000\156\000\157\000\158\000\
\159\000\087\000\038\000\024\001\019\001\020\001\021\001\139\000\
\022\001\048\001\167\000\168\000\129\000\011\001\038\000\016\001\
\017\001\133\000\126\000\007\001\081\000\038\000\012\001\028\001\
\013\001\014\001\127\000\034\000\134\000\082\000\083\000\084\000\
\085\000\167\000\168\000\136\000\042\001\087\000\039\001\040\001\
\145\000\145\000\145\000\145\000\145\000\144\000\035\000\145\000\
\036\000\145\000\145\000\145\000\145\000\145\000\145\000\145\000\
\069\000\070\000\169\000\145\000\145\000\037\001\167\000\168\000\
\069\000\070\000\145\000\145\000\147\000\126\000\069\000\070\000\
\145\000\145\000\126\000\145\000\060\000\004\001\145\000\087\000\
\175\000\182\000\047\001\097\000\060\000\145\000\145\000\087\000\
\198\000\181\000\036\000\097\000\183\000\185\000\145\000\069\000\
\070\000\035\000\145\000\036\000\069\000\070\000\060\000\145\000\
\201\000\202\000\145\000\145\000\151\000\151\000\151\000\151\000\
\151\000\205\000\203\000\151\000\155\000\151\000\151\000\151\000\
\151\000\151\000\151\000\151\000\155\000\209\000\240\000\151\000\
\151\000\241\000\155\000\242\000\155\000\243\000\151\000\151\000\
\246\000\250\000\251\000\252\000\151\000\151\000\253\000\151\000\
\005\001\254\000\151\000\189\000\190\000\191\000\192\000\193\000\
\194\000\151\000\151\000\155\000\255\000\003\001\006\001\008\001\
\155\000\023\001\151\000\026\001\033\001\043\001\151\000\009\001\
\030\001\034\001\049\001\151\000\155\000\030\000\151\000\151\000\
\155\000\156\000\157\000\158\000\159\000\003\000\047\000\087\000\
\045\000\046\000\160\000\161\000\162\000\163\000\164\000\165\000\
\155\000\156\000\157\000\158\000\159\000\155\000\066\000\211\000\
\050\000\044\000\160\000\161\000\162\000\163\000\164\000\165\000\
\155\000\156\000\157\000\158\000\159\000\043\000\025\000\106\000\
\087\000\087\000\160\000\161\000\162\000\163\000\164\000\165\000\
\155\000\156\000\157\000\158\000\159\000\119\000\172\000\071\000\
\178\000\113\000\160\000\161\000\162\000\163\000\164\000\165\000\
\010\001\113\000\167\000\168\000\077\000\025\001\031\001\113\000\
\200\000\113\000\204\000\228\000\229\000\155\000\156\000\157\000\
\158\000\159\000\167\000\168\000\041\001\018\001\032\001\160\000\
\161\000\162\000\163\000\164\000\165\000\131\000\131\000\000\000\
\113\000\000\000\167\000\168\000\131\000\113\000\131\000\131\000\
\131\000\131\000\131\000\131\000\131\000\000\000\000\000\000\000\
\131\000\131\000\167\000\168\000\000\000\000\000\000\000\131\000\
\131\000\000\000\000\000\000\000\000\000\131\000\131\000\000\000\
\131\000\000\000\000\000\131\000\114\000\000\000\000\000\000\000\
\000\000\000\000\131\000\131\000\114\000\000\000\000\000\167\000\
\168\000\000\000\114\000\131\000\114\000\000\000\000\000\131\000\
\000\000\132\000\132\000\000\000\131\000\000\000\000\000\131\000\
\132\000\091\000\132\000\132\000\132\000\132\000\132\000\132\000\
\132\000\091\000\000\000\114\000\132\000\132\000\000\000\091\000\
\114\000\091\000\000\000\132\000\132\000\000\000\000\000\000\000\
\000\000\132\000\132\000\000\000\132\000\000\000\000\000\132\000\
\000\000\000\000\000\000\000\000\000\000\000\000\132\000\132\000\
\091\000\000\000\000\000\000\000\000\000\091\000\000\000\132\000\
\000\000\000\000\000\000\132\000\000\000\133\000\133\000\000\000\
\132\000\000\000\000\000\132\000\133\000\087\000\133\000\133\000\
\133\000\133\000\133\000\133\000\133\000\087\000\000\000\000\000\
\133\000\133\000\000\000\087\000\110\000\087\000\000\000\133\000\
\133\000\088\000\000\000\000\000\110\000\133\000\133\000\000\000\
\133\000\000\000\110\000\133\000\110\000\000\000\000\000\000\000\
\000\000\000\000\133\000\133\000\087\000\000\000\000\000\000\000\
\000\000\087\000\000\000\133\000\038\000\000\000\000\000\133\000\
\000\000\081\000\000\000\110\000\133\000\000\000\000\000\133\000\
\110\000\089\000\082\000\083\000\084\000\085\000\090\000\000\000\
\153\000\000\000\153\000\091\000\092\000\000\000\000\000\028\000\
\000\000\039\000\040\000\041\000\153\000\000\000\000\000\042\000\
\093\000\043\000\044\000\000\000\153\000\000\000\000\000\000\000\
\000\000\000\000\153\000\000\000\153\000\000\000\000\000\000\000\
\045\000\046\000\047\000\000\000\048\000\049\000\050\000\000\000\
\000\000\125\000\051\000\125\000\125\000\125\000\125\000\125\000\
\125\000\125\000\000\000\153\000\000\000\125\000\125\000\000\000\
\153\000\000\000\000\000\000\000\125\000\125\000\000\000\155\000\
\000\000\155\000\125\000\125\000\000\000\125\000\000\000\000\000\
\125\000\000\000\000\000\155\000\000\000\000\000\000\000\125\000\
\125\000\000\000\000\000\155\000\000\000\000\000\000\000\000\000\
\125\000\155\000\000\000\155\000\125\000\000\000\000\000\000\000\
\126\000\125\000\126\000\126\000\126\000\126\000\126\000\126\000\
\126\000\000\000\000\000\000\000\126\000\126\000\000\000\000\000\
\000\000\000\000\155\000\126\000\126\000\000\000\000\000\155\000\
\000\000\126\000\126\000\000\000\126\000\000\000\000\000\126\000\
\000\000\000\000\000\000\000\000\000\000\000\000\126\000\126\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\126\000\
\000\000\000\000\000\000\126\000\000\000\000\000\000\000\127\000\
\126\000\127\000\127\000\127\000\127\000\127\000\127\000\127\000\
\000\000\000\000\000\000\127\000\127\000\000\000\000\000\000\000\
\000\000\000\000\127\000\127\000\000\000\000\000\000\000\000\000\
\127\000\127\000\000\000\127\000\000\000\000\000\127\000\000\000\
\000\000\000\000\000\000\000\000\000\000\127\000\127\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\127\000\000\000\
\000\000\000\000\127\000\000\000\000\000\000\000\130\000\127\000\
\130\000\130\000\130\000\130\000\130\000\130\000\130\000\000\000\
\000\000\000\000\130\000\130\000\000\000\000\000\000\000\000\000\
\000\000\130\000\130\000\000\000\000\000\000\000\000\000\130\000\
\130\000\000\000\130\000\000\000\000\000\130\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\000\130\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\000\
\000\000\130\000\000\000\000\000\000\000\128\000\130\000\128\000\
\128\000\128\000\128\000\128\000\128\000\128\000\000\000\000\000\
\000\000\128\000\128\000\000\000\000\000\000\000\000\000\000\000\
\128\000\128\000\000\000\000\000\000\000\000\000\128\000\128\000\
\000\000\128\000\000\000\000\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\128\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\
\128\000\000\000\000\000\000\000\129\000\128\000\129\000\129\000\
\129\000\129\000\129\000\129\000\129\000\000\000\000\000\000\000\
\129\000\129\000\000\000\000\000\000\000\000\000\000\000\129\000\
\129\000\000\000\000\000\000\000\000\000\129\000\129\000\000\000\
\129\000\000\000\000\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\129\000\129\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\129\000\000\000\000\000\000\000\129\000\
\000\000\000\000\000\000\000\000\129\000"

let yycheck = "\011\000\
\041\000\035\000\050\000\138\000\079\000\091\000\092\000\093\000\
\006\001\093\000\031\000\032\000\009\000\016\001\089\000\040\000\
\030\001\042\000\043\000\044\000\031\000\032\000\047\000\034\001\
\027\001\009\001\010\001\011\001\006\001\012\001\013\001\042\001\
\026\001\034\001\026\001\013\001\033\000\007\001\008\001\009\001\
\010\001\011\001\034\001\129\000\046\000\023\001\024\001\017\001\
\018\001\019\001\020\001\021\001\022\001\007\001\008\001\009\001\
\010\001\011\001\001\000\060\001\038\001\196\000\060\001\017\001\
\018\001\019\001\020\001\021\001\022\001\047\001\006\001\065\001\
\034\001\065\001\006\001\045\001\070\001\102\000\070\001\027\001\
\042\001\106\000\107\000\108\000\026\001\126\000\034\001\173\000\
\066\001\114\000\074\001\026\001\034\001\071\001\072\001\006\001\
\006\001\075\001\052\001\053\001\006\001\103\000\038\001\073\001\
\074\001\027\001\181\000\128\000\129\000\134\000\006\001\047\001\
\048\001\049\001\050\001\051\001\202\000\128\000\202\000\073\001\
\074\001\033\001\147\000\198\000\026\001\166\000\174\000\013\001\
\070\001\170\000\155\000\156\000\157\000\158\000\159\000\160\000\
\161\000\162\000\163\000\164\000\165\000\013\001\167\000\168\000\
\169\000\067\001\148\000\149\000\031\001\032\001\006\001\026\001\
\007\001\008\001\009\001\010\001\011\001\019\001\028\001\026\001\
\025\001\014\001\017\001\018\001\019\001\020\001\021\001\022\001\
\013\001\171\000\015\001\054\001\055\001\175\000\026\001\007\001\
\008\001\009\001\010\001\011\001\006\001\014\001\038\001\028\001\
\039\001\017\001\018\001\019\001\020\001\021\001\022\001\047\001\
\048\001\049\001\050\001\027\001\006\001\006\001\065\001\006\001\
\030\001\026\001\030\001\070\001\007\001\008\001\009\001\010\001\
\011\001\034\001\014\001\003\001\253\000\254\000\255\000\045\001\
\001\001\045\001\073\001\074\001\026\001\038\001\026\001\248\000\
\249\000\019\001\026\001\239\000\038\001\033\001\047\001\009\001\
\049\001\050\001\034\001\006\001\019\001\047\001\048\001\049\001\
\050\001\073\001\074\001\015\001\036\001\070\001\031\001\032\001\
\007\001\008\001\009\001\010\001\011\001\026\001\025\001\014\001\
\027\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\026\001\026\001\040\001\026\001\027\001\025\001\073\001\074\001\
\034\001\034\001\033\001\034\001\012\001\026\001\040\001\040\001\
\039\001\040\001\026\001\042\001\034\001\034\001\045\001\026\001\
\013\001\026\001\034\001\034\001\042\001\052\001\053\001\034\001\
\025\001\025\001\027\001\042\001\006\001\001\001\061\001\065\001\
\065\001\025\001\065\001\027\001\070\001\070\001\060\001\070\001\
\034\001\026\001\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\014\001\034\001\014\001\026\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\006\001\029\001\026\001\
\027\001\016\001\040\001\027\001\042\001\025\001\033\001\034\001\
\034\001\014\001\016\001\028\001\039\001\040\001\042\001\042\001\
\014\001\042\001\045\001\001\001\002\001\003\001\004\001\005\001\
\006\001\052\001\053\001\065\001\025\001\045\001\026\001\001\001\
\070\001\006\001\061\001\026\001\026\001\026\001\065\001\061\001\
\061\001\034\001\034\001\070\001\016\001\033\001\073\001\074\001\
\007\001\008\001\009\001\010\001\011\001\033\001\014\001\040\001\
\014\001\014\001\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\014\001\026\001\014\001\
\026\001\014\001\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\033\001\016\001\025\001\
\034\001\026\001\017\001\018\001\019\001\020\001\021\001\022\001\
\007\001\008\001\009\001\010\001\011\001\045\001\061\001\030\000\
\128\000\026\001\017\001\018\001\019\001\020\001\021\001\022\001\
\242\000\034\001\073\001\074\001\032\000\006\001\045\001\040\001\
\140\000\042\001\144\000\170\000\170\000\007\001\008\001\009\001\
\010\001\011\001\073\001\074\001\033\001\252\000\045\001\017\001\
\018\001\019\001\020\001\021\001\022\001\007\001\008\001\255\255\
\065\001\255\255\073\001\074\001\014\001\070\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\073\001\074\001\255\255\255\255\255\255\033\001\
\034\001\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\255\255\255\255\045\001\026\001\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\034\001\255\255\255\255\073\001\
\074\001\255\255\040\001\061\001\042\001\255\255\255\255\065\001\
\255\255\007\001\008\001\255\255\070\001\255\255\255\255\073\001\
\014\001\026\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\034\001\255\255\065\001\026\001\027\001\255\255\040\001\
\070\001\042\001\255\255\033\001\034\001\255\255\255\255\255\255\
\255\255\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\065\001\255\255\255\255\255\255\255\255\070\001\255\255\061\001\
\255\255\255\255\255\255\065\001\255\255\007\001\008\001\255\255\
\070\001\255\255\255\255\073\001\014\001\026\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\034\001\255\255\255\255\
\026\001\027\001\255\255\040\001\026\001\042\001\255\255\033\001\
\034\001\006\001\255\255\255\255\034\001\039\001\040\001\255\255\
\042\001\255\255\040\001\045\001\042\001\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\065\001\255\255\255\255\255\255\
\255\255\070\001\255\255\061\001\006\001\255\255\255\255\065\001\
\255\255\038\001\255\255\065\001\070\001\255\255\255\255\073\001\
\070\001\046\001\047\001\048\001\049\001\050\001\051\001\255\255\
\014\001\255\255\016\001\056\001\057\001\255\255\255\255\033\001\
\255\255\035\001\036\001\037\001\026\001\255\255\255\255\041\001\
\069\001\043\001\044\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\040\001\255\255\042\001\255\255\255\255\255\255\
\058\001\059\001\060\001\255\255\062\001\063\001\064\001\255\255\
\255\255\014\001\068\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\065\001\255\255\026\001\027\001\255\255\
\070\001\255\255\255\255\255\255\033\001\034\001\255\255\014\001\
\255\255\016\001\039\001\040\001\255\255\042\001\255\255\255\255\
\045\001\255\255\255\255\026\001\255\255\255\255\255\255\052\001\
\053\001\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\061\001\040\001\255\255\042\001\065\001\255\255\255\255\255\255\
\014\001\070\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\255\255\065\001\033\001\034\001\255\255\255\255\070\001\
\255\255\039\001\040\001\255\255\042\001\255\255\255\255\045\001\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\001\
\255\255\255\255\255\255\065\001\255\255\255\255\255\255\014\001\
\070\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\255\255\
\255\255\255\255\033\001\034\001\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\255\255\255\255\065\001\255\255\255\255\255\255\014\001\070\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\033\001\034\001\255\255\255\255\255\255\255\255\039\001\
\040\001\255\255\042\001\255\255\255\255\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\255\255\065\001\255\255\255\255\255\255\014\001\070\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\033\001\034\001\255\255\255\255\255\255\255\255\039\001\040\001\
\255\255\042\001\255\255\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\053\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\255\255\255\255\
\065\001\255\255\255\255\255\255\014\001\070\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\033\001\
\034\001\255\255\255\255\255\255\255\255\039\001\040\001\255\255\
\042\001\255\255\255\255\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\061\001\255\255\255\255\255\255\065\001\
\255\255\255\255\255\255\255\255\070\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  MOD\000\
  ASG\000\
  LPAR\000\
  RPAR\000\
  LBRA\000\
  RBRA\000\
  GT\000\
  LT\000\
  EQUAL\000\
  NOTEQ\000\
  GTEQ\000\
  LTEQ\000\
  GETREF\000\
  DEREF\000\
  COLON\000\
  SCOLON\000\
  COMMA\000\
  DOT\000\
  RANGE\000\
  PROGRAM\000\
  FUNCTION\000\
  PROCEDURE\000\
  BEGIN\000\
  END\000\
  FOR\000\
  WHILE\000\
  REPEAT\000\
  INTEGER\000\
  THEN\000\
  UNTIL\000\
  IF\000\
  ELSE\000\
  INC\000\
  DEC\000\
  DO\000\
  REF\000\
  REAL\000\
  STRING\000\
  BOOLEAN\000\
  CHARACTER\000\
  ARRAY\000\
  TO\000\
  DOWNTO\000\
  VAR\000\
  TYPE\000\
  ENUMERATE\000\
  RECORD\000\
  WRITE\000\
  READ\000\
  CASE\000\
  OF\000\
  BREAK\000\
  CONTINUE\000\
  TRY\000\
  EXCEPT\000\
  NIL\000\
  AS\000\
  RAISE\000\
  EXCEPTION\000\
  FINALLY\000\
  FALSE\000\
  TRUE\000\
  "

let yynames_block = "\
  ICONST\000\
  RCONST\000\
  BCONST\000\
  CCONST\000\
  SCONST\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'program_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 36 "parser.mly"
                                                                       ( print_endline "Parse Successfully.";; )
# 697 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'global_declaration_list) in
    Obj.repr(
# 40 "parser.mly"
                                                        ()
# 705 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global_declaration) in
    Obj.repr(
# 41 "parser.mly"
                                ()
# 712 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 45 "parser.mly"
                           ()
# 719 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_definition) in
    Obj.repr(
# 46 "parser.mly"
                           ()
# 726 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 47 "parser.mly"
                          ()
# 733 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition) in
    Obj.repr(
# 48 "parser.mly"
                      ()
# 740 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 52 "parser.mly"
                      ()
# 747 "parser.ml"
               : 'program_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
              ()
# 753 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
             ()
# 759 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
             ()
# 765 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                ()
# 771 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
              ()
# 777 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
         ()
# 784 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 67 "parser.mly"
                  ()
# 791 "parser.ml"
               : 'any_named_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
              ()
# 797 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
           ()
# 803 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                ()
# 809 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
              ()
# 815 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
         ()
# 822 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 79 "parser.mly"
                 ()
# 829 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 80 "parser.mly"
                  ()
# 836 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'range_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'any_named_type) in
    Obj.repr(
# 83 "parser.mly"
                                                 ()
# 844 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range_list) in
    Obj.repr(
# 87 "parser.mly"
                             ()
# 852 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range) in
    Obj.repr(
# 88 "parser.mly"
            ()
# 859 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 92 "parser.mly"
                          ()
# 867 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
      ()
# 873 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 97 "parser.mly"
                            ()
# 880 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declr_or_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 101 "parser.mly"
                                               ()
# 888 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'declr_or_init) in
    Obj.repr(
# 102 "parser.mly"
                    ()
# 895 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 106 "parser.mly"
                ()
# 902 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 107 "parser.mly"
               ()
# 909 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 111 "parser.mly"
                                      ()
# 917 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 112 "parser.mly"
                ()
# 924 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 116 "parser.mly"
                              ()
# 933 "parser.ml"
               : 'var_declr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_init_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 120 "parser.mly"
                                   ()
# 941 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 121 "parser.mly"
               ()
# 948 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'simple_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 129 "parser.mly"
                                                  ()
# 957 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
                                ()
# 966 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 134 "parser.mly"
                                                                                            ()
# 976 "parser.ml"
               : 'procedure_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'any_type) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 138 "parser.mly"
                                                                                                          ()
# 987 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 142 "parser.mly"
                          ()
# 994 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parser.mly"
      ()
# 1000 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 147 "parser.mly"
                                          ()
# 1008 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr_list) in
    Obj.repr(
# 148 "parser.mly"
                     ()
# 1015 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 149 "parser.mly"
                    ()
# 1022 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
                       ()
# 1028 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 154 "parser.mly"
                              ()
# 1035 "parser.ml"
               : 'type_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 158 "parser.mly"
                                                     ()
# 1044 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_body) in
    Obj.repr(
# 159 "parser.mly"
                                ()
# 1052 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 163 "parser.mly"
               ()
# 1059 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record_body) in
    Obj.repr(
# 164 "parser.mly"
                  ()
# 1066 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumerate_body) in
    Obj.repr(
# 165 "parser.mly"
                     ()
# 1073 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exception_body) in
    Obj.repr(
# 166 "parser.mly"
                     ()
# 1080 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference_body) in
    Obj.repr(
# 167 "parser.mly"
                     ()
# 1087 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 171 "parser.mly"
                                               ()
# 1095 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variant_part) in
    Obj.repr(
# 172 "parser.mly"
                              ()
# 1102 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 173 "parser.mly"
                                  ()
# 1109 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 177 "parser.mly"
                                          ()
# 1117 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field) in
    Obj.repr(
# 178 "parser.mly"
                  ()
# 1124 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 182 "parser.mly"
                           ()
# 1132 "parser.ml"
               : 'fixed_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'variant_else_part) in
    Obj.repr(
# 186 "parser.mly"
                                                                                             ()
# 1142 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 187 "parser.mly"
                                                                           ()
# 1151 "parser.ml"
               : 'variant_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 191 "parser.mly"
                           ()
# 1158 "parser.ml"
               : 'variant_else_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 195 "parser.mly"
                          ()
# 1165 "parser.ml"
               : 'enumerate_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "parser.mly"
                ()
# 1171 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 200 "parser.mly"
                                     ()
# 1178 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 204 "parser.mly"
                 ()
# 1185 "parser.ml"
               : 'reference_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'other_statement) in
    Obj.repr(
# 210 "parser.mly"
                      ()
# 1192 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_then_else_statement) in
    Obj.repr(
# 211 "parser.mly"
                             ()
# 1199 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_then_statement) in
    Obj.repr(
# 212 "parser.mly"
                        ()
# 1206 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment_statement) in
    Obj.repr(
# 215 "parser.mly"
                           ()
# 1213 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_statement) in
    Obj.repr(
# 216 "parser.mly"
                          ()
# 1220 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'case_of_statement) in
    Obj.repr(
# 217 "parser.mly"
                        ()
# 1227 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_do_statement) in
    Obj.repr(
# 218 "parser.mly"
                         ()
# 1234 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_statement) in
    Obj.repr(
# 219 "parser.mly"
                    ()
# 1241 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'repeat_until_statement) in
    Obj.repr(
# 220 "parser.mly"
                             ()
# 1248 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'try_except_statement) in
    Obj.repr(
# 221 "parser.mly"
                           ()
# 1255 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'compound_statement) in
    Obj.repr(
# 222 "parser.mly"
                         ()
# 1262 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'raise_statement) in
    Obj.repr(
# 223 "parser.mly"
                      ()
# 1269 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'write_statement) in
    Obj.repr(
# 224 "parser.mly"
                      ()
# 1276 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'read_statement) in
    Obj.repr(
# 225 "parser.mly"
                     ()
# 1283 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'inc_statement) in
    Obj.repr(
# 226 "parser.mly"
                    ()
# 1290 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec_statement) in
    Obj.repr(
# 227 "parser.mly"
                    ()
# 1297 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "parser.mly"
            ()
# 1303 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 229 "parser.mly"
               ()
# 1309 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 230 "parser.mly"
      ()
# 1315 "parser.ml"
               : 'other_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 233 "parser.mly"
                                                ()
# 1323 "parser.ml"
               : 'if_then_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'if_then_else_statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 236 "parser.mly"
                                                               ()
# 1332 "parser.ml"
               : 'if_then_else_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'other_statement) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 237 "parser.mly"
                                                        ()
# 1341 "parser.ml"
               : 'if_then_else_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 241 "parser.mly"
                      ()
# 1349 "parser.ml"
               : 'assignment_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 245 "parser.mly"
                                 ()
# 1357 "parser.ml"
               : 'procedure_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 249 "parser.mly"
                             ()
# 1364 "parser.ml"
               : 'compound_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'case_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 253 "parser.mly"
                                                      ()
# 1373 "parser.ml"
               : 'case_of_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'case_part) in
    Obj.repr(
# 254 "parser.mly"
                                       ()
# 1381 "parser.ml"
               : 'case_of_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_part) in
    Obj.repr(
# 259 "parser.mly"
                                                            ()
# 1390 "parser.ml"
               : 'case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 260 "parser.mly"
                                                  ()
# 1398 "parser.ml"
               : 'case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 264 "parser.mly"
              ()
# 1405 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 265 "parser.mly"
         ()
# 1412 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 269 "parser.mly"
             ()
# 1419 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 270 "parser.mly"
             ()
# 1426 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 271 "parser.mly"
             ()
# 1433 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 272 "parser.mly"
             ()
# 1440 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 273 "parser.mly"
             ()
# 1447 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'literal_or_enum) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum_list) in
    Obj.repr(
# 277 "parser.mly"
                                           ()
# 1455 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum) in
    Obj.repr(
# 278 "parser.mly"
                      ()
# 1462 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 282 "parser.mly"
                                  ()
# 1470 "parser.ml"
               : 'while_do_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 286 "parser.mly"
                                                       ()
# 1480 "parser.ml"
               : 'for_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 287 "parser.mly"
                                                           ()
# 1490 "parser.ml"
               : 'for_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 291 "parser.mly"
                                        ()
# 1498 "parser.ml"
               : 'repeat_until_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 295 "parser.mly"
                          ()
# 1505 "parser.ml"
               : 'write_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 299 "parser.mly"
                         ()
# 1512 "parser.ml"
               : 'read_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 303 "parser.mly"
                   ()
# 1519 "parser.ml"
               : 'inc_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 307 "parser.mly"
                   ()
# 1526 "parser.ml"
               : 'dec_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 311 "parser.mly"
                                        ()
# 1534 "parser.ml"
               : 'raise_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'statement_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 315 "parser.mly"
                                                                     ()
# 1543 "parser.ml"
               : 'try_except_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'statement_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 316 "parser.mly"
                                                    ()
# 1551 "parser.ml"
               : 'try_except_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : 'statement_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : 'statement_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 317 "parser.mly"
                                                                                            ()
# 1561 "parser.ml"
               : 'try_except_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 321 "parser.mly"
              ()
# 1568 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 322 "parser.mly"
                    ()
# 1576 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 326 "parser.mly"
                       ()
# 1584 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 327 "parser.mly"
         ()
# 1591 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 331 "parser.mly"
                ()
# 1598 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 332 "parser.mly"
                                      ()
# 1606 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 338 "parser.mly"
                                 ()
# 1614 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 339 "parser.mly"
                                 ()
# 1622 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 340 "parser.mly"
                                  ()
# 1630 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 341 "parser.mly"
                                 ()
# 1638 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 342 "parser.mly"
                                 ()
# 1646 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 343 "parser.mly"
                                  ()
# 1654 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 344 "parser.mly"
                                  ()
# 1662 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 345 "parser.mly"
                                  ()
# 1670 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 346 "parser.mly"
                                  ()
# 1678 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 347 "parser.mly"
                                ()
# 1686 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 348 "parser.mly"
                                ()
# 1694 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 349 "parser.mly"
                                ()
# 1702 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 350 "parser.mly"
                                ()
# 1710 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 351 "parser.mly"
                     ()
# 1717 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 352 "parser.mly"
                        ()
# 1724 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 353 "parser.mly"
                        ()
# 1731 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 354 "parser.mly"
           ()
# 1737 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 355 "parser.mly"
            ()
# 1743 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 356 "parser.mly"
           ()
# 1749 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 357 "parser.mly"
              ()
# 1755 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 358 "parser.mly"
         ()
# 1762 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 359 "parser.mly"
          ()
# 1768 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 360 "parser.mly"
                           ()
# 1775 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 361 "parser.mly"
                                                  ()
# 1783 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 362 "parser.mly"
                                                  ()
# 1791 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 363 "parser.mly"
                   ()
# 1799 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 367 "parser.mly"
         ()
# 1806 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 368 "parser.mly"
                   ()
# 1814 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 372 "parser.mly"
               ()
# 1821 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 373 "parser.mly"
                                       ()
# 1829 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 374 "parser.mly"
      ()
# 1835 "parser.ml"
               : 'expression_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
