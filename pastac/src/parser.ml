type token =
  | ICONST of (int)
  | RCONST of (float)
  | BCONST of (bool)
  | CCONST of (char)
  | SCONST of (string)
  | ID of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | MOD
  | ASG
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | GT
  | LT
  | EQUAL
  | NOTEQ
  | GTEQ
  | LTEQ
  | GETREF
  | DEREF
  | COLON
  | SCOLON
  | COMMA
  | DOT
  | RANGE
  | PROGRAM
  | FUNCTION
  | PROCEDURE
  | BEGIN
  | END
  | FOR
  | WHILE
  | REPEAT
  | INTEGER
  | THEN
  | UNTIL
  | IF
  | ELSE
  | INC
  | DEC
  | DO
  | REF
  | REAL
  | STRING
  | BOOLEAN
  | CHARACTER
  | ARRAY
  | TO
  | DOWNTO
  | VAR
  | TYPE
  | ENUMERATE
  | RECORD
  | WRITE
  | READ
  | CASE
  | OF
  | BREAK
  | CONTINUE
  | TRY
  | EXCEPT
  | NIL
  | AS
  | RAISE
  | EXCEPTION
  | FINALLY
  | FALSE
  | TRUE
  | OR
  | AND

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  263 (* ADD *);
  264 (* SUB *);
  265 (* MUL *);
  266 (* DIV *);
  267 (* MOD *);
  268 (* ASG *);
  269 (* LPAR *);
  270 (* RPAR *);
  271 (* LBRA *);
  272 (* RBRA *);
  273 (* GT *);
  274 (* LT *);
  275 (* EQUAL *);
  276 (* NOTEQ *);
  277 (* GTEQ *);
  278 (* LTEQ *);
  279 (* GETREF *);
  280 (* DEREF *);
  281 (* COLON *);
  282 (* SCOLON *);
  283 (* COMMA *);
  284 (* DOT *);
  285 (* RANGE *);
  286 (* PROGRAM *);
  287 (* FUNCTION *);
  288 (* PROCEDURE *);
  289 (* BEGIN *);
  290 (* END *);
  291 (* FOR *);
  292 (* WHILE *);
  293 (* REPEAT *);
  294 (* INTEGER *);
  295 (* THEN *);
  296 (* UNTIL *);
  297 (* IF *);
  298 (* ELSE *);
  299 (* INC *);
  300 (* DEC *);
  301 (* DO *);
  302 (* REF *);
  303 (* REAL *);
  304 (* STRING *);
  305 (* BOOLEAN *);
  306 (* CHARACTER *);
  307 (* ARRAY *);
  308 (* TO *);
  309 (* DOWNTO *);
  310 (* VAR *);
  311 (* TYPE *);
  312 (* ENUMERATE *);
  313 (* RECORD *);
  314 (* WRITE *);
  315 (* READ *);
  316 (* CASE *);
  317 (* OF *);
  318 (* BREAK *);
  319 (* CONTINUE *);
  320 (* TRY *);
  321 (* EXCEPT *);
  322 (* NIL *);
  323 (* AS *);
  324 (* RAISE *);
  325 (* EXCEPTION *);
  326 (* FINALLY *);
  327 (* FALSE *);
  328 (* TRUE *);
  329 (* OR *);
  330 (* AND *);
    0|]

let yytransl_block = [|
  257 (* ICONST *);
  258 (* RCONST *);
  259 (* BCONST *);
  260 (* CCONST *);
  261 (* SCONST *);
  262 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\005\000\005\000\005\000\005\000\
\002\000\010\000\010\000\010\000\010\000\010\000\011\000\011\000\
\011\000\013\000\013\000\013\000\013\000\014\000\014\000\015\000\
\015\000\016\000\016\000\017\000\017\000\006\000\018\000\018\000\
\019\000\019\000\020\000\021\000\021\000\007\000\008\000\025\000\
\025\000\024\000\024\000\024\000\024\000\026\000\026\000\027\000\
\027\000\009\000\028\000\028\000\029\000\029\000\029\000\029\000\
\032\000\032\000\030\000\030\000\030\000\033\000\033\000\035\000\
\034\000\034\000\037\000\037\000\039\000\038\000\031\000\012\000\
\036\000\036\000\036\000\036\000\036\000\036\000\041\000\041\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\044\000\044\000\048\000\048\000\049\000\049\000\049\000\049\000\
\049\000\040\000\040\000\046\000\046\000\022\000\022\000\004\000\
\045\000\045\000\023\000\023\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\052\000\052\000\
\050\000\050\000\050\000\050\000\050\000\050\000\047\000\047\000\
\047\000\000\000"

let yylen = "\002\000\
\004\000\003\000\002\000\001\000\001\000\001\000\001\000\001\000\
\003\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\006\000\003\000\003\000\
\001\000\003\000\000\000\001\000\002\000\002\000\003\000\002\000\
\001\000\001\000\003\000\005\000\005\000\009\000\011\000\001\000\
\000\000\003\000\001\000\001\000\000\000\003\000\001\000\003\000\
\001\000\002\000\005\000\004\000\001\000\001\000\001\000\001\000\
\001\000\003\000\003\000\004\000\003\000\002\000\001\000\004\000\
\007\000\006\000\001\000\002\000\005\000\002\000\003\000\002\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\006\000\006\000\003\000\004\000\003\000\008\000\008\000\004\000\
\005\000\004\000\008\000\005\000\002\000\002\000\002\000\002\000\
\002\000\001\000\001\000\004\000\000\000\004\000\006\000\004\000\
\008\000\008\000\004\000\006\000\004\000\006\000\005\000\007\000\
\005\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\001\000\003\000\003\000\001\000\003\000\
\001\000\003\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\001\000\001\000\004\000\003\000\002\000\
\001\000\003\000\002\000\002\000\004\000\003\000\001\000\003\000\
\000\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\162\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\
\007\000\008\000\009\000\000\000\000\000\117\000\118\000\119\000\
\121\000\120\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\098\000\099\000\000\000\149\000\000\000\000\000\000\000\129\000\
\079\000\080\000\000\000\148\000\000\000\132\000\133\000\127\000\
\030\000\000\000\033\000\034\000\000\000\000\000\050\000\000\000\
\002\000\003\000\000\000\000\000\000\000\153\000\000\000\000\000\
\000\000\152\000\155\000\156\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\094\000\095\000\
\000\000\000\000\000\000\000\000\147\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\047\000\049\000\000\000\000\000\
\000\000\000\000\000\000\154\000\151\000\085\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\143\000\144\000\145\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\146\000\130\000\000\000\158\000\031\000\000\000\010\000\000\000\
\011\000\012\000\014\000\013\000\000\000\000\000\021\000\035\000\
\019\000\126\000\018\000\000\000\000\000\000\000\020\000\053\000\
\000\000\054\000\055\000\056\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\000\104\000\000\000\000\000\102\000\
\000\000\160\000\116\000\000\000\000\000\000\000\115\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\157\000\000\000\072\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\063\000\000\000\000\000\000\000\
\046\000\000\000\048\000\000\000\000\000\000\000\000\000\150\000\
\000\000\000\000\000\000\122\000\000\000\000\000\089\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\111\000\092\000\037\000\028\000\000\000\000\000\000\000\
\000\000\015\000\016\000\023\000\017\000\000\000\071\000\000\000\
\000\000\059\000\000\000\062\000\061\000\058\000\051\000\000\000\
\000\000\040\000\000\000\000\000\000\000\081\000\103\000\000\000\
\082\000\108\000\125\000\000\000\000\000\000\000\000\000\000\000\
\110\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\112\000\000\000\000\000\000\000\000\000\024\000\026\000\078\000\
\073\000\077\000\074\000\076\000\075\000\000\000\064\000\000\000\
\038\000\086\000\105\000\087\000\106\000\113\000\091\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\065\000\
\068\000\000\000\000\000\000\000\000\000\069\000"

let yydgoto = "\002\000\
\004\000\005\000\012\000\013\000\014\000\015\000\016\000\017\000\
\018\000\175\000\012\001\167\000\168\000\169\000\007\001\008\001\
\009\001\057\000\058\000\059\000\118\000\226\000\047\000\119\000\
\027\001\120\000\121\000\063\000\177\000\178\000\179\000\180\000\
\227\000\228\000\229\000\078\001\103\001\112\001\104\001\196\000\
\048\000\049\000\050\000\197\000\051\000\201\000\087\000\198\000\
\052\000\053\000\054\000\055\000"

let yysindex = "\029\000\
\037\255\000\000\071\255\000\000\105\255\075\255\101\255\104\255\
\186\000\122\255\125\255\112\255\139\255\137\255\000\000\000\000\
\000\000\000\000\000\000\144\255\170\255\000\000\000\000\000\000\
\000\000\000\000\198\255\022\000\027\255\022\000\186\000\160\255\
\021\255\186\000\021\255\021\255\021\255\021\255\021\255\021\255\
\000\000\000\000\186\000\000\000\190\255\021\255\213\001\000\000\
\000\000\000\000\012\255\000\000\004\255\000\000\000\000\000\000\
\000\000\191\255\000\000\000\000\168\255\210\255\000\000\192\255\
\000\000\000\000\122\255\122\255\021\255\000\000\126\255\231\255\
\027\255\000\000\000\000\000\000\197\255\248\255\233\255\250\001\
\223\255\246\255\015\002\090\003\090\003\038\002\000\000\000\000\
\062\002\239\254\078\255\249\255\000\000\021\255\021\255\021\255\
\021\255\021\255\021\255\021\255\021\255\021\255\021\255\021\255\
\021\255\021\255\021\255\186\000\000\000\021\255\027\000\122\255\
\071\000\049\000\007\004\000\000\000\000\000\000\015\000\031\000\
\039\000\024\000\054\000\000\000\000\000\000\000\021\255\021\255\
\186\000\021\255\021\255\186\000\021\255\085\001\122\255\234\000\
\122\255\240\002\021\255\026\255\026\255\000\000\000\000\000\000\
\090\003\012\000\012\000\012\000\012\000\012\000\012\000\026\255\
\000\000\000\000\055\000\000\000\000\000\051\000\000\000\235\000\
\000\000\000\000\000\000\000\000\003\255\059\000\000\000\000\000\
\000\000\000\000\000\000\122\255\033\255\122\255\000\000\000\000\
\047\000\000\000\000\000\000\000\057\000\122\255\122\255\053\000\
\000\000\230\255\070\000\000\000\000\000\090\003\090\003\000\000\
\041\000\000\000\000\000\062\000\046\000\085\001\000\000\023\255\
\138\000\083\000\021\255\234\000\021\255\021\255\234\000\000\000\
\036\001\084\000\021\255\240\002\021\255\021\255\240\002\064\000\
\085\000\000\000\094\000\000\000\181\255\117\001\021\255\179\255\
\095\000\183\255\015\255\076\000\000\000\008\255\125\255\235\000\
\000\000\039\000\000\000\234\255\050\000\021\255\021\255\000\000\
\186\000\186\000\186\000\000\000\109\000\234\000\000\000\116\000\
\083\002\099\002\122\002\240\002\066\000\117\000\141\002\158\002\
\181\002\000\000\000\000\000\000\000\000\136\000\122\000\118\000\
\128\000\000\000\000\000\000\000\000\000\090\003\000\000\121\000\
\235\000\000\000\113\000\000\000\000\000\000\000\000\000\133\000\
\138\255\000\000\112\255\199\002\216\002\000\000\000\000\137\000\
\000\000\000\000\000\000\096\000\021\255\234\000\234\000\085\001\
\000\000\240\002\021\255\240\002\186\000\085\001\000\000\103\000\
\181\255\181\255\206\255\141\000\000\000\050\000\051\000\059\000\
\142\000\186\000\186\000\085\001\234\000\176\001\127\000\134\000\
\000\000\192\001\135\000\143\000\117\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\123\000\000\000\112\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\255\
\021\255\234\000\234\000\021\255\021\255\240\002\240\002\000\000\
\085\001\144\000\249\002\032\003\051\003\071\003\151\000\085\001\
\153\000\000\000\234\000\234\000\240\002\240\002\122\255\000\000\
\000\000\181\000\122\255\122\255\003\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\209\255\000\000\000\000\000\000\000\000\162\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\255\000\000\000\000\000\000\209\255\000\000\
\000\000\163\000\000\000\000\000\000\000\134\003\134\003\000\000\
\000\000\000\000\129\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\191\000\191\000\193\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\040\001\000\000\
\000\000\000\000\000\000\163\003\223\003\026\004\000\000\000\000\
\000\000\000\000\000\000\075\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\209\255\000\000\192\000\000\000\172\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\198\000\
\200\000\000\000\000\000\000\000\000\000\000\000\000\000\193\000\
\123\004\000\000\000\000\123\004\068\004\000\000\000\000\123\004\
\000\000\000\000\193\000\114\003\174\003\000\000\000\000\000\000\
\130\004\053\004\108\004\163\004\218\004\017\005\072\005\234\003\
\000\000\000\000\000\000\000\000\000\000\017\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\077\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\189\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\032\000\000\000\000\000\000\000\000\000\178\004\146\000\000\000\
\194\000\000\000\000\000\000\000\005\001\199\000\000\000\090\000\
\123\004\000\000\000\000\163\000\000\000\000\000\129\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\047\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\238\255\000\000\
\000\000\203\000\000\000\000\000\185\000\000\000\000\000\000\000\
\123\004\205\000\123\004\000\000\000\000\155\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\
\000\000\000\000\000\000\000\000\000\000\080\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\123\004\190\000\000\000\
\000\000\000\000\000\000\000\000\123\004\000\000\000\000\000\000\
\047\255\000\000\000\000\000\000\000\000\185\000\000\000\000\000\
\000\000\123\004\123\004\185\004\123\004\000\000\000\000\000\000\
\000\000\000\000\194\000\005\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\123\004\123\004\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\208\000\025\000\
\000\000\000\000\123\004\123\004\000\000\000\000\000\000\000\000\
\000\000\000\000\209\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\219\001\245\255\000\000\030\255\000\000\000\000\
\000\000\146\255\182\000\042\255\156\255\000\000\204\000\000\000\
\212\000\143\001\000\000\201\255\252\255\018\000\019\000\188\001\
\211\000\000\000\078\001\032\001\000\000\000\000\000\000\000\000\
\086\255\039\001\046\255\000\000\164\000\000\000\000\000\068\255\
\153\255\229\255\222\255\001\255\241\001\137\001\023\000\000\000\
\124\255\069\000\000\000\206\000"

let yytablesize = 1678
let yytable = "\082\000\
\064\000\199\000\166\000\230\000\154\000\060\000\081\000\013\001\
\091\000\244\000\026\001\117\000\117\000\056\000\176\000\090\000\
\020\001\221\000\110\000\020\001\056\000\022\000\023\000\024\000\
\025\000\026\000\079\000\061\000\192\000\001\000\018\000\111\000\
\070\000\028\000\096\000\097\000\098\000\108\000\056\000\073\000\
\064\001\022\001\018\000\029\000\030\000\109\000\068\001\135\000\
\018\001\114\000\030\000\080\000\136\000\083\000\084\000\085\000\
\086\000\086\000\089\000\220\000\086\001\088\000\027\000\222\000\
\093\000\199\000\003\000\153\000\153\000\153\000\153\000\153\000\
\153\000\027\000\225\000\153\000\006\000\153\000\153\000\153\000\
\153\000\153\000\153\000\026\001\061\000\061\000\044\000\086\000\
\153\000\245\000\020\000\123\000\225\000\036\000\189\000\046\000\
\071\000\074\000\075\000\107\000\019\000\188\000\020\000\216\000\
\193\000\036\000\020\000\060\000\208\000\021\000\013\001\011\001\
\140\000\141\000\142\000\143\000\144\000\145\000\146\000\147\000\
\148\000\149\000\150\000\151\000\152\000\153\000\233\000\056\000\
\086\000\061\000\062\000\024\001\155\000\153\000\153\000\007\000\
\008\000\009\000\032\001\124\000\110\000\071\000\137\000\055\001\
\009\000\186\000\086\000\138\000\190\000\191\000\187\000\086\000\
\200\000\111\000\200\000\194\000\067\000\086\000\010\000\011\000\
\020\001\217\000\020\001\199\000\105\001\078\000\065\000\007\000\
\008\000\199\000\056\001\105\001\052\001\247\000\253\000\159\000\
\081\000\082\000\235\000\090\000\091\000\005\001\068\000\199\000\
\161\000\162\000\163\000\164\000\006\001\224\000\010\000\011\000\
\113\000\101\000\114\000\092\000\115\001\192\000\101\000\061\000\
\236\000\117\001\032\000\032\000\032\000\114\000\031\001\017\001\
\034\001\114\000\069\000\072\001\015\001\030\001\011\001\033\001\
\112\000\041\001\036\001\116\000\199\000\249\000\108\000\250\000\
\251\000\032\000\032\000\199\000\115\000\255\000\126\000\000\001\
\001\001\072\000\101\000\076\000\094\000\095\000\096\000\097\000\
\098\000\014\001\101\000\073\001\125\000\128\000\100\000\101\000\
\102\000\103\000\104\000\105\000\074\001\075\001\076\001\077\001\
\028\001\029\001\025\001\127\000\114\000\139\000\130\000\065\001\
\056\000\189\000\188\000\063\001\052\000\052\000\052\000\057\001\
\118\001\067\001\094\000\095\000\096\000\097\000\098\000\083\001\
\085\001\238\000\239\000\070\000\181\000\131\000\082\001\084\001\
\156\000\087\001\028\000\052\000\052\000\184\000\150\000\150\000\
\150\000\150\000\150\000\150\000\029\000\030\000\106\000\107\000\
\150\000\150\000\150\000\150\000\150\000\150\000\170\000\062\001\
\182\000\100\000\067\000\031\001\034\001\066\001\030\001\033\001\
\183\000\100\000\067\000\185\000\098\001\219\000\218\000\100\000\
\231\000\100\000\083\001\085\001\158\000\223\000\237\000\082\001\
\084\001\232\000\241\000\240\000\106\000\107\000\242\000\243\000\
\248\000\254\000\124\000\124\000\124\000\124\000\124\000\124\000\
\100\000\002\001\003\001\004\001\016\001\100\000\124\000\010\000\
\150\000\150\000\099\001\100\001\159\000\021\001\101\001\102\001\
\124\000\124\000\035\001\124\000\160\000\161\000\162\000\163\000\
\164\000\165\000\124\000\124\000\124\000\124\000\124\000\037\001\
\043\001\124\000\124\000\124\000\124\000\124\000\124\000\042\001\
\047\001\048\001\022\000\023\000\024\000\025\000\026\000\027\000\
\049\001\051\001\053\001\124\000\124\000\124\000\028\000\124\000\
\124\000\124\000\124\000\124\000\050\001\124\000\054\001\124\000\
\029\000\030\000\060\001\069\001\124\000\061\001\079\001\081\001\
\090\001\106\001\031\000\109\000\202\000\203\000\204\000\091\001\
\094\001\114\001\205\000\109\000\036\000\037\000\246\000\097\001\
\095\001\109\000\022\000\023\000\024\000\025\000\026\000\027\000\
\111\001\116\001\004\000\038\000\039\000\206\000\028\000\041\000\
\042\000\207\000\101\000\044\000\045\000\045\000\161\000\161\000\
\029\000\030\000\109\000\043\000\046\000\044\000\057\000\109\000\
\042\000\041\000\031\000\079\000\032\000\033\000\034\000\123\000\
\101\000\025\000\035\000\079\000\036\000\037\000\101\000\101\000\
\066\000\079\000\022\000\023\000\024\000\025\000\026\000\027\000\
\171\000\066\000\070\000\038\000\039\000\040\000\028\000\041\000\
\042\000\043\000\096\001\044\000\070\001\045\000\157\000\122\000\
\029\000\030\000\079\000\234\000\046\000\071\001\023\001\079\000\
\080\001\019\001\031\000\113\001\202\000\203\000\204\000\077\000\
\159\000\209\000\205\000\000\000\036\000\037\000\000\000\000\000\
\160\000\161\000\162\000\163\000\164\000\165\000\107\000\000\000\
\000\000\000\000\000\000\038\000\039\000\206\000\107\000\041\000\
\042\000\207\000\000\000\044\000\107\000\045\000\153\000\153\000\
\153\000\153\000\153\000\153\000\046\000\153\000\153\000\153\000\
\153\000\153\000\153\000\153\000\153\000\153\000\000\000\000\000\
\000\000\153\000\153\000\153\000\000\000\107\000\210\000\211\000\
\212\000\153\000\107\000\000\000\213\000\000\000\153\000\153\000\
\252\000\153\000\000\000\000\000\153\000\022\000\023\000\024\000\
\025\000\026\000\195\000\153\000\153\000\000\000\000\000\214\000\
\000\000\000\000\000\000\215\000\153\000\000\000\000\000\000\000\
\153\000\000\000\000\000\000\000\000\000\153\000\000\000\000\000\
\153\000\153\000\131\000\131\000\131\000\131\000\131\000\131\000\
\000\000\131\000\010\001\131\000\131\000\131\000\131\000\131\000\
\131\000\131\000\000\000\000\000\000\000\131\000\131\000\000\000\
\000\000\000\000\000\000\000\000\000\000\131\000\000\000\000\000\
\000\000\000\000\131\000\131\000\000\000\131\000\000\000\000\000\
\131\000\000\000\159\000\000\000\000\000\000\000\000\000\131\000\
\131\000\000\000\160\000\161\000\162\000\163\000\164\000\000\000\
\131\000\000\000\000\000\000\000\131\000\000\000\000\000\000\000\
\000\000\131\000\000\000\000\000\131\000\131\000\094\000\095\000\
\096\000\097\000\098\000\000\000\000\000\000\000\000\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\094\000\095\000\
\096\000\097\000\098\000\000\000\000\000\000\000\000\000\000\000\
\100\000\101\000\102\000\103\000\104\000\105\000\000\000\000\000\
\000\000\000\000\000\000\094\000\095\000\096\000\097\000\098\000\
\099\000\000\000\000\000\088\001\089\001\100\000\101\000\102\000\
\103\000\104\000\105\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\092\001\093\001\000\000\000\000\000\000\
\106\000\107\000\000\000\000\000\000\000\000\000\000\000\000\000\
\094\000\095\000\096\000\097\000\098\000\000\000\000\000\000\000\
\106\000\107\000\100\000\101\000\102\000\103\000\104\000\105\000\
\000\000\000\000\000\000\000\000\000\000\094\000\095\000\096\000\
\097\000\098\000\000\000\000\000\000\000\106\000\107\000\100\000\
\101\000\102\000\103\000\104\000\105\000\000\000\129\000\000\000\
\000\000\000\000\000\000\000\000\094\000\095\000\096\000\097\000\
\098\000\000\000\000\000\000\000\000\000\132\000\100\000\101\000\
\102\000\103\000\104\000\105\000\000\000\000\000\000\000\000\000\
\133\000\000\000\106\000\107\000\094\000\095\000\096\000\097\000\
\098\000\000\000\000\000\000\000\000\000\000\000\100\000\101\000\
\102\000\103\000\104\000\105\000\000\000\000\000\000\000\106\000\
\107\000\094\000\095\000\096\000\097\000\098\000\000\000\000\000\
\000\000\000\000\000\000\100\000\101\000\102\000\103\000\104\000\
\105\000\094\000\095\000\096\000\097\000\098\000\106\000\107\000\
\000\000\000\000\000\000\100\000\101\000\102\000\103\000\104\000\
\105\000\000\000\134\000\000\000\000\000\000\000\000\000\038\001\
\094\000\095\000\096\000\097\000\098\000\000\000\106\000\107\000\
\000\000\039\001\100\000\101\000\102\000\103\000\104\000\105\000\
\000\000\000\000\000\000\094\000\095\000\096\000\097\000\098\000\
\000\000\000\000\000\000\106\000\107\000\100\000\101\000\102\000\
\103\000\104\000\105\000\000\000\094\000\095\000\096\000\097\000\
\098\000\000\000\000\000\106\000\107\000\000\000\100\000\101\000\
\102\000\103\000\104\000\105\000\000\000\000\000\040\001\000\000\
\000\000\044\001\000\000\094\000\095\000\096\000\097\000\098\000\
\000\000\000\000\106\000\107\000\045\001\100\000\101\000\102\000\
\103\000\104\000\105\000\000\000\000\000\094\000\095\000\096\000\
\097\000\098\000\000\000\000\000\000\000\106\000\107\000\100\000\
\101\000\102\000\103\000\104\000\105\000\000\000\094\000\095\000\
\096\000\097\000\098\000\000\000\000\000\000\000\106\000\107\000\
\100\000\101\000\102\000\103\000\104\000\105\000\000\000\000\000\
\000\000\046\001\000\000\058\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\106\000\107\000\094\000\
\095\000\096\000\097\000\098\000\059\001\000\000\000\000\000\000\
\000\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\000\000\210\000\211\000\212\000\000\000\000\000\000\000\
\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\106\000\107\000\000\000\000\000\000\000\107\001\094\000\095\000\
\096\000\097\000\098\000\214\000\000\000\000\000\000\000\215\000\
\100\000\101\000\102\000\103\000\104\000\105\000\000\000\000\000\
\000\000\094\000\095\000\096\000\097\000\098\000\000\000\000\000\
\000\000\106\000\107\000\100\000\101\000\102\000\103\000\104\000\
\105\000\000\000\000\000\000\000\108\001\094\000\095\000\096\000\
\097\000\098\000\000\000\000\000\000\000\000\000\000\000\100\000\
\101\000\102\000\103\000\104\000\105\000\000\000\000\000\109\001\
\094\000\095\000\096\000\097\000\098\000\000\000\000\000\000\000\
\106\000\107\000\100\000\101\000\102\000\103\000\104\000\105\000\
\000\000\000\000\000\000\110\001\000\000\000\000\000\000\000\000\
\140\000\140\000\000\000\106\000\107\000\140\000\000\000\140\000\
\000\000\140\000\140\000\140\000\140\000\140\000\140\000\140\000\
\000\000\000\000\000\000\140\000\140\000\000\000\000\000\106\000\
\107\000\000\000\000\000\140\000\000\000\000\000\000\000\000\000\
\140\000\140\000\000\000\140\000\000\000\000\000\140\000\161\000\
\000\000\000\000\106\000\107\000\000\000\140\000\140\000\161\000\
\000\000\000\000\000\000\000\000\000\000\161\000\140\000\161\000\
\000\000\000\000\140\000\000\000\141\000\141\000\000\000\140\000\
\000\000\141\000\140\000\141\000\097\000\141\000\141\000\141\000\
\141\000\141\000\141\000\141\000\097\000\000\000\161\000\141\000\
\141\000\000\000\097\000\161\000\097\000\000\000\000\000\141\000\
\000\000\000\000\000\000\000\000\141\000\141\000\000\000\141\000\
\000\000\000\000\141\000\000\000\000\000\000\000\000\000\000\000\
\000\000\141\000\141\000\097\000\000\000\000\000\000\000\000\000\
\097\000\000\000\141\000\000\000\000\000\000\000\141\000\000\000\
\142\000\142\000\000\000\141\000\000\000\142\000\141\000\142\000\
\096\000\142\000\142\000\142\000\142\000\142\000\142\000\142\000\
\096\000\000\000\000\000\142\000\142\000\000\000\096\000\000\000\
\096\000\000\000\000\000\142\000\171\000\000\000\000\000\000\000\
\142\000\142\000\000\000\142\000\000\000\000\000\142\000\000\000\
\000\000\000\000\000\000\000\000\000\000\142\000\142\000\096\000\
\000\000\000\000\000\000\000\000\096\000\000\000\142\000\159\000\
\000\000\159\000\142\000\000\000\159\000\000\000\000\000\142\000\
\000\000\000\000\142\000\159\000\160\000\161\000\162\000\163\000\
\164\000\165\000\000\000\159\000\000\000\000\000\172\000\173\000\
\134\000\159\000\134\000\159\000\134\000\134\000\134\000\134\000\
\134\000\134\000\134\000\174\000\000\000\000\000\134\000\134\000\
\000\000\161\000\000\000\161\000\000\000\000\000\134\000\000\000\
\000\000\000\000\159\000\134\000\134\000\161\000\134\000\159\000\
\000\000\134\000\000\000\000\000\093\000\161\000\000\000\000\000\
\134\000\134\000\000\000\161\000\093\000\161\000\000\000\000\000\
\000\000\134\000\093\000\000\000\093\000\134\000\000\000\135\000\
\000\000\135\000\134\000\135\000\135\000\135\000\135\000\135\000\
\135\000\135\000\000\000\000\000\161\000\135\000\135\000\000\000\
\000\000\161\000\000\000\093\000\000\000\135\000\000\000\000\000\
\093\000\000\000\135\000\135\000\101\000\135\000\000\000\000\000\
\135\000\000\000\000\000\083\000\101\000\000\000\000\000\135\000\
\135\000\000\000\101\000\083\000\101\000\000\000\000\000\000\000\
\135\000\083\000\000\000\083\000\135\000\000\000\136\000\000\000\
\136\000\135\000\136\000\136\000\136\000\136\000\136\000\136\000\
\136\000\000\000\000\000\101\000\136\000\136\000\000\000\000\000\
\101\000\000\000\083\000\000\000\136\000\000\000\000\000\083\000\
\000\000\136\000\136\000\088\000\136\000\000\000\000\000\136\000\
\000\000\000\000\114\000\088\000\000\000\000\000\136\000\136\000\
\000\000\088\000\114\000\088\000\000\000\000\000\000\000\136\000\
\114\000\000\000\114\000\136\000\000\000\139\000\000\000\139\000\
\136\000\139\000\139\000\139\000\139\000\139\000\139\000\139\000\
\000\000\000\000\088\000\139\000\139\000\000\000\000\000\088\000\
\000\000\114\000\000\000\139\000\000\000\000\000\114\000\000\000\
\139\000\139\000\000\000\139\000\000\000\000\000\139\000\000\000\
\000\000\000\000\000\000\000\000\000\000\139\000\139\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\139\000\000\000\
\000\000\000\000\139\000\000\000\137\000\000\000\137\000\139\000\
\137\000\137\000\137\000\137\000\137\000\137\000\137\000\000\000\
\000\000\000\000\137\000\137\000\000\000\000\000\000\000\000\000\
\000\000\000\000\137\000\000\000\000\000\000\000\000\000\137\000\
\137\000\000\000\137\000\000\000\000\000\137\000\000\000\000\000\
\000\000\000\000\000\000\000\000\137\000\137\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\137\000\000\000\000\000\
\000\000\137\000\000\000\138\000\000\000\138\000\137\000\138\000\
\138\000\138\000\138\000\138\000\138\000\138\000\000\000\000\000\
\000\000\138\000\138\000\000\000\000\000\000\000\000\000\000\000\
\000\000\138\000\000\000\000\000\000\000\000\000\138\000\138\000\
\000\000\138\000\000\000\000\000\138\000\000\000\000\000\000\000\
\000\000\000\000\000\000\138\000\138\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\138\000\000\000\000\000\000\000\
\138\000\000\000\000\000\000\000\000\000\138\000"

let yycheck = "\034\000\
\012\000\134\000\113\000\174\000\108\000\010\000\034\000\222\000\
\043\000\198\000\237\000\067\000\068\000\006\001\115\000\043\000\
\227\000\015\001\015\001\230\000\006\001\001\001\002\001\003\001\
\004\001\005\001\006\001\010\000\132\000\001\000\014\001\028\001\
\006\001\013\001\009\001\010\001\011\001\026\001\006\001\013\001\
\040\001\034\001\026\001\023\001\024\001\034\001\046\001\065\001\
\034\001\027\001\024\001\033\000\070\001\035\000\036\000\037\000\
\038\000\039\000\040\000\160\000\060\001\039\000\016\001\061\001\
\046\000\198\000\030\001\007\001\008\001\009\001\010\001\011\001\
\012\001\027\001\060\001\015\001\006\001\017\001\018\001\019\001\
\020\001\021\001\022\001\054\001\067\000\068\000\066\001\069\000\
\028\001\067\001\014\001\069\000\060\001\014\001\129\000\075\001\
\028\000\029\000\030\000\074\001\026\001\129\000\026\001\138\000\
\132\000\026\001\006\001\112\000\136\000\006\001\069\001\222\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\102\000\103\000\104\000\105\000\106\000\107\000\182\000\006\001\
\110\000\112\000\006\001\232\000\110\000\073\001\074\001\031\001\
\032\001\033\001\242\000\014\001\015\001\073\000\065\001\006\001\
\033\001\127\000\128\000\070\001\130\000\131\000\128\000\133\000\
\135\000\028\001\137\000\133\000\013\001\139\000\054\001\055\001\
\115\001\139\000\117\001\040\001\097\001\006\001\028\001\031\001\
\032\001\046\001\025\001\104\001\017\001\201\000\209\000\038\001\
\204\000\212\000\183\000\207\000\215\000\001\001\013\001\060\001\
\047\001\048\001\049\001\050\001\008\001\172\000\054\001\055\001\
\025\001\065\001\027\001\006\001\111\001\045\001\070\001\182\000\
\183\000\116\001\031\001\032\001\033\001\027\001\241\000\025\001\
\243\000\027\001\013\001\006\001\034\001\241\000\069\001\243\000\
\026\001\252\000\246\000\028\001\097\001\203\000\026\001\205\000\
\206\000\054\001\055\001\104\001\019\001\211\000\034\001\213\000\
\214\000\028\000\026\001\030\000\007\001\008\001\009\001\010\001\
\011\001\223\000\034\001\038\001\014\001\013\001\017\001\018\001\
\019\001\020\001\021\001\022\001\047\001\048\001\049\001\050\001\
\238\000\239\000\025\001\012\001\027\001\013\001\040\001\042\001\
\006\001\044\001\038\001\039\001\031\001\032\001\033\001\027\001\
\014\001\045\001\007\001\008\001\009\001\010\001\011\001\058\001\
\059\001\052\001\053\001\006\001\014\001\040\001\058\001\059\001\
\006\001\061\001\013\001\054\001\055\001\014\001\007\001\008\001\
\009\001\010\001\011\001\012\001\023\001\024\001\073\001\074\001\
\017\001\018\001\019\001\020\001\021\001\022\001\006\001\037\001\
\026\001\026\001\034\001\094\001\095\001\043\001\090\001\091\001\
\026\001\034\001\042\001\014\001\080\001\019\001\016\001\040\001\
\026\001\042\001\109\001\110\001\006\001\019\001\026\001\107\001\
\108\001\025\001\042\001\014\001\073\001\074\001\025\001\042\001\
\006\001\006\001\001\001\002\001\003\001\004\001\005\001\006\001\
\065\001\034\001\014\001\006\001\006\001\070\001\013\001\054\001\
\073\001\074\001\088\001\089\001\038\001\034\001\092\001\093\001\
\023\001\024\001\006\001\026\001\046\001\047\001\048\001\049\001\
\050\001\051\001\033\001\034\001\035\001\036\001\037\001\012\001\
\012\001\040\001\041\001\042\001\043\001\044\001\045\001\070\001\
\001\001\016\001\001\001\002\001\003\001\004\001\005\001\006\001\
\027\001\025\001\034\001\058\001\059\001\060\001\013\001\062\001\
\063\001\064\001\065\001\066\001\029\001\068\001\026\001\070\001\
\023\001\024\001\026\001\061\001\075\001\070\001\026\001\026\001\
\042\001\026\001\033\001\026\001\035\001\036\001\037\001\042\001\
\042\001\025\001\041\001\034\001\043\001\044\001\045\001\061\001\
\042\001\040\001\001\001\002\001\003\001\004\001\005\001\006\001\
\042\001\013\001\033\001\058\001\059\001\060\001\013\001\062\001\
\063\001\064\001\040\001\066\001\014\001\068\001\014\001\016\001\
\023\001\024\001\065\001\014\001\075\001\014\001\026\001\070\001\
\014\001\033\001\033\001\026\001\035\001\036\001\037\001\025\001\
\070\001\016\001\041\001\034\001\043\001\044\001\026\001\042\001\
\014\000\040\001\001\001\002\001\003\001\004\001\005\001\006\001\
\006\001\034\001\034\001\058\001\059\001\060\001\013\001\062\001\
\063\001\064\001\069\001\066\001\049\001\068\001\112\000\068\000\
\023\001\024\001\065\001\182\000\075\001\050\001\231\000\070\001\
\054\001\227\000\033\001\104\001\035\001\036\001\037\001\031\000\
\038\001\137\000\041\001\255\255\043\001\044\001\255\255\255\255\
\046\001\047\001\048\001\049\001\050\001\051\001\026\001\255\255\
\255\255\255\255\255\255\058\001\059\001\060\001\034\001\062\001\
\063\001\064\001\255\255\066\001\040\001\068\001\007\001\008\001\
\009\001\010\001\011\001\012\001\075\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\027\001\028\001\255\255\065\001\035\001\036\001\
\037\001\034\001\070\001\255\255\041\001\255\255\039\001\040\001\
\045\001\042\001\255\255\255\255\045\001\001\001\002\001\003\001\
\004\001\005\001\006\001\052\001\053\001\255\255\255\255\060\001\
\255\255\255\255\255\255\064\001\061\001\255\255\255\255\255\255\
\065\001\255\255\255\255\255\255\255\255\070\001\255\255\255\255\
\073\001\074\001\007\001\008\001\009\001\010\001\011\001\012\001\
\255\255\014\001\006\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\034\001\255\255\255\255\
\255\255\255\255\039\001\040\001\255\255\042\001\255\255\255\255\
\045\001\255\255\038\001\255\255\255\255\255\255\255\255\052\001\
\053\001\255\255\046\001\047\001\048\001\049\001\050\001\255\255\
\061\001\255\255\255\255\255\255\065\001\255\255\255\255\255\255\
\255\255\070\001\255\255\255\255\073\001\074\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\012\001\255\255\255\255\052\001\053\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\053\001\255\255\255\255\255\255\
\073\001\074\001\255\255\255\255\255\255\255\255\255\255\255\255\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\073\001\074\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\073\001\074\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\039\001\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\255\255\
\027\001\255\255\073\001\074\001\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\255\255\255\255\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\255\255\073\001\
\074\001\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\007\001\008\001\009\001\010\001\011\001\073\001\074\001\
\255\255\255\255\255\255\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\061\001\255\255\255\255\255\255\255\255\045\001\
\007\001\008\001\009\001\010\001\011\001\255\255\073\001\074\001\
\255\255\039\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\073\001\074\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\007\001\008\001\009\001\010\001\
\011\001\255\255\255\255\073\001\074\001\255\255\017\001\018\001\
\019\001\020\001\021\001\022\001\255\255\255\255\061\001\255\255\
\255\255\045\001\255\255\007\001\008\001\009\001\010\001\011\001\
\255\255\255\255\073\001\074\001\039\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\073\001\074\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\007\001\008\001\
\009\001\010\001\011\001\255\255\255\255\255\255\073\001\074\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\061\001\255\255\045\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\073\001\074\001\007\001\
\008\001\009\001\010\001\011\001\045\001\255\255\255\255\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\073\001\
\074\001\255\255\035\001\036\001\037\001\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\073\001\074\001\255\255\255\255\255\255\045\001\007\001\008\001\
\009\001\010\001\011\001\060\001\255\255\255\255\255\255\064\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\073\001\074\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\255\255\045\001\007\001\008\001\009\001\
\010\001\011\001\255\255\255\255\255\255\255\255\255\255\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\255\255\045\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\073\001\074\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\045\001\255\255\255\255\255\255\255\255\
\007\001\008\001\255\255\073\001\074\001\012\001\255\255\014\001\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\026\001\027\001\255\255\255\255\073\001\
\074\001\255\255\255\255\034\001\255\255\255\255\255\255\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\026\001\
\255\255\255\255\073\001\074\001\255\255\052\001\053\001\034\001\
\255\255\255\255\255\255\255\255\255\255\040\001\061\001\042\001\
\255\255\255\255\065\001\255\255\007\001\008\001\255\255\070\001\
\255\255\012\001\073\001\014\001\026\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\034\001\255\255\065\001\026\001\
\027\001\255\255\040\001\070\001\042\001\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\039\001\040\001\255\255\042\001\
\255\255\255\255\045\001\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\065\001\255\255\255\255\255\255\255\255\
\070\001\255\255\061\001\255\255\255\255\255\255\065\001\255\255\
\007\001\008\001\255\255\070\001\255\255\012\001\073\001\014\001\
\026\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\034\001\255\255\255\255\026\001\027\001\255\255\040\001\255\255\
\042\001\255\255\255\255\034\001\006\001\255\255\255\255\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\065\001\
\255\255\255\255\255\255\255\255\070\001\255\255\061\001\014\001\
\255\255\016\001\065\001\255\255\038\001\255\255\255\255\070\001\
\255\255\255\255\073\001\026\001\046\001\047\001\048\001\049\001\
\050\001\051\001\255\255\034\001\255\255\255\255\056\001\057\001\
\012\001\040\001\014\001\042\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\069\001\255\255\255\255\026\001\027\001\
\255\255\014\001\255\255\016\001\255\255\255\255\034\001\255\255\
\255\255\255\255\065\001\039\001\040\001\026\001\042\001\070\001\
\255\255\045\001\255\255\255\255\026\001\034\001\255\255\255\255\
\052\001\053\001\255\255\040\001\034\001\042\001\255\255\255\255\
\255\255\061\001\040\001\255\255\042\001\065\001\255\255\012\001\
\255\255\014\001\070\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\255\255\255\255\065\001\026\001\027\001\255\255\
\255\255\070\001\255\255\065\001\255\255\034\001\255\255\255\255\
\070\001\255\255\039\001\040\001\026\001\042\001\255\255\255\255\
\045\001\255\255\255\255\026\001\034\001\255\255\255\255\052\001\
\053\001\255\255\040\001\034\001\042\001\255\255\255\255\255\255\
\061\001\040\001\255\255\042\001\065\001\255\255\012\001\255\255\
\014\001\070\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\255\255\255\255\065\001\026\001\027\001\255\255\255\255\
\070\001\255\255\065\001\255\255\034\001\255\255\255\255\070\001\
\255\255\039\001\040\001\026\001\042\001\255\255\255\255\045\001\
\255\255\255\255\026\001\034\001\255\255\255\255\052\001\053\001\
\255\255\040\001\034\001\042\001\255\255\255\255\255\255\061\001\
\040\001\255\255\042\001\065\001\255\255\012\001\255\255\014\001\
\070\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\065\001\026\001\027\001\255\255\255\255\070\001\
\255\255\065\001\255\255\034\001\255\255\255\255\070\001\255\255\
\039\001\040\001\255\255\042\001\255\255\255\255\045\001\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\061\001\255\255\
\255\255\255\255\065\001\255\255\012\001\255\255\014\001\070\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\255\255\255\255\026\001\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\039\001\
\040\001\255\255\042\001\255\255\255\255\045\001\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\053\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\061\001\255\255\255\255\
\255\255\065\001\255\255\012\001\255\255\014\001\070\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\034\001\255\255\255\255\255\255\255\255\039\001\040\001\
\255\255\042\001\255\255\255\255\045\001\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\053\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\061\001\255\255\255\255\255\255\
\065\001\255\255\255\255\255\255\255\255\070\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  MOD\000\
  ASG\000\
  LPAR\000\
  RPAR\000\
  LBRA\000\
  RBRA\000\
  GT\000\
  LT\000\
  EQUAL\000\
  NOTEQ\000\
  GTEQ\000\
  LTEQ\000\
  GETREF\000\
  DEREF\000\
  COLON\000\
  SCOLON\000\
  COMMA\000\
  DOT\000\
  RANGE\000\
  PROGRAM\000\
  FUNCTION\000\
  PROCEDURE\000\
  BEGIN\000\
  END\000\
  FOR\000\
  WHILE\000\
  REPEAT\000\
  INTEGER\000\
  THEN\000\
  UNTIL\000\
  IF\000\
  ELSE\000\
  INC\000\
  DEC\000\
  DO\000\
  REF\000\
  REAL\000\
  STRING\000\
  BOOLEAN\000\
  CHARACTER\000\
  ARRAY\000\
  TO\000\
  DOWNTO\000\
  VAR\000\
  TYPE\000\
  ENUMERATE\000\
  RECORD\000\
  WRITE\000\
  READ\000\
  CASE\000\
  OF\000\
  BREAK\000\
  CONTINUE\000\
  TRY\000\
  EXCEPT\000\
  NIL\000\
  AS\000\
  RAISE\000\
  EXCEPTION\000\
  FINALLY\000\
  FALSE\000\
  TRUE\000\
  OR\000\
  AND\000\
  "

let yynames_block = "\
  ICONST\000\
  RCONST\000\
  BCONST\000\
  CCONST\000\
  SCONST\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'program_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'global_declaration_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 36 "parser.mly"
                                                                         ()
# 885 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'program_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 37 "parser.mly"
                                                 ()
# 893 "parser.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'global_declaration) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'global_declaration_list) in
    Obj.repr(
# 41 "parser.mly"
                                                 ()
# 901 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'global_declaration) in
    Obj.repr(
# 42 "parser.mly"
                         ()
# 908 "parser.ml"
               : 'global_declaration_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 46 "parser.mly"
                           ()
# 915 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'procedure_definition) in
    Obj.repr(
# 47 "parser.mly"
                           ()
# 922 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_definition) in
    Obj.repr(
# 48 "parser.mly"
                          ()
# 929 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition) in
    Obj.repr(
# 49 "parser.mly"
                      ()
# 936 "parser.ml"
               : 'global_declaration))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 53 "parser.mly"
                      ()
# 943 "parser.ml"
               : 'program_declaration))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
              ()
# 949 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
             ()
# 955 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
             ()
# 961 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
                ()
# 967 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
              ()
# 973 "parser.ml"
               : 'simple_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "parser.mly"
         ()
# 980 "parser.ml"
               : 'array_item_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 68 "parser.mly"
                  ()
# 987 "parser.ml"
               : 'array_item_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference_type) in
    Obj.repr(
# 69 "parser.mly"
                     ()
# 994 "parser.ml"
               : 'array_item_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 73 "parser.mly"
         ()
# 1001 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 74 "parser.mly"
                 ()
# 1008 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_type) in
    Obj.repr(
# 75 "parser.mly"
                  ()
# 1015 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reference_type) in
    Obj.repr(
# 76 "parser.mly"
                     ()
# 1022 "parser.ml"
               : 'any_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'range_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'array_item_type) in
    Obj.repr(
# 79 "parser.mly"
                                                    ()
# 1030 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'array_item_type) in
    Obj.repr(
# 80 "parser.mly"
                               ()
# 1037 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'range) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range_list) in
    Obj.repr(
# 84 "parser.mly"
                             ()
# 1045 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'range) in
    Obj.repr(
# 85 "parser.mly"
            ()
# 1052 "parser.ml"
               : 'range_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'range_value) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'range_value) in
    Obj.repr(
# 89 "parser.mly"
                                    ()
# 1060 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "parser.mly"
      ()
# 1066 "parser.ml"
               : 'range))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 94 "parser.mly"
             ()
# 1073 "parser.ml"
               : 'range_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 95 "parser.mly"
                 ()
# 1080 "parser.ml"
               : 'range_value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 99 "parser.mly"
                            ()
# 1087 "parser.ml"
               : 'variable_declaration))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'declr_or_init) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declrs_or_inits) in
    Obj.repr(
# 103 "parser.mly"
                                               ()
# 1095 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'declr_or_init) in
    Obj.repr(
# 104 "parser.mly"
                           ()
# 1102 "parser.ml"
               : 'var_declrs_or_inits))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 108 "parser.mly"
                ()
# 1109 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 109 "parser.mly"
               ()
# 1116 "parser.ml"
               : 'declr_or_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 113 "parser.mly"
                           ()
# 1124 "parser.ml"
               : 'var_declr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'simple_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 121 "parser.mly"
                                                  ()
# 1133 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 122 "parser.mly"
                                ()
# 1142 "parser.ml"
               : 'var_init))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 126 "parser.mly"
                                                                                            ()
# 1152 "parser.ml"
               : 'procedure_definition))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 7 : 'parameter_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 4 : 'any_type) in
    let _9 = (Parsing.peek_val __caml_parser_env 2 : 'local_var_declrs) in
    let _10 = (Parsing.peek_val __caml_parser_env 1 : 'compound_statement) in
    Obj.repr(
# 130 "parser.mly"
                                                                                                          ()
# 1163 "parser.ml"
               : 'function_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_declaration) in
    Obj.repr(
# 134 "parser.mly"
                           ()
# 1170 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "parser.mly"
      ()
# 1176 "parser.ml"
               : 'local_var_declrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 139 "parser.mly"
                                          ()
# 1184 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr_list) in
    Obj.repr(
# 140 "parser.mly"
                     ()
# 1191 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init_list) in
    Obj.repr(
# 141 "parser.mly"
                    ()
# 1198 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "parser.mly"
                       ()
# 1204 "parser.ml"
               : 'parameter_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_declr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 146 "parser.mly"
                                        ()
# 1212 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_declr) in
    Obj.repr(
# 147 "parser.mly"
                 ()
# 1219 "parser.ml"
               : 'var_declr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_init_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 151 "parser.mly"
                                    ()
# 1227 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var_init) in
    Obj.repr(
# 152 "parser.mly"
               ()
# 1234 "parser.ml"
               : 'var_init_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 156 "parser.mly"
                              ()
# 1241 "parser.ml"
               : 'type_definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'type_body) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'type_definition_list) in
    Obj.repr(
# 160 "parser.mly"
                                                     ()
# 1250 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_body) in
    Obj.repr(
# 161 "parser.mly"
                                ()
# 1258 "parser.ml"
               : 'type_definition_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 165 "parser.mly"
               ()
# 1265 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'record_body) in
    Obj.repr(
# 166 "parser.mly"
                  ()
# 1272 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'enumerate_body) in
    Obj.repr(
# 167 "parser.mly"
                     ()
# 1279 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exception_body) in
    Obj.repr(
# 168 "parser.mly"
                     ()
# 1286 "parser.ml"
               : 'type_body))
; (fun __caml_parser_env ->
    Obj.repr(
# 172 "parser.mly"
                ()
# 1292 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 173 "parser.mly"
                                     ()
# 1299 "parser.ml"
               : 'exception_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 177 "parser.mly"
                                  ()
# 1306 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fixed_field_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'variant_field) in
    Obj.repr(
# 178 "parser.mly"
                                                ()
# 1314 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'variant_field) in
    Obj.repr(
# 179 "parser.mly"
                               ()
# 1321 "parser.ml"
               : 'record_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field) in
    Obj.repr(
# 183 "parser.mly"
                                   ()
# 1329 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field) in
    Obj.repr(
# 184 "parser.mly"
                  ()
# 1336 "parser.ml"
               : 'fixed_field_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'any_type) in
    Obj.repr(
# 188 "parser.mly"
                                  ()
# 1344 "parser.ml"
               : 'fixed_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'variant_case_part) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'variant_else_part) in
    Obj.repr(
# 192 "parser.mly"
                                                                        ()
# 1354 "parser.ml"
               : 'variant_field))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ordinal_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'variant_case_part) in
    Obj.repr(
# 193 "parser.mly"
                                                      ()
# 1363 "parser.ml"
               : 'variant_field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variant_case) in
    Obj.repr(
# 197 "parser.mly"
                   ()
# 1370 "parser.ml"
               : 'variant_case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'variant_case) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variant_case_part) in
    Obj.repr(
# 198 "parser.mly"
                                     ()
# 1378 "parser.ml"
               : 'variant_case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fixed_field_list) in
    Obj.repr(
# 202 "parser.mly"
                                                            ()
# 1386 "parser.ml"
               : 'variant_case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fixed_field_list) in
    Obj.repr(
# 206 "parser.mly"
                            ()
# 1393 "parser.ml"
               : 'variant_else_part))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'id_list) in
    Obj.repr(
# 209 "parser.mly"
                          ()
# 1400 "parser.ml"
               : 'enumerate_body))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'any_type) in
    Obj.repr(
# 212 "parser.mly"
                             ()
# 1407 "parser.ml"
               : 'reference_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 215 "parser.mly"
              ()
# 1413 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "parser.mly"
             ()
# 1419 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "parser.mly"
                ()
# 1425 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 218 "parser.mly"
              ()
# 1431 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 219 "parser.mly"
           ()
# 1437 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 220 "parser.mly"
          ()
# 1444 "parser.ml"
               : 'ordinal_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 225 "parser.mly"
             ()
# 1451 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 226 "parser.mly"
             ()
# 1458 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 231 "parser.mly"
                                            ()
# 1467 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'case_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 232 "parser.mly"
                                               ()
# 1476 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 233 "parser.mly"
                                ()
# 1484 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 234 "parser.mly"
                                 ()
# 1492 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 235 "parser.mly"
                               ()
# 1499 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 236 "parser.mly"
                                                    ()
# 1509 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 237 "parser.mly"
                                                        ()
# 1519 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 238 "parser.mly"
                                     ()
# 1527 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exception_part) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 239 "parser.mly"
                                              ()
# 1536 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 240 "parser.mly"
                                ()
# 1544 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'stmt_m) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_m) in
    Obj.repr(
# 241 "parser.mly"
                                                                ()
# 1554 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 242 "parser.mly"
                                          ()
# 1562 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 243 "parser.mly"
               ()
# 1569 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 244 "parser.mly"
                            ()
# 1576 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 245 "parser.mly"
                           ()
# 1583 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 246 "parser.mly"
                     ()
# 1590 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 247 "parser.mly"
                     ()
# 1597 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "parser.mly"
            ()
# 1603 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "parser.mly"
               ()
# 1609 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 250 "parser.mly"
                                   ()
# 1617 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    Obj.repr(
# 251 "parser.mly"
                            ()
# 1623 "parser.ml"
               : 'stmt_m))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 255 "parser.mly"
                                   ()
# 1631 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_m) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 256 "parser.mly"
                                            ()
# 1640 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 257 "parser.mly"
                                 ()
# 1648 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 258 "parser.mly"
                                                    ()
# 1658 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 259 "parser.mly"
                                                        ()
# 1668 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'case_part) in
    Obj.repr(
# 260 "parser.mly"
                                   ()
# 1676 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'case_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 261 "parser.mly"
                                               ()
# 1685 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 262 "parser.mly"
                                     ()
# 1693 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exception_part) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 263 "parser.mly"
                                                 ()
# 1702 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_u) in
    Obj.repr(
# 264 "parser.mly"
                                    ()
# 1710 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'stmt_u) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exception_part) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt_u) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_u) in
    Obj.repr(
# 265 "parser.mly"
                                                             ()
# 1720 "parser.ml"
               : 'stmt_u))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'case_part) in
    Obj.repr(
# 270 "parser.mly"
                                                            ()
# 1729 "parser.ml"
               : 'case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'literal_or_enum_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'statement) in
    Obj.repr(
# 271 "parser.mly"
                                                  ()
# 1737 "parser.ml"
               : 'case_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 288 "parser.mly"
              ()
# 1744 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 289 "parser.mly"
         ()
# 1751 "parser.ml"
               : 'literal_or_enum))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 293 "parser.mly"
             ()
# 1758 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 294 "parser.mly"
             ()
# 1765 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 295 "parser.mly"
             ()
# 1772 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 296 "parser.mly"
             ()
# 1779 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 297 "parser.mly"
             ()
# 1786 "parser.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'literal_or_enum) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum_list) in
    Obj.repr(
# 301 "parser.mly"
                                           ()
# 1794 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal_or_enum) in
    Obj.repr(
# 302 "parser.mly"
                      ()
# 1801 "parser.ml"
               : 'literal_or_enum_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id_list) in
    Obj.repr(
# 306 "parser.mly"
              ()
# 1808 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 307 "parser.mly"
                    ()
# 1816 "parser.ml"
               : 'exception_part))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 311 "parser.mly"
                       ()
# 1824 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 312 "parser.mly"
         ()
# 1831 "parser.ml"
               : 'id_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    Obj.repr(
# 315 "parser.mly"
                                             ()
# 1838 "parser.ml"
               : 'compound_statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 318 "parser.mly"
                ()
# 1845 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 319 "parser.mly"
                                      ()
# 1853 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'access) in
    Obj.repr(
# 325 "parser.mly"
             ()
# 1860 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 326 "parser.mly"
             ()
# 1867 "parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value_not_access) in
    Obj.repr(
# 330 "parser.mly"
                       ()
# 1874 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 331 "parser.mly"
                                 ()
# 1882 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 332 "parser.mly"
                                 ()
# 1890 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 333 "parser.mly"
                                  ()
# 1898 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 334 "parser.mly"
                                 ()
# 1906 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 335 "parser.mly"
                                 ()
# 1914 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 336 "parser.mly"
                                  ()
# 1922 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 337 "parser.mly"
                                  ()
# 1930 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 338 "parser.mly"
                                  ()
# 1938 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 339 "parser.mly"
                                  ()
# 1946 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 340 "parser.mly"
                                ()
# 1954 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 341 "parser.mly"
                                ()
# 1962 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 342 "parser.mly"
                                ()
# 1970 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 343 "parser.mly"
                                ()
# 1978 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 344 "parser.mly"
                     ()
# 1985 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 345 "parser.mly"
              ()
# 1992 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 346 "parser.mly"
          ()
# 1998 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 347 "parser.mly"
                                   ()
# 2006 "parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'value_not_access) in
    Obj.repr(
# 351 "parser.mly"
                                 ()
# 2013 "parser.ml"
               : 'value_not_access))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'access) in
    Obj.repr(
# 352 "parser.mly"
                    ()
# 2020 "parser.ml"
               : 'value_not_access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 356 "parser.mly"
         ()
# 2027 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'access) in
    Obj.repr(
# 357 "parser.mly"
                       ()
# 2034 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'access) in
    Obj.repr(
# 358 "parser.mly"
                   ()
# 2041 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'value_not_access) in
    Obj.repr(
# 359 "parser.mly"
                             ()
# 2048 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'access) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression_list) in
    Obj.repr(
# 360 "parser.mly"
                                       ()
# 2056 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'access) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 361 "parser.mly"
                    ()
# 2064 "parser.ml"
               : 'access))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 365 "parser.mly"
                 ()
# 2071 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_list) in
    Obj.repr(
# 366 "parser.mly"
                                       ()
# 2079 "parser.ml"
               : 'expression_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 367 "parser.mly"
      ()
# 2085 "parser.ml"
               : 'expression_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
