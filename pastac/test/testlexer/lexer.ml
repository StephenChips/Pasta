# 1 "lexer.mll"
 
open Parser;;
exception Eof;;
exception LexingError of string;;

let keyword s =
    match s with
    | "program" -> PROGRAM
    | "function" -> FUNCTION
    | "procedure" -> PROCEDURE
    | "begin" -> BEGIN
    | "end" -> END
    | "for" -> FOR
    | "while" -> WHILE
    | "repeat" -> REPEAT
    | "integer" -> INTEGER
    | "then" -> THEN
    | "until" -> UNTIL
    | "if" -> IF
    | "else" -> ELSE
    | "inc" -> INC
    | "dec" -> DEC
    | "do" -> DO
    | "ref" -> REF
    | "real" -> REAL
    | "string" -> STRING
    | "boolean" -> BOOLEAN
    | "character" ->CHARACTER
    | "array" -> ARRAY
    | "to" -> TO
    | "downto" -> DOWNTO
    | "var" -> VAR
    | "type" -> TYPE
    | "enumerate" -> ENUMERATE
    | "record" -> RECORD
    | "write" -> WRITE
    | "read" -> READ
    | "case" -> CASE
    | "of" -> OF 
    | "break" -> BREAK
    | "continue" -> CONTINUE
    | "try" -> TRY
    | "except" -> EXCEPT
    | "nil" -> NIL
    | "as" -> AS
    | "raise" -> RAISE
    | "or" -> OR
    | "and" -> AND
    | "true" -> BCONST true
    | "false" -> BCONST false
    | _ -> ID s

let escape (s: string): char = 
    match s with
    | "\\\\" -> '\\'
    | "\\\"" -> '"'
    | "\\\'" -> '\''
    | "\\a" -> '\007'
    | "\\b" -> '\008'
    | "\\t" -> '\t'
    | "\\n" -> '\n'
    | "\\v" -> '\011'
    | "\\f" -> '\012'
    | "\\r" -> '\r'
    | _ -> raise (LexingError "unknown Pasta escape.")

;;

let convert_to_char str = 
  if str.[0] = '\\' then
    if str.[1] >= '0' && str.[1] <= '9' then
      let code = int_of_string (String.sub str 1 3) in
      Char.chr code 
    else
      escape str
  else
    str.[0]
;;

# 82 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\224\255\017\000\227\255\228\255\231\255\031\000\235\255\
    \063\000\033\000\238\255\239\255\240\255\241\255\035\000\243\255\
    \244\255\245\255\246\255\247\255\248\255\249\255\080\000\090\000\
    \253\255\254\255\255\255\165\000\175\000\242\255\233\255\232\255\
    \234\255\225\255\207\000\250\255\251\255\147\000\255\255\252\255\
    \253\255\254\255\035\000\109\000\219\000\229\000\110\000\111\000\
    \255\255\252\000\112\000\254\255\253\255\127\000\252\255\253\255\
    \254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\029\000\255\255\255\255\255\255\025\000\255\255\
    \019\000\018\000\255\255\255\255\255\255\255\255\026\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\004\000\003\000\
    \255\255\255\255\255\255\255\255\005\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\
    \255\255\255\255\255\255\003\000\003\000\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\035\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\043\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\054\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\025\000\000\000\000\000\026\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\006\000\021\000\000\000\000\000\015\000\000\000\020\000\
    \013\000\012\000\017\000\019\000\003\000\018\000\002\000\016\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\014\000\004\000\008\000\007\000\009\000\033\000\
    \005\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\011\000\032\000\010\000\030\000\023\000\
    \029\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\024\000\031\000\032\000\027\000\044\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\052\000\048\000\048\000\051\000\
    \000\000\055\000\000\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\040\000\000\000\000\000\
    \000\000\023\000\000\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\036\000\000\000\000\000\000\000\000\000\000\000\039\000\
    \000\000\038\000\000\000\000\000\041\000\041\000\000\000\000\000\
    \000\000\041\000\057\000\000\000\056\000\046\000\000\000\000\000\
    \255\255\041\000\047\000\000\000\000\000\041\000\000\000\041\000\
    \000\000\041\000\000\000\045\000\045\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\037\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\000\000\046\000\
    \000\000\000\000\000\000\000\000\046\000\046\000\000\000\000\000\
    \000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\046\000\000\000\000\000\000\000\046\000\000\000\046\000\
    \000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\055\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\036\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\006\000\000\000\009\000\000\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\008\000\008\000\022\000\042\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\043\000\046\000\047\000\050\000\
    \255\255\053\000\255\255\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\037\000\255\255\255\255\
    \255\255\023\000\255\255\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\034\000\255\255\255\255\255\255\255\255\255\255\037\000\
    \255\255\034\000\255\255\255\255\037\000\037\000\255\255\255\255\
    \255\255\037\000\053\000\255\255\053\000\044\000\255\255\255\255\
    \000\000\037\000\044\000\255\255\255\255\037\000\255\255\037\000\
    \255\255\037\000\255\255\044\000\044\000\044\000\044\000\044\000\
    \044\000\044\000\044\000\044\000\044\000\045\000\045\000\045\000\
    \045\000\045\000\045\000\045\000\045\000\045\000\045\000\255\255\
    \255\255\255\255\255\255\042\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\034\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\255\255\044\000\
    \255\255\255\255\255\255\255\255\044\000\044\000\255\255\255\255\
    \255\255\044\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\044\000\255\255\255\255\255\255\044\000\255\255\044\000\
    \255\255\044\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\034\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 84 "lexer.mll"
                       ( token lexbuf )
# 262 "lexer.ml"

  | 1 ->
# 85 "lexer.mll"
                       ( Lexing.new_line lexbuf; token lexbuf )
# 267 "lexer.ml"

  | 2 ->
# 86 "lexer.mll"
                       ( ignore_comment lexbuf; token lexbuf  )
# 272 "lexer.ml"

  | 3 ->
let
# 87 "lexer.mll"
                                                             s
# 278 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 88 "lexer.mll"
                       ( keyword s )
# 282 "lexer.ml"

  | 4 ->
let
# 90 "lexer.mll"
                    s
# 288 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 90 "lexer.mll"
                           ( ICONST (int_of_string s) )
# 292 "lexer.ml"

  | 5 ->
let
# 91 "lexer.mll"
                                     s
# 298 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 92 "lexer.mll"
                       ( RCONST (float_of_string s) )
# 302 "lexer.ml"

  | 6 ->
# 94 "lexer.mll"
                       ( SCONST (match_string [] lexbuf) )
# 307 "lexer.ml"

  | 7 ->
# 95 "lexer.mll"
                       ( CCONST (match_character lexbuf) )
# 312 "lexer.ml"

  | 8 ->
# 96 "lexer.mll"
                       ( ADD )
# 317 "lexer.ml"

  | 9 ->
# 97 "lexer.mll"
                       ( SUB )
# 322 "lexer.ml"

  | 10 ->
# 98 "lexer.mll"
                       ( MUL )
# 327 "lexer.ml"

  | 11 ->
# 99 "lexer.mll"
                       ( DIV )
# 332 "lexer.ml"

  | 12 ->
# 100 "lexer.mll"
                       ( MOD )
# 337 "lexer.ml"

  | 13 ->
# 101 "lexer.mll"
                       ( ASG )
# 342 "lexer.ml"

  | 14 ->
# 102 "lexer.mll"
                       ( LPAR )
# 347 "lexer.ml"

  | 15 ->
# 103 "lexer.mll"
                       ( RPAR )
# 352 "lexer.ml"

  | 16 ->
# 104 "lexer.mll"
                       ( LBRA )
# 357 "lexer.ml"

  | 17 ->
# 105 "lexer.mll"
                       ( RBRA )
# 362 "lexer.ml"

  | 18 ->
# 106 "lexer.mll"
                       ( GT )
# 367 "lexer.ml"

  | 19 ->
# 107 "lexer.mll"
                       ( LT )
# 372 "lexer.ml"

  | 20 ->
# 108 "lexer.mll"
                       ( EQUAL )
# 377 "lexer.ml"

  | 21 ->
# 109 "lexer.mll"
                       ( NOTEQ )
# 382 "lexer.ml"

  | 22 ->
# 110 "lexer.mll"
                       ( GTEQ )
# 387 "lexer.ml"

  | 23 ->
# 111 "lexer.mll"
                       ( LTEQ )
# 392 "lexer.ml"

  | 24 ->
# 112 "lexer.mll"
                       ( GETREF )
# 397 "lexer.ml"

  | 25 ->
# 113 "lexer.mll"
                       ( DEREF )
# 402 "lexer.ml"

  | 26 ->
# 114 "lexer.mll"
                       ( COLON )
# 407 "lexer.ml"

  | 27 ->
# 115 "lexer.mll"
                       ( SCOLON )
# 412 "lexer.ml"

  | 28 ->
# 116 "lexer.mll"
                       ( COMMA )
# 417 "lexer.ml"

  | 29 ->
# 117 "lexer.mll"
                       ( DOT )
# 422 "lexer.ml"

  | 30 ->
# 118 "lexer.mll"
                       ( RANGE )
# 427 "lexer.ml"

  | 31 ->
# 119 "lexer.mll"
        ( raise (LexingError "LexingError: Illegal token") )
# 432 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and match_string charlist lexbuf =
    __ocaml_lex_match_string_rec charlist lexbuf 34
and __ocaml_lex_match_string_rec charlist lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 123 "lexer.mll"
        ( String.concat "" (List.map (String.make 1) (List.rev charlist)) )
# 444 "lexer.ml"

  | 1 ->
let
# 124 "lexer.mll"
                                            s
# 450 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 125 "lexer.mll"
        ( match_string ((escape s) :: charlist) lexbuf )
# 454 "lexer.ml"

  | 2 ->
# 127 "lexer.mll"
        ( match_string ('"' :: charlist) lexbuf )
# 459 "lexer.ml"

  | 3 ->
# 128 "lexer.mll"
             ( match_string ('\\' :: charlist) lexbuf )
# 464 "lexer.ml"

  | 4 ->
# 130 "lexer.mll"
        ( raise (LexingError "LexingError: Unterminated String") )
# 469 "lexer.ml"

  | 5 ->
let
# 131 "lexer.mll"
           s
# 475 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 132 "lexer.mll"
         ( match_string (s :: charlist) lexbuf )
# 479 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_match_string_rec charlist lexbuf __ocaml_lex_state

and match_character lexbuf =
    __ocaml_lex_match_character_rec lexbuf 42
and __ocaml_lex_match_character_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 135 "lexer.mll"
                                                            s
# 492 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 135 "lexer.mll"
                                                                   ( escape s )
# 496 "lexer.ml"

  | 1 ->
let
# 136 "lexer.mll"
                                            s
# 502 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 4) in
# 136 "lexer.mll"
                                                   ( Char.chr (int_of_string (String.sub s 1 3)) )
# 506 "lexer.ml"

  | 2 ->
let
# 137 "lexer.mll"
           ch
# 512 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 137 "lexer.mll"
                   ( ch )
# 516 "lexer.ml"

  | 3 ->
# 138 "lexer.mll"
        ( raise (LexingError "LexingError: Illegal Character") )
# 521 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_match_character_rec lexbuf __ocaml_lex_state

and ignore_comment lexbuf =
    __ocaml_lex_ignore_comment_rec lexbuf 53
and __ocaml_lex_ignore_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 141 "lexer.mll"
          ( ignore_comment lexbuf; ignore_comment lexbuf )
# 533 "lexer.ml"

  | 1 ->
# 142 "lexer.mll"
          ( () )
# 538 "lexer.ml"

  | 2 ->
# 143 "lexer.mll"
                     ( raise (LexingError "LexingError: Undetermined Comment") )
# 543 "lexer.ml"

  | 3 ->
# 144 "lexer.mll"
          ( ignore_comment lexbuf )
# 548 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_ignore_comment_rec lexbuf __ocaml_lex_state

;;

